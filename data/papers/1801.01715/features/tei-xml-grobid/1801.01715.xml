<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Spectral Graph Forge: Graph Generation Targeting Modularity</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Luca</forename><surname>Baldesi</surname></persName>
							<email>luca.baldesi@unitn.it</email>
						</author>
						<author>
							<persName><forename type="first">Carter</forename><forename type="middle">T</forename><surname>Butts</surname></persName>
							<email>buttsc@uci.edu</email>
						</author>
						<author>
							<persName><forename type="first">Athina</forename><surname>Markopoulou</surname></persName>
							<email>athina@uci.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">DISI Dept</orgName>
								<orgName type="department" key="dep2">Sociology Dept</orgName>
								<orgName type="institution" key="instit1">University of Trento</orgName>
								<orgName type="institution" key="instit2">University of California</orgName>
								<address>
									<settlement>Irvine</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">EECS Dept</orgName>
								<orgName type="institution">CPCC University of California</orgName>
								<address>
									<settlement>Irvine</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Spectral Graph Forge: Graph Generation Targeting Modularity</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">AB238BD2B6530E4578F44EA2CA2C1EEF</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-02-21T16:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Community structure is an important property that captures inhomogeneities common in large networks, and modularity is one of the most widely used metrics for such community structure. In this paper, we introduce a principled methodology, the Spectral Graph Forge, for generating random graphs that preserves community structure from a real network of interest, in terms of modularity. Our approach leverages the fact that the spectral structure of matrix representations of a graph encodes global information about community structure. The Spectral Graph Forge uses a low-rank approximation of the modularity matrix to generate synthetic graphs that match a target modularity within user-selectable degree of accuracy, while allowing other aspects of structure to vary. We show that the Spectral Graph Forge outperforms state-of-the-art techniques in terms of accuracy in targeting the modularity and randomness of the realizations, while also preserving other local structural properties and node attributes. We discuss extensions of the Spectral Graph Forge to target other properties beyond modularity, and its applications to anonymization.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Generating random graphs with certain prescribed properties is an increasingly important field <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>. Random graphs are widely used to model structure in social, computer, and biological systems, with applications ranging from importance sampling to the generation of synthetic data sets. One use of synthetic graphs is as a proxy of real-world data sets. For example, in the measurement community, researchers collect Internet <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref> or online social network <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref> topologies, making them available to other researchers for use in studying their properties or evaluating the performance of graph algorithms. In this context, it is often desirable to not release the original graph itself, but to generate synthetic graphs that (exactly or approximately) specify properties of interest of the real (or "target") graph, while varying with respect to other properties. This can be useful for anonymization purposes (i.e., to obfuscate individual or other sensitive information) and/or for simulation purposes (i.e., to ensure acceptable performance over a range of network structures, while preserving features known to be present in real-world use cases).</p><p>This work was conducted when Luca Baldesi visited UC Irvine in 2016. All authors were partially supported by NSF Award III-1526736. A. Markopoulou is a member of the Center for Pervasive Communications and Computing (CPCC).</p><p>Prior work has primarily focused on generating synthetic graphs with certain local structural properties, such as degree distribution, degree correlations, subgraph counts etc. <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b9">[10]</ref>, while global properties have received less attention. In this paper, we are interested in an important global property exhibited by many social and communications networks, namely community structure, which captures the complex pattern of inhomogeneities that characterize them. Real-world networks are typically irregular, containing numerous and often nested or overlapping subsets of vertices that are internally cohesive while being less well-connected to other subsets. This community <ref type="bibr" target="#b10">[11]</ref> or cohesive subgroup structure <ref type="bibr" target="#b11">[12]</ref> has a profound impact on phenomena such as diffusion or robustness to failure; it can also affect the performance of sparse-graph algorithms for tasks such as path or cycle counting that are sensitive to the presence of small, densely connected clusters of vertices. Graph generation methods that focus on local features (such as subgraph counts, the degree distribution, clustering etc.) do not necessarily preserve community structure, and the resulting graphs may be poor proxies for real-world networks in applications that are sensitive to it, such as diffusion. Therefore, distinct methods are needed to target it.</p><p>In this paper, we present a novel random graph generation framework that is well-suited to the above applications. In particular, we target community structure, within desired accuracy while allowing other features to vary. We use modularity, a well-known property of matrices to capture the community structure <ref type="bibr" target="#b10">[11]</ref>. Starting from a given real graph as input, we use the original graph's high-level structure captured by the eigenstructure of its modularity matrix to derive a class of random graphs sharing the same modularity value, within a level of accuracy.</p><p>Our approach can be summarized as follows and is depicted in Fig. <ref type="figure">1</ref>. Given the adjacency matrix of a graph A, we capture its community structure via its modularity matrix (B). Because B is symmetric and real, it admits a spectral decomposition <ref type="bibr" target="#b12">[13]</ref> which expresses the matrix in terms of a set of eigenvectors and eigenvalues. We apply a low-rank spectral approximation <ref type="bibr" target="#b13">[14]</ref> on this eigenstructure to yield an approximated matrix reflecting the features most strongly associated with global structure; this matrix is then transformed and normalized to produce an edge probability matrix arXiv:1801.01715v1 [cs.SI] 5 Jan 2018 (A † ), which is then passed to a sampling algorithm to yield a synthetic graph (with adjacency matrix A ). The synthetic graphs produced will preserve the higher-order properties (modularity) of the input, while allowing other details to vary.</p><p>Spectral Graph Forge has several strengths. First, our approach is principled, based on spectral approximation of matrices, thus the name Spectral Graph Forge (SGF), and provides a tunable parameter to tradeoff between accuracy of the targeted modularity and the randomness of the produced realizations. Second, Spectral Graph Forge outperforms stateof-the-art baseline approaches in several aspects and for a range of graphs: (i) it achieves the target modularity more accurately than baselines (Section V-B) (ii) it preserves some metrics of local structure, beyond modularity (Section V-C) (iii) it can maintain the node and edge attributes, hence it can preserve properties beyond just pure topology (Section V-D). Third, the analysis of the entropy of graphs produced shows that they vary substantially on dimensions other than those deliberately targeted (Section V-E); we discuss how to exploit this property and use SGF as anonymization technique for social networks. Last but not least, SGF is not limited to targeting modularity, which is the focus of this paper. The general SGF framework can be used to target other matrix representations of a graph, such as the adjacency matrix or one of its derived matrices (including but not limited to modularity, laplacian, clique co-membership).</p><p>The structure of the rest of the paper is as follows. In Section II, we review related work. In Section III, we discuss community structure and its relation to modularity. In Section IV, we present our Spectral Graph Forge Framework, and how to apply it specifically to generate graphs with a prescribed modularity. In Section V, we evaluate our algorithms for various datasets (both synthetic and real-world social networks), against state-of-the art algorithms targeting modularity. Section VI concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>There is a significant amount of work on generation of graphs that preserve local structural properties (e.g., degree distribution, small subgraph counts). Graphlets <ref type="bibr" target="#b4">[5]</ref>, motifs <ref type="bibr" target="#b3">[4]</ref> and dK-series <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b2">[3]</ref> graph generators are all intended to produce graphs that preserve such properties, starting from an initial realization, or from a vector of input statistics. Exponential family random graph models (ERGMs) <ref type="bibr" target="#b14">[15]</ref> can be employed to simulate graphs having the same expected values for a series of targeted features as the original, and most applications to date have likewise focused on local properties (including properties that depend on nodal or edgewise covariates); among other differences from the above, ERGMs preserve only expected statistics (not exact values), but provide maximum entropy guarantees.</p><p>In contrast, for global properties such as the graph modularity <ref type="bibr" target="#b10">[11]</ref>, there exist only a few approaches so far that target them by design. Trajanovski et al. <ref type="bibr" target="#b15">[16]</ref> propose an algorithm for generating graphs with a prescribed modularity. The Karrer and Newman stochastic block model <ref type="bibr" target="#b16">[17]</ref> generates graphs with a given community structure and modularity value. In principle, other latent structure models such as the latent space models <ref type="bibr" target="#b17">[18]</ref> and latent stochastic block models <ref type="bibr" target="#b18">[19]</ref> could also be used to simulate graphs with related properties, although applications to date have been focused on inference. In Section V-A2, we describe the modularity-targeting algorithms by Trajanovski et al. and Karrer and Newman, and we used them as baselines for comparison. The relation between modularity and eigenstructure has been investigated mainly for applications such as community detection <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b19">[20]</ref>, visualization <ref type="bibr" target="#b20">[21]</ref>, and analysis <ref type="bibr" target="#b17">[18]</ref>. To the best of our knowledge, our work is the first to design and implement a general framework for generation of synthetic graphs with specified high-level structure (modularity being the focus in this paper) by means of spectrally transformed inputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. MODULARITY AND COMMUNITY STRUCTURE A. Definitions and Intuition</head><p>Modularity is one of the most widely used metrics for characterizing community structure <ref type="bibr" target="#b21">[22]</ref>. It expresses the extent to which a partition of vertices divides the graph such that withingroup densities are higher than between-group densities; the maximum modularity obtainable over all partitions is hence a global measure of the extent to which a graph approximates a union of dense structures that are minimally connected to one another. Modularity is closely related to cohesive subgroup structure, a topic of historical sociological interest <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b23">[24]</ref>, and has been the object of extensive study within the large literature on community detection <ref type="bibr" target="#b21">[22]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b19">[20]</ref>.</p><p>Formally, modularity is defined as follows. Given a graph G = (V, E), where |V | = n, with adjacency matrix A and degree vector K = (k 1 , . . . , k n ), the modularity matrix B is defined as <ref type="bibr" target="#b10">[11]</ref> B ij = A i,j -</p><formula xml:id="formula_0">k i k j |K|<label>(1)</label></formula><p>where |K| = n i=1 k i is the degree sum. B effectively captures the number of edges within nodes of the same community compared to a random graph with the same expected degree sequence. Given a node partition {C 1 , . . . , C m } with nodes assigned to communties c 1 , . . . , c n ∈ {C 1 , . . . , C m }, the modularity value measuring this concentration over all node pairs is:</p><formula xml:id="formula_1">Q = 1 |K| i,j A i,j - k i k j |K| δ(c i , c j ).<label>(2)</label></formula><p>where δ(a, b) = 1 iff a = b and 0 otherwise. The notion of modularity is used in three ways. First, given a partition of nodes into communities c 1 , . . . , c n , Q provides a metric for how well the partitioning matches the actual topology. Second, Q can be used to search for community structure, by seeking a partition of nodes into m * communities, c * 1 , . . . , c * n , such that Q * is maximized. Finally, the maximized value of Q * over all partitions can be taken as an indicator of the extent to which the graph naturally divides into distinct communities. This quantity is sometimes referred to generically as the modularity of the graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Modularity and Spectral Structure</head><p>The eigenstructure of an adjacency matrix A associated to a given graph is intimately related to the structure of the associated graph. A can be decomposed in a set of eigenvalues λ i and eigenvectors v i ; the eigenvectors associated with positive eigenvalues describe core-periphery structures <ref type="bibr" target="#b24">[25]</ref> and the signs of their entries describe possible graph bi-partitions. The eigenvectors associated with negative eigenvalues relate instead to memberships in bi-partitions, so that, the sign of their entries indicate a likelihood of node connection.</p><p>Hence, there is an obvious affinity between the information described by the eigenvectors and modularity but for the leading eigenvector, associated to the main core of the network (the whole graph) and it would be natural to consider the eigenstructure of the residual matrix A-λ 1 v 1 v T 1 (where λ 1 , v 1 are respectively the leading eigenvalue and eigenvector) as a basis for community detection.</p><p>However, in practice, v 1 is typically correlated with K, and hence the modularity matrix B = A -KK T /|K| is very close to the residual matrix. In keeping with this observation, it is common practice (e.g., <ref type="bibr" target="#b10">[11]</ref>) to work with the eigenstructure of B to identify partitions, recursively subdividing nodes into classes based on the signs of their eigenvector elements associated with high-modulus, positive eigenvalues of B. For example, in <ref type="bibr" target="#b21">[22]</ref>, Newman showed that the leading eigenvector of the modularity matrix B determines the best bipartition of nodes into two communities.</p><p>Beyond modularity: While in this paper, we focus on targeting modularity, our spectral decomposition framework is more general and can be tuned to capture desired structural elements of interest, while randomizing out other features. More generally, we could also apply SGF to matrices other than B (namely A and its derived matrices), and use it to target other global properties. For example, while the leading eigenvector defines the best bipartition <ref type="bibr" target="#b21">[22]</ref>, positive/negative eigenvalues capture core-periphery/bipartition structures, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. SPECTRAL GRAPH FORGE</head><p>The Spectral Graph Forge takes an undirected graph G with n nodes as input and, for each run, produces a random output graph G with the same number of nodes. We represent G and G with their respective adjacency matrices A, A ∈ {0, 1} n×n . The Spectral Graph Forge is designed to be as modular and extensible as possible; its graph construction process can be viewed, hence, as a pipeline composed by several nearly independent steps, each of which can be varied as needed by the user. A representation of this pipeline is depicted in Fig. <ref type="figure">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Transformation</head><p>To allow the Spectral Graph Forge to preserve structure associated with either A or a derived matrix, we work with a user-selected real-valued, symmetry preserving transformation of A, denoted M . The main use case of M in this paper is the modularity matrix</p><formula xml:id="formula_2">M = B = A -KK T /|K|. Other examples of M include the adjacency matrix itself M = A, Transformation M = A M =A -KK T |K| low-rank α- approximation of M → M A Back- Transform. Ã = M Ã = M + KK T |K| Normalizing A † = logistic( Ã, k) A † = truncate( Ã) A † = scale( Ã) Sampling A = Bernoulli(A † ) A Fig. 1.</formula><p>The pipeline of the Spectral Graph Forge (SGF) Framework. Given an undirected graph adjacency matrix A as input, SGF outputs a "similar" one A from which we can build the corresponding graph, called SGF(α). Sub-blocks indicate mutually exclusive options for each step. The focus of this paper is on using SGF to target modularity, by setting M = B = A-KK T /|K|), and the corresponding blocks are highlighted in grey. and the clique co-membership matrix (whose i, j cells are the counts of cliques containing both i and j).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Low-rank α approximation.</head><p>Since M is real and symmetric, it can be expressed as</p><formula xml:id="formula_3">M = V ΛV T = n i=1 λ i v i v T i ,<label>(3)</label></formula><p>where λ i , v i are respectively the ith eigenvalue and the ith eigenvector of M (all of which are real). W.l.o.g., we scale v i so that ||v i || 2 = 1 and sort the eigenvectors/eigenvalues such that</p><formula xml:id="formula_4">|λ 1 | ≥ • • • ≥ |λ n |.</formula><p>Hence the first components of Eq. ( <ref type="formula" target="#formula_3">3</ref>) contribute to M more than the last ones. We can perform a lossy compression of M by removing the least important frequencies. We use a parameter α ∈ [0, 1] to control the fraction of the eigenvectors we want to keep from the original M and our approximation is</p><formula xml:id="formula_5">M = αn i=1 λ i v i v T i<label>(4)</label></formula><p>This is essentially a low-pass filter on M , which retains global characteristics captured by the first αn eigenvectors of the matrix, while removing the remaining ones, associated with idiosyncratic local structures. <ref type="foot" target="#foot_0">1</ref> The euclidean norm of the error, M -M , due to transformation can be computed as</p><formula xml:id="formula_6">M -M 2 = n i= αn +1 λ i v i v T i 2 = λ αn +1<label>(5)</label></formula><p>Hence, SGF can target the reproduction of M within arbitrary precision, by tuning α (see Appendix A).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Back-Transfomation.</head><p>Once the low-rank approximation M is obtained, we need to transform it to obtain an approximated adjacency matrix Ã ∈ R n×n . Where the back-transformation is the inverse of the transformation M to M . For the modularity matrix M = B = A -KK T /|K|, the back transformation is intuitive: Ã = M + KK T /|K|. Other choices of back-transformation may be employed where M is not invertible (e.g., in the case of the co-clique matrix), resulting in a different approximation. Since Ã is not, in general, an adjacency matrix, our SGF fills the gap between Ã and the final A , by normalizing the values to be within [0, 1] (A † ) and by using a stochastic process that forces the elements to be either 1 or 0 (A ), as described next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Normalization</head><p>We first normalize the values of the latter in [0, 1] obtaining:</p><formula xml:id="formula_7">A † i,j = norm( Ãi,j ),</formula><p>where norm is a user-specified normalization function. With modularity in mind, we investigated three variants for this normalization function:</p><formula xml:id="formula_8">• logistic( Ãi,j , k) = 1 1+e (0.5-Ãi,j )•k , where k ∈ [2, 10] • truncate( Ãi,j ) =    1 if Ãi,j ≥ 1 0 if Ãi,j ≤ 0 Ãi,j otherwise • scale( Ãi,j ) = Ãi,j -mins,t Ãs,t maxs,t Ãs,t-mins,t Ãs,t</formula><p>where k ∈ [2, 10] is a parameter we use to tune the inclination of the logistic() function.</p><p>We have extensively evaluated the above normalization functions and we found that the truncation rule gives the cleanest entropy and distance relationships; in fact, scale introduces a distortion highly dependent on the difference between the minimum and maximum value while logistic (for which we found with k = 6 provides the best performance for our case of study) shows poor sensitivity to α, preserving relatively little structure throughout. Details on this investigation are deferred to Appendix B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Sampling</head><p>Taking A † as a matrix of expectations for A , we complete our process by drawing A from an inhomogeneous Bernoulli graph distribution: A i,j = bernoulli(A † i,j ), ∀j &gt; i. Note that to generate a simple undirected graph A , we set:</p><formula xml:id="formula_9">• A i,i = 0, ∀1 ≤ i ≤ n • A j,i = A i,j , ∀j &gt; i</formula><p>As with other aspects of the pipeline, this can be generalized (e.g., to allow for degree or other constraints). In the following, we denote by SGF(α) as the graph resulting from A , drawn using our method on fraction α of the eigenvectors.</p><p>Entropy of the Synthetic Graphs. One advantage of the use of an inhomogeneous Bernoulli graph in our pipeline is that we can compute exactly the (Shannon) entropy of our synthetic distribution. Entropy indicates the degree of variation in the output graphs, and is an indicator of the extent to which a graph generation method is able to provide a range of structures compatible with its arguments; at constant graph order n, it necessarily varies between n(n -1)/2 bits for a uniform random graph and 0 bits for a generator that produces only a single realization with certainty. Given a fixed level of preservation of targeted features, generators with higher entropy are typically preferable (as they vary the distribution of structures as widely as possible, given the desired constraints). The ability to easily compute output entropy is a useful feature of our approach; by contrast, most other approaches provide no known way of computing output entropy, making it difficult to assess the extent to which they are able to produce a diverse range of structures.</p><p>Since A is drawn from a Bernoulli graph distribution with parameter matrix A † , the entropy is immediate:</p><formula xml:id="formula_10">H(A † ) = 1 S n i=1 n j=i+1 -A † i,j log 2 [A † i,j ] -(1 -A † i,j ) log 2 [1 -A † i,j ],</formula><p>which is readily computed from A † , where S =</p><p>-n(n-1) 2</p><formula xml:id="formula_11">(log 2 δ + log 2 (1 -δ)) is the normalization factor and δ = 2 n 2 -n i,j A † i,j</formula><p>is the expected graph density under A † . This index can be interpreted as the fraction of the maximum possible entropy that A attains, given its expected density.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Computational Complexity</head><p>To analyze the complexity of SGF, we consider the complexity of each block in Fig. <ref type="figure">1</ref>. The pipeline starts with a graph G = (V, E), |V | = n, |E| = m. The Transformation and Back-Transformation blocks can clearly be performed in O(n<ref type="foot" target="#foot_1">foot_1</ref> ). The Normalizing and Sampling blocks operate element-wise on n × n matrices and apply a float operation so their cost is O(n 2 ). The Low-rank α-approximation block performs a spectral decomposition on a n × n matrix which can be done in O(n 3 ) or O(nm) in case of an input sparse matrix 2 . Overall, the bottleneck of SGF is the spectral decomposition, which, for sparse input matrices M , has hence a complexity of O(n 2 ) <ref type="bibr" target="#b10">[11]</ref>. We mainly target social graphs where the community structure analysis is of main interest; these graphs are generally quite sparse with a low number of nodes (each of the network in our real-world dataset has less then 10 5 nodes). Furthermore, SGF can gracefully tradeoff complexity for accuracy by tuning the parameter α: keeping a few eigenvectors in the approximation (Eq. ( <ref type="formula" target="#formula_5">4</ref>)), increases the error (Eq. ( <ref type="formula" target="#formula_6">5</ref>)) but decreases the complexity of the spectral decomposition (e.g. using the moment method).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EVALUATION A. Evaluation Setup</head><p>To validate our approach, we test the Spectral Graph Forge against state-of-the art baselines (Section V-A2) on several datasets (Section V-A1), and in terms of several metrics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Datasets:</head><p>We use both synthetic and real-world datasets; the former for a fair comparison on well-known state-of-theart datasets in the field of community detection, and the latter to show that our results hold with real data as well.</p><p>I. Synthetic Datasets. A random graph generator that controls modularity is the following: fix the number of communities and then control the intra-community vs. inter-community probability of edge: fixing the inter-community edge probability, higher values of intra-community edge probability leads to higher modularity value. Although stylized, this model allows for explicit control of the inherent modularity of the synthetic graph. This idea has been widely used since the early days of community detection. For example, Girvan and Newman <ref type="bibr" target="#b26">[27]</ref> generated graphs with 128 nodes, communities of the same size and essentially constant node degree. The idea has been extended by Lancichinetti et al. <ref type="bibr" target="#b27">[28]</ref> to produce networks of 1000 nodes and geometrically distributed node degrees and community sizes. We use both generators to produce ten networks from each, and refer to them as Girvan or Lancichinetti datasets, respectively.</p><p>II. Real World Datasets. In the real world, community structure can be found in nearly any network representing interpersonal relationships. Some of the most striking group structures are seen in the context of friendship networks, particularly for populations such as adolescents (who are frequently segregated by age, among other factors). The National Longitudinal Study of Adolescent to Adult Health (referred to as Add-Health in the following) is a U.S. national study on adolescents in grades 7-12. It is a large, longitudinal study of students drawn from a sample of American secondary schools, with data being collected during an initial in-school survey followed by four in-home interviews spanning from 1994 to 2008 <ref type="bibr" target="#b28">[29]</ref>. In this work we employ the public-use network data from the first wave, in which students were asked to nominate peers they considered to be friends; the data used here comprises 16 different networks, in which each network represents a school (or pair of linked schools in which graduates of the first proceed to the second), each vertex represents a student, and each edge represents a friendship nomination. For each student, we are also provided with data on gender, race/ethnicity, and grade. Overall, friendships are strongly segmented by grade, with additional divisions by other demographic characteristics in most schools.</p><p>Finally, we also consider smaller networks frequently encountered when analyzing large-scale network data. Given a large network and a given node, an egocentric network (or ego net) for this node is the induced subgraph formed by the node ("ego") and its first-order neighborhood ("alters"). An ego net hence includes all ego-alter ties, together with the alter-alter relationships; cohesive subgroups in the ego net (with ego subtracted) thus mark the local communities of alters with whom ego interacts. Here, we employ the Facebook dataset of Mcauley and Leskovec <ref type="bibr" target="#b29">[30]</ref>, which contains a set of ego-networks derived from the Facebook social network comprising of 10 different networks of size ranging from 52 to 1034 nodes (ego removed for analysis).</p><p>2) Baseline Modularity-Targeting Algorithms: There are two classes of prior state-of-the-art graph generation algorithms that have been used to explicitly target modularity. We briefly present here these algorithms to facilitate better understanding of our experimental results. I. Trajanovski Algorithm Trajanovski et al. <ref type="bibr" target="#b15">[16]</ref> present three different rewiring operations capable of varying the modularity value of a graph with a given partition. The input to the algorithm is a target modularity value Q * t , a number of communities m and a total number of links L. In the initialization phase, it creates the communities of nodes in the form of a tree with no more than one link between two communities. This configuration has the maximum achievable modularity for the given input. Then, rewiring transformations are applied to lower the modularity value to the target one.</p><p>A limitation of this approach is that it assumes the community graph partitioning c * 1 , . . . , c * n never changes. Since the best partition is dictated by the topology, the rewiring process may alter them and, consequently, yield an apparent modularity that is lower than the optimum. Hence, even if the rewiring process successfully obtains the desired modularity value Q * t with respect to the initial partitioning, the output graph may have topology with a slightly different inner community structure, leading to a completely different modularity value Q * o .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. Degree Corrected -Stochastic Block Model (DC-SBM)</head><p>The stochastic block model <ref type="bibr" target="#b30">[31]</ref> is a generative algorithm for groups or communities in networks. The related algorithms work by placing each edge e i,j between the vertices v i , v j with a probability which is function of c i and c j . Since c i , c j ∈ {C 1 , . . . , C m }, these probabilities form a matrix of inter and intra community (block) connection probabilities.</p><p>Generally, simple stochastic block models have difficulty in building graphs with community structure matching real-world data sets <ref type="bibr" target="#b16">[17]</ref>. A limitation of the most basic models in this class is that they do not include effects for other forms of structure found in real-world networks, e.g. degree heterogeneity. The approach proposed by Karrer and Newman <ref type="bibr" target="#b16">[17]</ref> rectifies this last limitation by correcting for the degree distribution, yielding improved performance on realistic topologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Results on Targeting Modularity</head><p>Here, we evaluate the main objective of this paper, i.e., how well Spectral Graph Forge achieves the target modularity. When comparing the modularity value of an input graph Q i (or Q * i ) with the modularity value of an output one Q o (or Q * o ), we consider the (maximum) modularity ratio Qo Qi (or</p><formula xml:id="formula_12">Q * o Q * i</formula><p>): the closer this ratio to 1, the closer the output graph matches the input in terms of modularity. To compute the modularity value we use the well-known algorithm by Lefebvre et al. <ref type="bibr" target="#b31">[32]</ref>. 3  1) Insights into SGF itself.: We first consider a trivial dataset for which our graphs are made of 128 nodes and 2 or 8 communities, and we vary parameters of SGF (α) as well as the inherent community structure of the target network to get 3 There is a large body of work on community detection algorithms to maximize Q <ref type="bibr" target="#b32">[33]</ref>. In this work, we compute c * 1 , . . . , c * n and the associated modularity values using the well-known algorithm by Lefebvre et al. <ref type="bibr" target="#b31">[32]</ref>. insights into the behavior of SGF. Fig. <ref type="figure">2</ref> shows the maximum modularity ratio</p><formula xml:id="formula_13">Q * o Q * i</formula><p>varying the α parameter with networks of two and eight communities respectively. As expected, the as α → 1, the more eigenvectors are used and the better the performance (</p><formula xml:id="formula_14">Q * o Q * i → 1).</formula><p>The SGF performance, in terms of how well it targets modularity, is also influenced by the inherent community structure. In Fig. <ref type="figure">2</ref>, we see that SGF requires more eigenvectors for 8 than for 2 communities, in order to obtain similar results. In Fig. <ref type="figure">3</ref>, we see that the higher the modularity of the input graph (controlled by the intra-community edge probability) the better the performance of SGF.</p><p>2) Evaluating SGF against baselines.: Experiments. In the SGF pipeline, we target the modularity matrix as the M = B, the truncation as the normalization function, and a value α = 0.9. We apply SGF to each input network ten different times, computing the modularity ratio for each simulation; the same process is carried out for the two baseline algorithms.</p><p>In particular, for the <ref type="bibr">Trajanovski et</ref> al. algorithm, we compute the modularity value Q * o , the number of nodes n, the number of edges and the number of communities from each input graph and we use them for the Trajanovski approach. As input 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Add-Health Facebook Girvan Lancichinetti Modularity Ratio Trajanovski SGF(0.9) DC-SBM Fig. 4. Means and 99% confidence intervals for the modularity ratio, by method and data set.</p><p>TABLE I MODULARITY RATIO FOR ALL THE STRATEGIES ON ALL THE DATASETS. Strategy Dataset Mean Std Dataset Mean Std SGF(0.1) Add-Health 0.76038 0.10479 Facebook 0.80551 0.07143 SGF(0.1) Girvan 0.74602 0.01709 Lancichinetti 0.58268 0.00799 SGF(0.2) Add-Health 0.71985 0.06740 Facebook 0.82773 0.08925 SGF(0.2) Girvan 0.70728 0.01033 Lancichinetti 0.54349 0.00576 SGF(0.3) Add-Health 0.75379 0.07496 Facebook 0.87341 0.08013 SGF(0.3) Girvan 0.70690 0.01553 Lancichinetti 0.55989 0.00530 SGF(0.4) Add-Health 0.80250 0.10278 Facebook 0.86587 0.06847 SGF(0.4) Girvan 0.73735 0.00793 Lancichinetti 0.59954 0.00445 SGF(0.5) Add-Health 0.82452 0.08711 Facebook 0.89184 0.06929 SGF(0.5) Girvan 0.77007 0.01134 Lancichinetti 0.64635 0.00339 SGF(0.6) Add-Health 0.86057 0.08472 Facebook 0.91149 0.06688 SGF(0.6) Girvan 0.83302 0.01151 Lancichinetti 0.71476 0.00564 SGF(0.7) Add-Health 0.88024 0.05368 Facebook 0.93420 0.07223 SGF(0.7) Girvan 0.88050 0.01007 Lancichinetti 0.78831 0.00714 SGF(0.8) Add-Health 0.93563 0.03820 Facebook 0.96249 0.02018 SGF(0.8) Girvan 0.92902 0.00797 Lancichinetti 0.87126 0.00553 SGF(0.9) Add-Health 1.02524 0.03708 Facebook 0.98131 0.05789 SGF(0.9) Girvan 1.02722 0.00429 Lancichinetti 1.05135 0.00338 DC-SBM Add-Health 0.88304 0.09229 Facebook 0.89041 0.11375 DC-SBM Girvan 0.88989 0.00892 Lancichinetti 0.90944 0.00462 Trajanovski Add-Health 0.71150 0.08293 Facebook 1.38715 0.45120 Trajanovski Girvan 0.97946 0.31149 Lancichinetti 0.79338 0.00097</p><p>to the DC-SBM algorithm, instead, we use the node degree sequence, the node group assignment c * 1 , . . . , c * n , the group degree sequence on this partition and the number of edges between each pair of groups, computed on the original graph.</p><p>Comparison. Table <ref type="table">I</ref> reports the mean and the standard deviation of obtained modularity ratios comparing the methods with different values of α on every dataset and it shows the Spectral Graph Forge requires α ∼ 0.7, 0.8 in order to obtain results similar to the one of DC-SBM and that Trajanovski obtains results with a very high standard deviation from the target value. Fig. <ref type="figure">4</ref> reports the mean and 99% confidence intervals for the resulting modularity ratios, for which SGF with α = 0.9 consistently produces graphs with a maximum modularity nearly equal to the input data set (modularity ratio appx. 1). In contrast, the Trajanovski et al. algorithm frequently produces graphs with too high or too low modularity, and does so with high variance. The DC-SBM performs more consistently, but tends to achieve modularity lower than the target, and generally shows higher variance. Interestingly, both the Trajanovski et al. and DC-SBM algorithms perform better on the synthetic data sets than in their real-world counterparts. Across all four data sets, the Spectral Graph Forge is consistently closer to the target. Fig. <ref type="figure">5</ref> looks at a related but different metric: it presents means and 99% confidence intervals for the ratio of number of detected output partitions (under modularity maximization) vs. the number of input partitions; this expresses the extent to which each algorithm preserves the number of communities found in the input graph. The target value is again 1, as our objective is to generate graphs with the same number of communities. Spectral Graph Forge consistently reproduces the number of input partitions for three out of the four data sets, but tends to split communities within AddHealth. None of the other algorithms consistently performs as well as the Spectral Graph Forge, with some being tied on some data sets; the only case of better performance by a competing algorithm is DC-SBM on AddHealth, which overproduces communities by a slightly smaller margin. 4   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Results on Other (Local) Structural Properties</head><p>In addition to accurately targeting modularity, our approach also generates output graphs A = SGF (α) maintaining other important (local structural) properties of the input A.</p><p>Clustering is a local network property, indicating the extent of triadic closure. Fig. <ref type="figure">6</ref> presents means and confidence intervals for the average clustering ratio between the output and input graphs. Although it is not apparent that the Spectral Graph Forge would do well at capturing this local property - 4 None of the three algorithms perform optimally on this data set. That can be due to input partition solutions not necessarily stable to small perturbations, and a generated graph could have different numbers of identified subgroups than the source graph even if the two are similar in most respects. since it targets global structure -it in fact does well for all four data sets. By contrast, the other modularity-targeting methods do not tend to preserve clustering. This is particularly evident for the Trajonovski et al. algorithm, whose rewiring strategy can easily alter the structure of triads. Degree sequence. We also examined the correlation of the degree sequence of the input and output graphs. (Recall that, in the presence of covariates, nodes are non-exchangeable.) While the eigenvectors of the modularity matrix are only loosely connected with degree, we show better performance on this metric than the competing methods. In particular, Trajanovski doesn't attempt to preserve the degree distribution at all, leading (reasonably enough) to a nearly complete loss of correlation between degree sequences. The relatively poor performance of the DC-SBM method is more surprising, given that it attempts to preserve degree information. Overall, it performs only slightly worse than the Spectral Graph Forge for three out of four data sets, the lone exception being the Girvan synthetic networks (where the Spectral Graph Forge has a correlation of nearly 1, vs. almost 0 for DC-SBM).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Results on Attribute Modularity Preservation</head><p>We find that our approach not only successfully preserves the maximum modularity value Q * but also preserves the modularity of significant partitions other than the topologically best one. If we consider partitions c 1 , . . . , c n indicating e.g. gender, race/ethnicity, or school grade provided by the Add-Health dataset, we can compute the resulting modularity values Q i , on the original graphs, and Q o on the output graphs after applying the same attribute sequence, summarizing the similarity by the resulting modularity ratio. The closer this ratio is to 1, the better maintained the community structure for partitions associated with important covariates (whether or not they correspond to modularity-maximizing partitions).</p><p>Fig. <ref type="figure" target="#fig_3">8</ref> shows the comparison. The Add-Health dataset is a real-world dataset with attributes associated with the nodes. Attribute labeling for the output graphs of Trajanovski and DC-SBM is done trivially, by assigning attributes to the nodes in the same order as the input ones. As expected, the Spectral Graph Forge closely preserves modularity on all attribute partitions, while the other methods typically perform poorly, entirely losing the graph structure. This is not surprising as the other methods were not designed to preserve other community structure but the topological one and their performance are shown only for completeness. On contrary, SGF successfully reproduce all the possible (even overlapping) community structures from the original ones, being, to the best of our knowledge, the first suitable generator for creating graph proxies with complex community structures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Randomness of Realizations and (De)anonymization</head><p>The closer α is to 1, the better our approach targets the intended modularity. However, two natural questions arise from this relationship: (1) as α → 1, how concentrated is the distribution of graphs A = SGF (α) we produce? (2) as α → 1, how distinct is our output A from the input A? Ideally, we would like a relatively low level of concentration and a reasonable distance from the input graph, to grant a sufficient degree of randomness in our realizations. We use the normalized Shannon entropy to measure the concentration of the SGF distribution in the space of graphs; this is important for the use case of simulation. To measure the distinctness of a realized graph from the input network, we consider a pragmatic metric that maps to another important potential use case: resistance to de-anonymization attacks. We envision that Spectral Graph Forge could be used not only as a graph generator for simulating graphs resembling real-world networks, but also as an anonymization technique (in conjunction with others) to anonymize A to A , while preserving several global and local properties.</p><p>De-anonymization attacks attempt to identify the nodes in a partially labeled graph, exploiting similarities between the two graphs and potentially auxiliary informartion. To the extent that a generated network cannot be readily de-anonymized with respect to the original graph structure, the two networks are clearly distinct; this is important for applications such as anonymization of real network datasets, where concealment of node identities is a major priority. For example, a Facebook dataset may be collected and made publicly available after proper anonymization (removing node ids, and perturbing the network structrure); de-anonymization attacks can infer the node ids based on graph structure and auxiliary information. A survey of state of the art anonymization and deanonymization techniques can be found in <ref type="bibr" target="#b33">[34]</ref>. We pick one of the state-of-the-art de-anonymization attacks: the Distance Vector attack <ref type="bibr" target="#b34">[35]</ref>, which is proven to be scalable, robust and exploitative of global graph characteristics <ref type="bibr" target="#b33">[34]</ref> preserved by the SGF. At each run, we feed the Distance Vector attack with a seed of 5% of nodes as ground truth and we report the mean fraction of nodes the attack successfully identified. Examining the fraction of nodes identified as a function of α allows us to examine the tradeoff between privacy preservation and synthetic data quality.</p><p>The upper plot of Fig. <ref type="figure" target="#fig_4">9</ref> presents the results for one connected graph from the Add-Health dataset. We note that the modularity ratio remains close to the target 1 even for low values of α, implying that it is possible to preserve much of the community structure with a fairly small fraction of eigenvectors. Entropy is close to 0 for very large α, but climbs steadily as α is reduced, indicating the extent of reduction in concentration. More striking is the success rate of the DV attack. Even at α = 0.9, the attack can identify only around 60% of nodes from the original graph given the synthetic graph and a 5% seed sample. This falls apace, with a success rate of only around 20% once α = 0.5 (corresponding to a modularity ratio ∼ 0.82 from Table <ref type="table">I</ref>), and a rate not significantly different from baseline once α = 0.25 (modularity ratio ∈ (0.71, 0.75)). Given the strength of this attack, this implies a high degree of discrepancy between the initial and target graph (while maximum modularity is preserved). Similar results are reported in the lower plot of Fig. <ref type="figure" target="#fig_4">9</ref> for a connected graph from the Facebook dataset. Again, even for high values of α the de-anonymization attack cannot fully align the graphs.</p><p>For both datasets, when α = 0.1, the modularity ratio is still close to the target 1 and the de-anonymization attack can identify only approximately 10% of nodes (while knowing 5% in the first place). This suggests that the SGF has the potential to be used as a tool (in combination with others <ref type="bibr" target="#b33">[34]</ref>) for anonymizing sensitive graph datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION</head><p>We propose Spectral Graph Forge (SGF) -a framework for generating graphs that resemble real-world networks in terms of global properties, via spectral decomposition and approximation. Our focus in this paper was the use of SGF specifically to generate graphs with a target modularity; we showed that it succeeds in doing so and it outperforms baselines. At the same time, SGF preserves other important local structure properties (such as clustering and the degree sequence) and node attribute structure. It also does well at preserving modularity associated with such node attributes, even when they are not specifically targeted; this allows SGF to generate reliable graph proxies for real-world networks with arbitrarily complex and overlapping community structures. The parameter α can control not only the error in modularity (α → 1 brings us arbitrarily close the target modularity) but also the entropy of graph distribution. Lowering α leads to higher entropy of the realizations, thus making the node identities in the input graph increasingly difficult to reveal via de-anonymization attacks. This makes SGF a potentially useful tool (in combination with existing anonymization techniques) for generating synthetic data sets from sensitive data. Our codebase is available on-line <ref type="bibr" target="#b35">[36]</ref>. The distance between M and M due to the low pass filter at the second step of the pipeline indicates how much information we dropped from the transformed matrix M . We measure this distance using the Euclidean norm, M -M 2 , a well-known metric on spaces of real-valued matrices. This is distance is directly related to the spectral radius:</p><formula xml:id="formula_15">M -M 2 = n i= αn +1 λ i v i v T i 2 = ρ   n i= αn +1 λ i v i v T i   ,</formula><p>where ρ(•) is the spectral radius function. Knowing that the eigenvalues of M are ordered with respect their moduli,</p><formula xml:id="formula_16">|λ 1 | ≥ • • • ≥ |λ n |, we obtain M -M 2 = λ αn +1 ,</formula><p>which is the largest eigenvalue not included in our approximation M . Hence, our method allows us to target the reproduction of M with arbitrary precision in the Euclidean norm. Indeed, we can guarantee exact preservation of M in the limit as</p><formula xml:id="formula_17">α → 1, since ∀ ∈ R + ∃α ∈ [0, 1] : M -M 2 ≤ .</formula><p>Typically, we will deliberately select α &lt; 1 to remove information in M that is idiosyncratic to A, but the Spectral Graph Forge allows users to bring M as close to M as needed for the application in question.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX B: IMPACT OF NORMALIZATION ON</head><p>M -PRESERVATION AND ENTROPY Fig. <ref type="figure" target="#fig_5">10</ref> presents the different normalizing functions in the interval (-0.5, 1.5). The normalization applied by scale() introduces a distortion highly dependent on the difference between the minimum and maximum values (with k = 6 providing the best performance) and the logistic() introduces noise by remaining strictly within (0, 1) for all Ãi,j . Preliminary experiments showed that with k = 6 the logistic function provided the best performance in the cases studied here, and we use this value in the analyses that follow.</p><p>In addition to spectral filtering, details of the original input graph are removed by normalization. It is hence useful to examine how different choices of normalization function alter both the degree of "smoothing" in the graph generation process (measured by the mean Euclidean norm between the initial and generated graph) and the entropy of the resulting graph distribution. To this end we measure the distortion low-rank approximation introduces in an adjacency matrix through a simulation experiment with input graphs drawn from a set of realizations from Erdős-Rényi and Barabási-Albert graph generation processes; our input set was composed of 10 random Erdős-Rényi graphs and 10 random Barabási-Albert graphs, each having n = 100 nodes and the same approximate mean degree of ∼ 4.5.</p><p>Fig. <ref type="figure" target="#fig_6">11</ref> shows Euclidean norms for the respective samples, as a function of α. These norms represent matrix distances and, hence, they span in the interval (0, ∞). The patterns are quite similar for Erdős-Rényi and Barabási-Albert graph types, with the exception of the limiting distance in the case when α → 0 (where at most one eigenvalue is employed). As noted in section VI, A -Ã → 0 as α → 1 (since we have chosen M = A); however, some of this information may be lost by normalization. In particular Fig. <ref type="figure" target="#fig_6">11</ref> shows a comparison among the normalization functions and the distance they introduce from the spectral-approximated matrix Ã. Ideally, we do not want the normalization function to introduce systematic variation in this space, as the approximation introduced by SGF should rely only on the spectral approximation. Hence, the distance Anorm( Ã) should be as close as possible to A -Ã . As can be noted in Fig. <ref type="figure" target="#fig_5">10</ref> the scale function introduces considerable noise, a phenomenon also seen in Fig. <ref type="figure" target="#fig_6">11</ref>.</p><p>Both truncation and logistic approaches obtain a distance very close to the spectral approximation, but only truncation preserves convergence to 0 when α → 1.</p><p>Fig. <ref type="figure" target="#fig_7">12</ref> shows the entropy computation for the same graphs during the same runs. Entropy here represents the expected number of bits required to describe A given the generating distribution. We normalize this value for a fair comparison among graphs with different densities. As would be expected, entropy is lowest when all eigenvectors of the original graph are included, and increases as constraints are reduced. However, the choice of normalization function affects the extent to which information from Ã contributes to A . Overall, scaling and truncation rules show the smoothest entropy enhancement, with the logistic rule showing the least effect; this is because the prior functions yield a larger change in tie probability given a fixed change in cell value over the range encountered in these tests. It is worth noticing the highly variable behaviour of the scale() function which, although it follows a clear trend, it is strongly influenced by the maximum and minimum values of Ã, leading to high variance and non-monotonicity when α → 0.</p><p>The above suggest that the cleanest entropy and distance relationships are found for the truncation rule.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .Fig. 3 .</head><label>23</label><figDesc>Fig.2. Modularity ratio for Spectral Graph Forge varying α on our simple graphs with 2 communities (upper plot) and 8 communities (lower plot).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig.5. Means and 99% confidence intervals for the partition number ratio, by data set. Note that the SGF(0.9) and DC-SBM algorithm results overlap with the Girvan data set graphs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Means and 99% confidence intervals for degree sequence correlation, by data set. Note that the DC-SBM result lower bound overlaps the Trajanovski results with the Girvan dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. 99% confidence interval on attribute modularity ratio for the Add-Health dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Means and 99% confidence intervals for graph distribution entropy and DV de-anonymization success rates on one Add-Health graph (upper plot) and one Facebook graph (lower plot), by α.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Normalization function comparison in the interval (0.5, 1.5).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Baseline and normalized A, Ã distances for Erdős-Rényi graphs (upper plot) and Barabási-Albert graphs (lower plot), by α. Ideally, normed matrix distances should be close to A -Ã .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Entropy of generated graphs using three different normalization functions for Erdős-Rényi input graphs (upper plot) and Barabási-Albert graphs (lower plot) computed for different values of α.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We could also filter on phase (a graph polarizing filter) to extract coreperiphery (positive eigenvalues) or bipartite (negative eigenvalues) structures.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Since M symmetric, we can find an orthogonal matrix Q such that the similarity transform T = Q T AQ gives a tridiagonal matrix<ref type="bibr" target="#b10">[11]</ref>, which belongs to O(nm) with the Lanczos algorithm<ref type="bibr" target="#b25">[26]</ref>. The eigenvectors v i = Qw i of M are hence directly computable from the eigenvectors w i of Q. Since Q is tridiagonal, its eigenvectors can be computed with the QL algorithm with a cost of O(n)<ref type="bibr" target="#b10">[11]</ref>.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Systematic topology analysis and generation using degree correlations</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mahadevan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Krioukov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acm Sigcomm Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="135" to="146" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Quantifying randomness in real networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Orsini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Dankulov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Colomer-De Simón</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jamakovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mahadevan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Bassler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Toroczkai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Boguñá</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Caldarelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature communications</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Construction of simple graphs with a target joint degree matrix and beyond</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gjoka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Tillman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Markopoulou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE Conference on Computer Communications (INFOCOM)</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Network motifs: simple building blocks of complex networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Milo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shen-Orr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Itzkovitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kashtan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chklovskii</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Alon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Revealing the hidden language of complex networks</title>
		<author>
			<persName><forename type="first">Ö</forename><forename type="middle">N</forename><surname>Yaveroglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Malod-Dognin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Levnajic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Janjic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Karapandza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Stojmirovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Pržulj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific reports</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Internet topology discovery: a survey</title>
		<author>
			<persName><forename type="first">B</forename><surname>Donnet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Friedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys Tutorials</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="56" to="69" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Resolving Anonymous Routers in Internet Topology Measurement Studies</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Gunes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sarac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM 2008 -The 27th Conference on Computer Communications</title>
		<imprint>
			<date type="published" when="2008-04">April 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Measurement and Analysis of Online Social Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mislove</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marcon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bhattacharjee</surname></persName>
		</author>
		<idno type="DOI">10.1145/1298306.1298311</idno>
		<ptr target="http://doi.acm.org/10.1145/1298306.1298311" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th ACM SIGCOMM Conference on Internet Measurement, ser. IMC &apos;07</title>
		<meeting>the 7th ACM SIGCOMM Conference on Internet Measurement, ser. IMC &apos;07<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="29" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Characterizing User Behavior in Online Social Networks</title>
		<author>
			<persName><forename type="first">F</forename><surname>Benevenuto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Almeida</surname></persName>
		</author>
		<idno type="DOI">10.1145/1644893.1644900</idno>
		<ptr target="http://doi.acm.org/10.1145/1644893.1644900" />
	</analytic>
	<monogr>
		<title level="m">IMC, ser. IMC &apos;09</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="49" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Hyperbolic graph generator</title>
		<author>
			<persName><forename type="first">R</forename><surname>Aldecoa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Orsini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Krioukov</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0010465515002088" />
	</analytic>
	<monogr>
		<title level="j">Computer Physics Communications</title>
		<imprint>
			<biblScope unit="volume">196</biblScope>
			<biblScope unit="page" from="492" to="496" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Networks: an introduction</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Oxford university press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Wasserman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Faust</surname></persName>
		</author>
		<title level="m">Social Network Analysis: Methods and Applications</title>
		<meeting><address><addrLine>Cambridge</addrLine></address></meeting>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Linear algebra done right</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Axler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Symmetric gauge functions and unitarily invariant norms</title>
		<author>
			<persName><forename type="first">L</forename><surname>Mirsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The quarterly journal of mathematics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="50" to="59" />
			<date type="published" when="1960">1960</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An introduction to exponential random graph (p*) models for social networks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Robins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pattison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kalish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lusher</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0378873306000372" />
	</analytic>
	<monogr>
		<title level="m">special Section: Advances in Exponential Random Graph (p*) Models</title>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="173" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Generating graphs that approach a prescribed modularity</title>
		<author>
			<persName><forename type="first">S</forename><surname>Trajanovski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">A</forename><surname>Kuipers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Martín-Hernández</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Van Mieghem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Communications</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Stochastic blockmodels and community structure in networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Karrer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review E</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Latent Space Approaches to Social Network Analysis</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">D</forename><surname>Hoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Raftery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Handcock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American Statistical Association</title>
		<imprint>
			<biblScope unit="volume">97</biblScope>
			<biblScope unit="issue">460</biblScope>
			<biblScope unit="page" from="1090" to="1098" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Estimation and Prediction for Stochastic Blockstructures</title>
		<author>
			<persName><forename type="first">K</forename><surname>Nowicki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A B</forename><surname>Snijders</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American Statistical Association</title>
		<imprint>
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="issue">455</biblScope>
			<biblScope unit="page" from="1077" to="1087" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Spectral methods for community detection and graph partitioning</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. E</title>
		<imprint>
			<biblScope unit="volume">88</biblScope>
			<biblScope unit="page">42822</biblScope>
			<date type="published" when="2013-10">Oct 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Multinet. Version 4.38 for Windows</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Richards</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Seary</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Modularity and community structure in networks</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PNAS</title>
		<imprint>
			<biblScope unit="volume">103</biblScope>
			<biblScope unit="page" from="8577" to="8582" />
			<date type="published" when="2006-06">June 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Introduction to mathematical sociology</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Coleman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1964">1964</date>
			<publisher>London Free Press Glencoe</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The development of social network analysis: a Study in the</title>
		<author>
			<persName><forename type="first">L</forename><surname>Freeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sociology of Science. BookSurgePublishing</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Models of core/periphery structures</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Borgatti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Everett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Social Networks</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="375" to="395" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Matrix analysis and applied linear algebra</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Meyer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<pubPlace>Siam</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Community structure in social and biological networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Girvan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the national academy of sciences</title>
		<meeting>the national academy of sciences</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page" from="7821" to="7826" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Benchmark graphs for testing community detection algorithms</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lancichinetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Fortunato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Radicchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical review E</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">46110</biblScope>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The national longitudinal study of adolescent to adult health: Research design</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">T</forename><surname>Halpern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Whitsel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hussey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tabor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Entzel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Udry</surname></persName>
		</author>
		<ptr target="http://www.cpc.unc.edu/projects/addhealth/design" />
		<imprint>
			<date type="published" when="2009">April 2015. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Learning to discover social circles in ego networks</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Mcauley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Leskovec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="539" to="547" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Estimation and prediction for stochastic block models for graphs with latent block structure</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A B</forename><surname>Snijders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nowicki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Classification</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="75" to="100" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Fast unfolding of communities in large networks</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">D</forename><surname>Blondel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-L</forename><surname>Guillaume</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lambiotte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Lefebvre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of statistical mechanics: theory and experiment</title>
		<imprint>
			<biblScope unit="volume">2008</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page">P10008</biblScope>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Community detection in graphs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Fortunato</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0370157309002841" />
	</analytic>
	<monogr>
		<title level="j">Physics Reports</title>
		<imprint>
			<biblScope unit="volume">486</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="75" to="174" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">SecGraph: A Uniform and Open-source Evaluation System for Graph Data Anonymization and De-anonymization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mittal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Beyah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix Security</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="303" to="318" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Deanonymizing mobility traces: Using social network as a side-channel</title>
		<author>
			<persName><forename type="first">M</forename><surname>Srivatsa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM conference on Computer and communications security</title>
		<meeting>the 2012 ACM conference on Computer and communications security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="628" to="637" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Baldesi</surname></persName>
		</author>
		<ptr target="https://github.com/lucabaldesi/spectral_graph_forge" />
		<title level="m">Spectral Graph Forge -Source Code</title>
		<imprint>
			<date type="published" when="2017-12">December 2017</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
