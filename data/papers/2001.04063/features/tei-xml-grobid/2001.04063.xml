<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Weizhen</forename><surname>Qi</surname></persName>
							<email>weizhen@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Science and Technology of China</orgName>
								<address>
									<addrLine>2 Microsoft</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yu</forename><surname>Yan</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Yeyun</forename><surname>Gong</surname></persName>
							<email>yegong@microsoft.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Dayiheng</forename><surname>Liu</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">Sichuan University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nan</forename><surname>Duan</surname></persName>
							<email>nanduan@microsoft.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jiusheng</forename><surname>Chen</surname></persName>
							<email>jiuchen@microsoft.com</email>
						</author>
						<author>
							<persName><forename type="first">Ruofei</forename><surname>Zhang</surname></persName>
							<email>bzhang@microsoft.com</email>
						</author>
						<author>
							<persName><forename type="first">Ming</forename><surname>Zhou</surname></persName>
							<email>mingzhou@microsoft.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">096BDCDDC704E26DD2A6D622E6BBABB2</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-02-21T16:18+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents a new sequence-tosequence pre-training model called Prophet-Net, which introduces a novel self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism.</p><p>Instead of optimizing one-stepahead prediction in the traditional sequenceto-sequence model, the ProphetNet is optimized by n-step ahead prediction that predicts the next n tokens simultaneously based on previous context tokens at each time step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large-scale dataset (160GB), respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for abstractive summarization and question generation tasks. Experimental results show that Prophet-Net achieves new state-of-the-art results on all these datasets compared to the models using the same scale pre-training corpus.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Large-scale pre-trained language models <ref type="bibr" target="#b1">(Devlin et al., 2018;</ref><ref type="bibr" target="#b24">Radford et al., 2019;</ref><ref type="bibr" target="#b17">Yang et al., 2019)</ref> and sequence-to-sequence models <ref type="bibr" target="#b14">(Lewis et al., 2019;</ref><ref type="bibr" target="#b30">Song et al., 2019;</ref><ref type="bibr" target="#b25">Raffel et al., 2019)</ref> have achieved remarkable success in downstream tasks.</p><p>Autoregressive (AR) language modeling, which estimates the probability distribution of the text corpus, is widely used for sequence modeling and sequence-to-sequence (Seq2Seq) learning <ref type="bibr" target="#b31">(Sutskever et al., 2014)</ref>. Recently, it also becomes one of the successful self-supervised objectives for large-scale pre-training as used in GPT-2 <ref type="bibr" target="#b24">(Radford et al., 2019)</ref>. Specifically, given a text sequence x = (x 1 , . . . , x T ), AR language modeling factorizes the likelihood into a product p(x) = T t=1 p(x t |x &lt;t ). In this manner, language models (LMs) and Seq2Seq models are usually trained by teacher forcing. The models are optimized to predict the next token given all previous context tokens at each time step.</p><p>However, as discussed in previous works <ref type="bibr" target="#b21">(Pascanu et al., 2013;</ref><ref type="bibr" target="#b8">Gulcehre et al., 2017;</ref><ref type="bibr" target="#b29">Serdyuk et al., 2018)</ref>, AR-based models may prefer to focus on the latest tokens rather than capture longterm dependencies for the next token prediction. The reasons are as follows: (a) Local correlations such as bigram combination are usually stronger than long-term dependencies. (b) Teacher forcing, where the model focus on one-step-ahead prediction for each time step, has no explicit bias toward future token planning and modeling. As a result, the model may learn a bias for language modeling; that is, the local token combinations' modeling is overfitting, but the global coherence and long-term dependency are underfitting <ref type="bibr" target="#b12">(Krueger et al., 2016;</ref><ref type="bibr" target="#b18">Merity et al., 2017;</ref><ref type="bibr" target="#b29">Serdyuk et al., 2018)</ref>. During inference, the generations tend to maintain local coherence but lack meaningful global structure <ref type="bibr" target="#b15">(Li et al., 2017;</ref><ref type="bibr" target="#b29">Serdyuk et al., 2018)</ref>, especially when we use greedy decoding instead of beam search.</p><p>In this paper, we present a new large-scale pretrained Seq2Seq model called ProphetNet with a novel self-supervised objective future n-gram prediction. In addition to the traditional language model (LM) or Seq2Seq model that optimizes onestep-ahead prediction, the ProphetNet also learns nstep ahead predictionThis future n-gram prediction is served as extra guidance that explicitly encourages the model to plan for future tokens and prevents overfitting on strong local correlations. The hidden states of ProphetNet are forced to contain useful information for the next token and further arXiv:2001.04063v3 [cs.CL] 21 Oct 2020 help predict multiple future tokens.</p><p>There are two goals when designing ProphetNet: (a) the model should be able to simultaneously predict the future n-gram at each time step in an efficient way during the training phase, and (b) the model can be easily converted to predict the next token only as original Seq2Seq model for inference or fine-tuning phase. To achieve that, we extend the two-stream self-attention proposed in XLNet <ref type="bibr" target="#b17">(Yang et al., 2019)</ref> to n-stream self-attention. Prophet-Net contains a main stream self-attention, which is the same as the self-attention in the original Transformer. Besides, we introduce n extra self-attention predicting streams for future n-gram prediction, respectively. During training, the i-th predicting stream attends to the main stream's hidden states to predict the next i-th future token, which guarantees every n continuous tokens in the target sequence are trained to predict at one time step. Since the main stream parameters are shared with every predicting stream, we can disable the n-stream selfattention during inference. Only the next first token is predicted for each time step, which is same as the original Transformer Seq2Seq model.</p><p>For experiments, we use the proposed future ngram prediction with the mask based auto-encoder denoising task <ref type="bibr" target="#b30">(Song et al., 2019;</ref><ref type="bibr" target="#b14">Lewis et al., 2019)</ref> which has been proved to be effective for Seq2Seq pre-training as compared in <ref type="bibr" target="#b25">Raffel et al. (2019)</ref> for ProphetNet pre-training. We use two scale pre-trained datasets to pre-train ProphetNet, respectively: the base scale (16GB) dataset as used in BERT <ref type="bibr" target="#b1">(Devlin et al., 2018)</ref>, and the large scale (160GB) similar to BART <ref type="bibr" target="#b14">(Lewis et al., 2019)</ref>. The pre-trained ProphetNet is further fine-tuned on several NLG tasks. Experimental results show that ProphetNet has achieved the best performance on CNN/DailyMail, Gigaword, and SQuAD 1.1 question generation tasks compared to the models using the same base scale pre-training dataset. For the large scale dataset pre-training experiment, ProphetNet achieves new state-of-the-art results on CNN/DailyMail and Gigaword, using only about 1/3 pre-training epochs of BART and about 1/5 pre-training corpus of T5 <ref type="bibr" target="#b25">(Raffel et al., 2019)</ref> and PEGASUS <ref type="bibr">(Zhang et al., 2019)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">ProphetNet</head><p>We propose a new Seq2Seq pre-training model called ProphetNet, which is based on Transformer <ref type="bibr" target="#b32">(Vaswani et al., 2017)</ref> encoder-decoder ar-chitecture. Compared to the original Transformer Seq2Seq model, ProphetNet introduces three modifications: (a) The novel self-supervised objective called future n-gram prediction as described in § 2.2. (b) The n-stream self-attention mechanism as described in § 2.3. (c) The mask based autoencoder denoising task for Seq2Seq pre-training as described in § 2.4. Figure <ref type="figure" target="#fig_0">1</ref> shows the architecture of ProphetNet. Before we describe our model in detail, we first introduce the notations and sequence-to-sequence learning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Sequence-to-Sequence Learning</head><p>Given a text sequence pair (x, y), x = (x 1 , . . . , x M ) is the source sequence with M tokens, and y = (y 1 , . . . , y T ) is the target sequence with T tokens. The Seq2Seq model aims to model the conditional likelihood p(y|x), which can be further factorized into a product p(y|x) = T t=1 p(y t |y &lt;t , x) according to the chain rule, where y &lt;t denotes the proceeding tokens before the position t. In general, the Seq2Seq model employs an encoder that aims to encode the source sequence representations and a decoder that models the conditional likelihood with the source representations and previous target tokens as inputs. Teacher forcing is usually used for model training. The model is optimized to predict the next target token y t given the previous golden context tokens y &lt;t and x at each time step.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Future N-gram Prediction</head><p>ProphetNet mainly changes the original Seq2Seq optimization of predicting next single token as p(y t |y &lt;t , x) into p(y t:t+n-1 |y &lt;t , x) at each time step t, where y t:t+n-1 denotes the next continuous n future tokens. In other words, the next n future tokens are predicted simultaneously.</p><p>Based on Transformer Seq2Seq architecture, ProphetNet contains a multi-layer Transformer encoder with the multi-head self-attention mechanism <ref type="bibr" target="#b32">(Vaswani et al., 2017)</ref> and a multi-layer Transformer decoder with the proposed multi-head nstream self-attention mechanism. Given a source sequence x = (x 1 , . . . , x M ), ProphetNet encodes the x into a sequence representation, which is the same as the original Transformer encoder:</p><formula xml:id="formula_0">H enc = Encoder(x 1 , . . . , x M ),<label>(1)</label></formula><p>where H enc denotes the source sequence representations. On the decoder side, instead of predicting</p><p>+ Multi-Head Self-Attention 𝑥 " 𝑥 # _ _ _ 𝑥 $ 𝑥 % Input Embedding Absolute Positional Embedding Feed Forward _ _ 𝑦 # 𝑦 ' 𝑦 ( _ _ Main Stream Inputs N x + Masked Multi-Head N-stream Self-Attention Input Embedding Absolute Positional Embedding N x Relative Positional Embedding 𝑦 ' 𝑦 ( 𝑦 ) outputs _ 𝑦 ( 𝑦 ) 𝑦 $ _ _ _ Feed Forward Multi-Head Attention Encoder Inputs only the next token at each time step, ProphetNet decoder predicts n future tokens simultaneously as we mentioned above:</p><formula xml:id="formula_1">_ _ [𝑝 # ] [𝑝 # ] [𝑝 # ] _ _ 1-th Predicting Stream Inputs _ _ [𝑝 ' ] [𝑝 ' ] [𝑝 ' ] _ _ 2-th</formula><formula xml:id="formula_2">p(yt|y&lt;t, x), . . . , p(yt+n-1|y&lt;t, x) = Decoder(y&lt;t, Henc),<label>(2)</label></formula><p>where the decoder outputs n probability at each time step. The future n-gram prediction objective can be further formalized as</p><formula xml:id="formula_3">L = - n-1 j=0 α j • T -j t=1 log p θ (y t+j |y &lt;t , x) = -α 0 • T t=1 log p θ (y t |y &lt;t , x) language modeling loss - n-1 j=1 α j • T -j t=1 log p θ (y t+j |y &lt;t , x) future n-gram loss .<label>(3)</label></formula><p>The above future n-gram prediction objective can be seen to consist of two parts: (a) the conditional LM loss which is the same as the original teacher forcing, and (b) the n -1 future token prediction losses which force the model to predict the future target tokens. The future n-gram prediction loss explicitly encourages the model to plan for future token prediction and prevent overfitting on strong local correlations. α j is set to balance the weights between the traditional language modeling and future n-gram prediction. For now we set the α j with a power attenuation function as:</p><formula xml:id="formula_4">α j = γ j n-1 i=0 γ i , (<label>4</label></formula><formula xml:id="formula_5">)</formula><p>where the γ is the attenuation coefficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">N-Stream Self-Attention</head><p>Ideally, we want the ProphetNet decoder to meet two requirements described in the introduction: trained to predict future n-grams simultaneously and easily disable them in inference. In addition to the masked multi-head self-attention <ref type="bibr" target="#b32">(Vaswani et al., 2017)</ref> of the original transformer decoder, which is called main stream self-attention, the nstream self-attention mechanism incorporates n</p><formula xml:id="formula_6">Attention Q K, V 𝑠 2 (1) ℎ 1 (0) 𝑔 1 (0) 𝑠 1 (0) 𝑔 2 (0) 𝑠 2 (0) ℎ 0 (0) 𝑔 0 (0) 𝑠 0 (0) 𝑔 2 (1) ℎ 2 (1) Attention Q K, V ℎ 1 (0) 𝑔 1 (0) 𝑠 1 (0) ℎ 2 (0) 𝑔 2 (0) 𝑠 2 (0) ℎ 0 (0) 𝑔 0 (0) 𝑠 0 (0) 𝑔 2 (1) ℎ 2 (1) 𝑠 2 (1) (a) Attention Q K, V ℎ 1 (0) 𝑔 1 (0) 𝑠 1 (0) ℎ 2 (0) 𝑔 2 (0) 𝑠 2 (0) ℎ 0 (0) 𝑔 0 (0) 𝑠 0 (0) 𝑔 2 (1) ℎ 2 (1) 𝑠 2 (1) (b) (c) 𝑦 3 𝑦 4 ℎ 2 (0)</formula><p>Figure <ref type="figure">2</ref>: N-stream self-attention mechanism which contains a main stream self-attention and n predicting stream self-attention. For simplicity sake, we take 2-stream self-attention (n = 2) as an example here. extra self-attention predicting streams to predict next n continuous future tokens respectively at each time step. To be concrete, the i-th predicting stream is responsible for modeling the probability p(y t+i-1 |y &lt;t , x).</p><p>The n-stream self-attention mechanism is shown in Figure <ref type="figure">2</ref>. In this example, h stream is the main stream, g stream and s stream are the next 1st and 2nd token predicting stream. As shown in Figure <ref type="figure">2</ref> (a), the attention mechanism of the main stream is the same as the masked multi-head self-attention in the traditional Transformer decoder, where a lower triangular matrix is set to control that each position can only attend to their previous tokens:</p><formula xml:id="formula_7">H (k+1) = MultiHead(H (k) , H (k) , H (k) ), (5) here we use H k = (h (k) 0 , . . . , h (k)</formula><p>T ) to denote the sequence of the k-th layer hidden state of the main stream. Implement of MultiHead can be referenced to Transformer <ref type="bibr" target="#b32">(Vaswani et al., 2017)</ref>.</p><p>The i-th predicting stream predicts the next i-th token based on the previous main stream hidden states at each time step. In other words, the ith predicting stream predicts the y t based on the previous tokens y &lt;t-i+1 . In this bigram (n = 2) example, Figure <ref type="figure">2 (b)</ref> shows the 1-st predicting stream and its hidden state is calculated as:</p><formula xml:id="formula_8">g (k+1) t-1 = MultiHead(g (k) t-1 , H (k) &lt;t ⊕ g (k) t-1 , H (k) &lt;t ⊕ g (k) t-1 ),<label>(6)</label></formula><p>where g</p><formula xml:id="formula_9">(k+1) t-1</formula><p>denotes the k + 1-th layer hidden state of the 1-st predicting stream at time step t -1, and ⊕ denotes concatenation operation. To calculate g</p><formula xml:id="formula_10">(k+1) t-1 , g (k)</formula><p>t-1 is taken as the attention query while the attention value and key are previous t hidden states of the main stream. Besides we take g (k)</p><p>t-1 as attention value and key to make the g (k+1) t-1 be position-aware. The g</p><formula xml:id="formula_11">(k+1) t-1 is finally used to predict y t .</formula><p>Similarly, the hidden state of the 2-nd predicting stream is calculated by:</p><formula xml:id="formula_12">s (k+1) t-1 = MultiHead(s (k) t-1 , H (k) &lt;t ⊕ s (k) t-1 , H (k) &lt;t ⊕ s (k) t-1 ),<label>(7)</label></formula><p>where s</p><formula xml:id="formula_13">(k+1) t-1</formula><p>denotes the k + 1-th layer hidden state of the 2-nd predicting stream at time step t -1, which will be finally used to predict y t+1 . Although the calculations of g t-1 for y t prediction and s t-1 for y t+1 prediction are very similar, they are distinguished by different initialization tokens, absolute position embedding, and relative positional calculations.</p><p>We share the parameters of each predicting stream and main stream during training. Therefore, we can easily convert the ProphetNet decoder to the traditional Transformer decoder by disabling all the predicting streams during inference or finetuning. Besides, since each predicting stream is initialized with special tokens rather than the previous token, we combine the absolute positional embedding and T5 <ref type="bibr" target="#b25">(Raffel et al., 2019)</ref> proposed bucket relative positional calculation to enhance the positional information in our decoder.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Seq2Seq Pre-training on Denoising Task</head><p>We pre-train the ProphtNet on the large-scale unlabeled text corpus with the auto-encoder denoising task widely used for Seq2Seq pre-training <ref type="bibr" target="#b30">(Song et al., 2019;</ref><ref type="bibr" target="#b14">Lewis et al., 2019;</ref><ref type="bibr" target="#b25">Raffel et al., 2019)</ref>.</p><p>This paper uses token span masking as our denoising task, which is the same as the MASS <ref type="bibr" target="#b30">(Song et al., 2019)</ref>. As shown in Figure <ref type="figure" target="#fig_0">1</ref>, we mask out some token spans of the original text as the encoder input, and the model learns to recover the masked tokens. Besides, unlike MASS learns to recover one next token at each time step, ProphetNet learns to recover the next n future tokens within each masked token span.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Experiments and Results</head><p>In this section, we describe the experimental details and results. We first describe the details of Prophet-Net pre-training in § 3.1. Then we fine-tune the ProphetNet on two downstream NLG tasks, including text summarization as described in § 3.2 and question generation as reported in § 3.3. We report the experiment of large-scale pre-training in § 3.4. Results without pre-training are compared in § 3.5. We set predicting future gram length into 2 according to the analysis in § 3.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">ProphetNet Pre-training</head><p>Model Configuration Our model is based on Transformer <ref type="bibr" target="#b32">(Vaswani et al., 2017)</ref> encoderdecoder structure. We pre-train the ProphetNet, which contains a 12-layer encoder and 12-layer decoder with 1024 embedding/hidden size and 4096 feed-forward filter size. The batch size and training steps are set to 1024 and 500K, respectively. We use Adam optimizer (Kingma and Ba, 2015) with a learning rate of 3 × 10 -4 for pre-training. The implement of ProphetNet is also uploaded in the attachment. Considering the training cost, we set the n to be 2 for ProphetNet in the following experiments. Further discussions are shown in § 3.6.</p><p>Pre-Training Dataset Following BERT <ref type="bibr" target="#b1">(Devlin et al., 2018)</ref>, we use BookCorpus <ref type="bibr" target="#b39">(Zhu et al., 2015)</ref> and English Wikipedia (16GB in total) to pre-train ProphetNet. We pre-train ProphetNet on this 16GB dataset with 16×32GB NVIDIA V100 GPUs. Note that we also pre-train ProphetNet on a larger scale dataset described in § 3.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Pre-Training Setting</head><p>The input length of ProphetNet is set to 512. We randomly mask a continuous span in every 64 tokens. 80% of the masked tokens are replaced by [M], 10% replaced by random tokens, and 10% unchanged. The masked length is set to 15% of the total number of tokens. Considering the computational cost, we follow MASS <ref type="bibr" target="#b30">(Song et al., 2019)</ref>, where the decoder only predicts the masked fragment. The attenuation coefficient γ is set to 1.0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Fine-tuning on Text Summarization</head><p>As a typical NLG task, abstractive text summarization aims to generate a short and fluent summary of a long text document. We fine-tune and evaluate ProphetNet on the two widely used text summarization datasets: (a) the non-anonymized version of the CNN/DailyMail dataset <ref type="bibr" target="#b28">(See et al., 2017)</ref>, and (b) Gigaword corpus <ref type="bibr" target="#b27">(Rush et al., 2015)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CNN/DailyMail</head><p>We use Adam optimizer (Kingma and Ba, 2015) with a peak learning rate 1 × 10 -4 . The batch size, warmup steps, and the total fine-tune epoch are set to 512, 1000, and 10. We limit the length of the output to between 45 and 110 tokens with a 1.2 length penalty during inference. We set beam size to 5 and remove the duplicated trigrams in beam search <ref type="bibr" target="#b6">(Fan et al., 2017)</ref>.</p><p>We compare our ProphetNet against following baselines: LEAD-3 <ref type="bibr" target="#b20">(Nallapati et al., 2016)</ref> which takes the first three sentences as the summary; PT-GEN <ref type="bibr" target="#b28">(See et al., 2017)</ref> which is Seq2Seq model incorporated with the pointer-generator network; PTGEN+Coverage <ref type="bibr" target="#b28">(See et al., 2017)</ref> which introduce a coverage mechanism to PTGEN; Bottom-Up <ref type="bibr" target="#b7">(Gehrmann et al., 2018)</ref> which employs a bottom-up content selector based on Seq2Seq model; S2S-ELMo <ref type="bibr" target="#b5">(Edunov et al., 2019)</ref> which uses the pre-trained ELMo <ref type="bibr" target="#b22">(Peters et al., 2018)</ref> representations. Besides, we also compare our method with several pre-training based strong baselines: BERTSUMABS (Liu and Lapata, 2019), MASS <ref type="bibr" target="#b30">(Song et al., 2019)</ref>, and UniLM <ref type="bibr" target="#b2">(Dong et al., 2019)</ref>. These pre-training-based strong baselines are all pre-trained on the same 16GB Book-Corpus + English Wikipedia dataset as ProphetNet.</p><p>Following <ref type="bibr" target="#b28">See et al. (2017)</ref>, we report the F1 scores of ROUGE-1, ROUGE-2 and ROUGE-L <ref type="bibr" target="#b16">(Lin, 2004)</ref>. <ref type="bibr" target="#b4">Du et al. (2017)</ref> The results are presented in Table <ref type="table" target="#tab_1">1</ref>. From the results, we can see that the ProphetNet achieves the best performances on all metrics.</p><p>Gigaword We use Adam optimizer with a peak learning rate 1 × 10 -4 . The batch size is set to 128 and warm up steps to 1000. We fine-tune model 10 epochs with future bigram prediction training. During inference, we set the length penalty to 1.0 and beam size to 4. We set the hyper-parameters according to the performance on the dev set.</p><p>We compare our ProphetNet against following baselines: OpenNMT <ref type="bibr" target="#b11">(Klein et al., 2017)</ref> which Method ROUGE-1 ROUGE-2 ROUGE-L LEAD-3 <ref type="bibr" target="#b19">(Nallapati et al., 2017)</ref> 40.42 17.62 36.67 PTGEN <ref type="bibr" target="#b28">(See et al., 2017)</ref> 36.44 15.66 33.42 PTGEN+Coverage <ref type="bibr" target="#b28">(See et al., 2017)</ref> 39.53 17.28 36.38 S2S-ELMo <ref type="bibr" target="#b5">(Edunov et al., 2019)</ref> 41.56 18.94 38.47 Bottom-Up <ref type="bibr" target="#b7">(Gehrmann et al., 2018)</ref> 41.22 18.68 38.34 BERTSUMABS <ref type="bibr" target="#b17">(Liu and Lapata, 2019)</ref> 41.72 19.39 38.76 BERTSUMEXTABS <ref type="bibr" target="#b17">(Liu and Lapata, 2019)</ref> 42.13 19.60 39.18 MASS <ref type="bibr" target="#b30">(Song et al., 2019)</ref> 42.12 19.50 39.01 UniLM <ref type="bibr" target="#b2">(Dong et al., 2019)</ref> 43 CorefNQG <ref type="bibr" target="#b3">(Du and Cardie, 2018)</ref> 15.16 19.12 -SemQG <ref type="bibr" target="#b36">(Zhang and Bansal, 2019)</ref> 18.37 22.65 46.68 UniLM <ref type="bibr" target="#b2">(Dong et al., 2019)</ref> 21.63 25.04 51.09 ProphetNet 23.91 26.60 52.26 MP-GSN <ref type="bibr" target="#b37">(Zhao et al., 2018)</ref> 16.38 20.25 44.48 SemQG <ref type="bibr" target="#b36">(Zhang and Bansal, 2019)</ref>  <ref type="bibr">20.76 24.20 48.91</ref> UniLM <ref type="bibr" target="#b2">(Dong et al., 2019)</ref> 23.08 25.57 52.03 ProphetNet 25.80 27.54 53.65</p><p>Table 3: Results on SQuAD 1.1 test set (with reference of Du et al. (2017) tokenized). B4 is short for BLEU-4, MTR is short for METEOR, and R-L is short for ROUGE-L. The same model is used to evaluate on the two different data splits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Fine-tuning on Question Generation</head><p>The answer-aware question generation task <ref type="bibr" target="#b38">(Zhou et al., 2017)</ref> aims to generate a question that asks towards the given answer span based on a given text passage or document. We conduct experiments on this task to further evaluate the ProphetNet model. Following <ref type="bibr" target="#b4">Du et al. (2017)</ref>, we split the SQuAD 1.1 <ref type="bibr" target="#b26">(Rajpurkar et al., 2016)</ref> dataset into training, development and test sets. We also report the results on the data split as did in <ref type="bibr" target="#b37">Zhao et al. (2018)</ref>, which reverses the development set and test set.</p><p>The question generation task is typically formulated as a Seq2Seq problem. The input passage and the answer are packed as "answer [SEP] input passage" as input, and the question is used as the target output sequence. We fine-tune the Prophet-Net model 10 epochs in the training set and report the results of the two kinds of data splits as mentioned above. The first 512 tokens of the passage are fed to the model. The peak learning rate is 1 × 10 -5 and the batch size is set to 28.</p><p>We compare ProphetNet against the following models: CorefNQG (Du and Cardie, 2018) which employs a feature-rich encoder based on Seq2Seq model; MP-GSN <ref type="bibr" target="#b37">(Zhao et al., 2018)</ref> which incorporates a gated self-attention encoder with maxout pointer; SemQG <ref type="bibr" target="#b36">(Zhang and Bansal, 2019)</ref> which introduces two semantics-enhanced rewards for Seq2Seq model training. Besides, we also compare our model with UniLM <ref type="bibr" target="#b2">(Dong et al., 2019)</ref>, which is the previous state-of-the-art on this task.</p><p>The results, according to the references provided by <ref type="bibr" target="#b4">Du et al. (2017)</ref> is shown in Table <ref type="table">3</ref>. The same model and inference hyper-parameters are used for the two different data split with swapped dev and test set. It can be seen that ProphetNet outperforms all previous methods with significant improvement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Large-scale Pre-training</head><p>Recent works show that the pre-trained model's performance on the downstream task can be improved when using larger scaled pre-training corpora <ref type="bibr" target="#b14">(Lewis et al., 2019;</ref><ref type="bibr" target="#b25">Raffel et al., 2019)</ref> also pre-train ProphetNet on the 160GB English language corpora of news, books, stories, and web text, which is similar<ref type="foot" target="#foot_0">foot_0</ref> to the corpus used in BART <ref type="bibr" target="#b14">(Lewis et al., 2019)</ref>. The model configuration is the same as described in § 3.1. We fine-tune the ProphetNet on two downstream tasks CNN/DailyMail and Gigaword after pre-training, where the setting is the same as described in § 3.2. We compare ProphetNet (160GB) against the following strong baselines: T5 <ref type="bibr" target="#b25">(Raffel et al., 2019)</ref> which is pre-trained on the text corpus of 750GB; PEGASUS LARGE <ref type="bibr">(Zhang et al., 2019)</ref> which is pretrained on the text corpus of 750GB and 3800GB, respectively; And BART <ref type="bibr" target="#b14">(Lewis et al., 2019)</ref> which is pre-trained on the similar dataset as the Prophet-Net (160GB).</p><p>We pre-train our model on 16 × 32GB NVIDIA V100 GPUs with 14 epochs. We can see that the performance increase as ProphetNet pretrains for more epochs on 160GB large-scale dataset. The results on test set are shown in Table 4. Our model achieves state-of-the-art performance on CNN/DailyMail compared to other baselines. It can be observed that the ROUGE-1 and ROUGE-L of ProphetNet on CNN/DailyMail are the highest. Moreover, ProphetNet (160GB) outperforms PEGASUS LARGE (C4 750GB) and PEGASUS LARGE (HugeNews 3800GB) on Gigaword using only about 1/5 and 1/20 of the pretraining corpus, respectively. To the best of our knowledge, ProphetNet also achieves new state-ofthe-art results on the Gigaword.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">ProphetNet without Pre-training</head><p>ProphetNet achieves significant results improvement after pre-training, we also curious about the performance of ProphetNet when directly applied it to downstream tasks without pre-training. Therefore, we evaluate the ProphetNet model without pre-training on CNN/DailyMail. The ProphetNet model without pre-training consists of 12-layer encoder and 12-layer decoder with 768 embedding/hidden size and 3072 feed-forward filter size. We compare the ProphetNet model with the original Seq2Seq Transformer which has the same architecture hyper-parameters of the ProphetNet. The training and evaluation details are the same as described in § 3.2. The results are shown in Table <ref type="table" target="#tab_7">5</ref>. Experimental results show that our method can significantly improve the model performance even without pre-training.</p><p>Setting R-1 R-2 R-L</p><p>Transformer <ref type="bibr" target="#b25">(Raffel et al., 2019)</ref> 39.19 17.60 36.69 ProphetNetw/o pre-train 40.66 18.05 37.79 Table 6: n-gram comparison results on CNN/DailyMail test set</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Unsupervised pre-training has been successfully applied to various natural language processing tasks. GPT <ref type="bibr" target="#b23">(Radford et al., 2018)</ref> takes plain text as pretraining data to predict the next tokens with leftward tokens. It is based on the left-to-right language model and can be used to generate stories and continue to write for a given text. BERT <ref type="bibr" target="#b1">(Devlin et al., 2018)</ref> and SpanBERT <ref type="bibr" target="#b9">(Joshi et al., 2019)</ref> use a Bi-directional language model to recover masked tokens/spans for a given sentence. Bidirectional information flow can be used to recover the masked positions, but no left-to-right language model dependency is learned. As a result, BERT and SpanBERT bring significant improvement for NLU tasks but are not suitable for generation tasks. XLNet <ref type="bibr" target="#b17">(Yang et al., 2019)</ref> predicts the tokens with given positions and some tokens with their positions in the sentence in an AR manner. Although it uses AR to build a permuted-ordered language model, it is also not suitable for NLG tasks because it brought too much noise for a left-to-right language model. MASS <ref type="bibr" target="#b30">(Song et al., 2019)</ref> pre-trains the sequence-to-sequence model by dropping a continuous token span to corrupt the original text and learns to recover it. T5 <ref type="bibr" target="#b25">(Raffel et al., 2019)</ref> investigates different model structures and different pretraining tasks, and is pre-trained on a large scale corpus named C4 which is 750GB. BART <ref type="bibr" target="#b14">(Lewis et al., 2019)</ref> uses the encoder-decoder structure to generate the original sentence with its spoiled input to denoise. In the BART decoder, the undamaged language model is learned thus brings improvement to NLG tasks.</p><p>Natural language generation methods are typically based on the left-to-right or right-to-left language models and generate one token in each time step. These methods can not capture the information of future tokens. Recently, incorporating future information into language generation tasks has attracted the attention of researchers <ref type="bibr" target="#b15">(Li et al., 2017;</ref><ref type="bibr" target="#b29">Serdyuk et al., 2018;</ref><ref type="bibr" target="#b13">Lawrence et al., 2019;</ref><ref type="bibr">Oord et al., 2018)</ref>. <ref type="bibr" target="#b15">Li et al. (2017)</ref> propose an actor-critic model which designs a value function as a critic to estimate the future success. In their method, they not only consider the MLE-based learning but also incorporate an RL-based value function into the decoder process. <ref type="bibr">(Oord et al., 2018)</ref> do not predict future tokens directly but tried to model a density ratio to preserve the mutual information between context and future token. <ref type="bibr" target="#b29">Serdyuk et al. (2018)</ref> point out traditional Recurrent Neural Networks (RNNs) may prefer to generate each token based on the recent tokens, it is hard to learn the long-term dependencies. To capture the future information and learn the long-term dependencies, they run the forward RNN and backward RNN in parallel. <ref type="bibr" target="#b13">Lawrence et al. (2019)</ref> concatenates the source and target to train an encoder instead of encoder-decoder architecture. They use special placeholder tokens to replace some tokens of the target for the model training process. At the inference process, they generate the target by replacing each placeholder token.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we introduce ProphetNet, a sequenceto-sequence pre-training model that learns to predict future n-gram at each time step. ProphetNet achieves the best performance on both abstractive summarization and question generation tasks. Furthermore, ProphetNet achieves new state-of-the-art results on CNN/DailyMail and Gigaword using only about 1/3 the pre-training epochs of the previous model.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure1: The architecture of ProphetNet. For simplicity, we take bigram (n = 2) as an example to introduce ProphetNet, whose modeling target is p(y t , y t+1 |y &lt;t , x) for each time step. The left part shows the encoder of the ProphetNet which is the same as the original Transformer encoder. The right part presents the decoder of the ProphetNet which incorporates the proposed n-stream self-attention. For Seq2Seq pre-training, we present the example of inputs and outputs of the mask based auto-encoder denoising task. The token " " represents the mask symbol [M]. Note that each x i and y i are the same in this task. The layer normalization and residual connection are ignored.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><figDesc>Figure2: N-stream self-attention mechanism which contains a main stream self-attention and n predicting stream self-attention. For simplicity sake, we take 2-stream self-attention (n = 2) as an example here. Figure (a) presents the attention process of the main stream self-attention. Figure (b) and Figure (c) show the attention process of 1-st predicting stream and 2-nd predicting stream, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Results on the CNN/DailyMail test set.</figDesc><table><row><cell>.33</cell><cell>20.21</cell><cell>40.51</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Results on Gigaword test set. R is short for ROUGE.</figDesc><table><row><cell>Method</cell><cell>B4</cell><cell>MTR</cell><cell>R-L</cell></row></table><note><p>implements the standard Seq2Seq model with attention mechanism; Re3Sum<ref type="bibr" target="#b0">(Cao et al., 2018)</ref> </p><p>which employs an extended Seq2Seq model to generate summaries based on the retrieved candidate summaries. And two pre-training based strong baselines: MASS<ref type="bibr" target="#b30">(Song et al., 2019)</ref></p><p>, and UniLM<ref type="bibr" target="#b2">(Dong et al., 2019)</ref></p><p>. The results are presented in Table2</p><p>. It can be observed that Prophet-Net outperforms previous models on all metrics.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 4 :</head><label>4</label><figDesc>. WeResults on the CNN/DailyMail and Gigaword test sets of large-scale pre-training models. R is short for ROUGE, and Corpus denotes the size of the pre-training data.</figDesc><table><row><cell>Dataset</cell><cell>Method</cell><cell>Corpus</cell><cell>R-1</cell><cell>R-2</cell><cell>R-L</cell></row><row><cell></cell><cell>T5 (Raffel et al., 2019)</cell><cell>750GB</cell><cell cols="3">43.52 21.55 40.69</cell></row><row><cell></cell><cell>PEGASUSLARGE (C4) (Zhang et al., 2019)</cell><cell>750GB</cell><cell cols="3">43.90 21.20 40.76</cell></row><row><cell>CNN/DailyMail</cell><cell cols="5">PEGASUSLARGE (HugeNews) (Zhang et al., 2019) 3800GB 44.17 21.47 41.11</cell></row><row><cell></cell><cell>BART (Lewis et al., 2019)</cell><cell>160GB</cell><cell cols="3">44.16 21.28 40.90</cell></row><row><cell></cell><cell>ProphetNet</cell><cell>160GB</cell><cell cols="3">44.20 21.17 41.30</cell></row><row><cell></cell><cell>PEGASUSLARGE (C4) (Zhang et al., 2019)</cell><cell>750GB</cell><cell cols="3">38.75 19.96 36.14</cell></row><row><cell>Gigaword</cell><cell cols="5">PEGASUSLARGE (HugeNews) (Zhang et al., 2019) 3800GB 39.12 19.86 36.24</cell></row><row><cell></cell><cell>ProphetNet</cell><cell>160GB</cell><cell cols="3">39.51 20.42 36.69</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 5</head><label>5</label><figDesc>The pre-trained models are then fine-tuned on CNN/DailyMail. We report the F1 scores of ROUGE-1, ROUGE-2 and ROUGE-L. The results are shown in Table6. We can see that the performance of ProphetNet base -3gram and ProphetNet base -2gram is comparable. Both of them perform better than MASS base and ProphetNet base -1gram. Considering the computational and time cost, we use ProphetNet base -2gram in other experiments due to its training speed is 15% faster than ProphetNet base -3gram.</figDesc><table><row><cell>: Results on CNN/DailyMail dev set without</cell></row><row><cell>pre-training</cell></row><row><cell>3.6 ProphetNet N-gram Comparison</cell></row><row><cell>ProphetNet predicts next contiguous n-gram to-</cell></row><row><cell>kens simultaneously for each time step. To ex-</cell></row><row><cell>plore the effectiveness of predicting n gram, we</cell></row><row><cell>compare our ProphetNet model with n=1, 2, and</cell></row><row><cell>3. We also compare the MASS base which is very</cell></row><row><cell>similar to ProphetNet base -1gram. The architec-</cell></row><row><cell>ture hyper-parameter of all the models is set to</cell></row><row><cell>6-layer encoder, 6-layer decoder, 768 hidden size,</cell></row><row><cell>and 12 attention heads, which are the same as</cell></row><row><cell>MASS base . These models are also pre-trained</cell></row><row><cell>on the Wikipedia+BookCorpus dataset with 125k</cell></row><row><cell>steps. Other hyper-parameters are the same as the</cell></row><row><cell>description in  § 3.1. As we mentioned in  § 2.2, we</cell></row><row><cell>set different attenuation coefficient for the power</cell></row><row><cell>attenuation function. For ProphetNet base -2gram, γ</cell></row><row><cell>is set to 1.0. For ProphetNet base -3gram model, the</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Due to CC-News is not officially released, we use similar public news corpus REALNEWS(Zellers et al.,  </p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>2019)</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Retrieve, rerank and rewrite: Soft template based neural summarization</title>
		<author>
			<persName><forename type="first">Ziqiang</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenjie</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sujian</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Furu</forename><surname>Wei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Bert: Pre-training of deep bidirectional transformers for language understanding</title>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming-Wei</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenton</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristina</forename><surname>Toutanova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NAACL</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Unified language model pre-training for natural language understanding and generation</title>
		<author>
			<persName><forename type="first">Li</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenhui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Furu</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaodong</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jianfeng</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hsiao-Wuen</forename><surname>Hon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note>In NeurIPS</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Harvesting paragraph-level question-answer pairs from wikipedia</title>
		<author>
			<persName><forename type="first">Xinya</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Claire</forename><surname>Cardie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Learning to ask: Neural question generation for reading comprehension</title>
		<author>
			<persName><forename type="first">Xinya</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junru</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Claire</forename><surname>Cardie</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1705.00106</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Pre-trained language model representations for language generation</title>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Edunov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexei</forename><surname>Baevski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Auli</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1903.09722</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">Angela</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Grangier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Auli</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1711.05217</idno>
		<title level="m">Controllable abstractive summarization</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Bottom-up abstractive summarization</title>
		<author>
			<persName><forename type="first">Sebastian</forename><surname>Gehrmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuntian</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">M</forename><surname>Rush</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Plan, attend, generate: Planning for sequence-to-sequence models</title>
		<author>
			<persName><forename type="first">Caglar</forename><surname>Gulcehre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Francis</forename><surname>Dutil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Trischler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">Mandar</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Danqi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yinhan</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Daniel S Weld</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Omer</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><surname>Levy</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1907.10529</idno>
		<title level="m">Spanbert: Improving pre-training by representing and predicting spans</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Adam: A method for stochastic optimization</title>
		<author>
			<persName><forename type="first">P</forename><surname>Diederik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jimmy</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><surname>Ba</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note>In ICLR</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Opennmt: Opensource toolkit for neural machine translation</title>
		<author>
			<persName><forename type="first">Guillaume</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuntian</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean</forename><surname>Senellart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">M</forename><surname>Rush</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName><forename type="first">David</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tegan</forename><surname>Maharaj</surname></persName>
		</author>
		<author>
			<persName><forename type="first">János</forename><surname>Kramár</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Pezeshki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicolas</forename><surname>Ballas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><forename type="middle">Rosemary</forename><surname>Ke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anirudh</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Pal</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.01305</idno>
		<title level="m">Zoneout: Regularizing rnns by randomly preserving hidden activations</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Attending to future tokens for bidirectional sequence generation</title>
		<author>
			<persName><forename type="first">Carolin</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bhushan</forename><surname>Kotnis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mathias</forename><surname>Niepert</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1908.05915</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension</title>
		<author>
			<persName><forename type="first">Mike</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yinhan</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Naman</forename><surname>Goyal ; Abdelrahman Mohamed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Omer</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ves</forename><surname>Stoyanov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1910.13461</idno>
		<imprint>
			<date type="published" when="2019">Marjan Ghazvininejad,. 2019</date>
			<pubPlace>Bart</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">Jiwei</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Will</forename><surname>Monroe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dan</forename><surname>Jurafsky</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1701.06549</idno>
		<title level="m">Learning to decode for future success</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Rouge: A package for automatic evaluation of summaries</title>
		<author>
			<persName><forename type="first">Chin-Yew</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Text summarization branches out</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Text summarization with pretrained encoders</title>
		<author>
			<persName><forename type="first">Yang</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mirella</forename><surname>Lapata</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1908.08345</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Merity</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nitish</forename><surname>Shirish Keskar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1708.02182</idno>
		<title level="m">Regularizing and optimizing lstm language models</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Summarunner: A recurrent neural network based sequence model for extractive summarization of documents</title>
		<author>
			<persName><forename type="first">Ramesh</forename><surname>Nallapati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Feifei</forename><surname>Zhai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bowen</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Abstractive text summarization using sequence-to-sequence rnns and beyond</title>
		<author>
			<persName><forename type="first">Ramesh</forename><surname>Nallapati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bowen</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Caglar</forename><surname>Gulcehre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bing</forename><surname>Xiang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1602.06023</idno>
		<idno>arXiv:1807.03748</idno>
	</analytic>
	<monogr>
		<title level="m">Representation learning with contrastive predictive coding</title>
		<imprint>
			<date type="published" when="2016">2016. 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Aaron van den Oord, Yazhe Li, and Oriol Vinyals</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">On the difficulty of training recurrent neural networks</title>
		<author>
			<persName><forename type="first">Razvan</forename><surname>Pascanu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tomas</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
	<note>In ICML</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Deep contextualized word representations</title>
		<author>
			<persName><forename type="first">Mark</forename><surname>Matthew E Peters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohit</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matt</forename><surname>Iyyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Gardner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenton</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><surname>Zettlemoyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NAACL</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Improving language understanding by generative pre-training</title>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karthik</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tim</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<ptr target="https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/languageunsupervised/languageunderstand-ingpaper.pdf" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Language models are unsupervised multitask learners</title>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dario</forename><surname>Amodei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OpenAI Blog</title>
		<imprint>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Exploring the limits of transfer learning with a unified text-to-text transformer</title>
		<author>
			<persName><forename type="first">Colin</forename><surname>Raffel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Katherine</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sharan</forename><surname>Narang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Matena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yanqi</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Liu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1910.10683</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Squad: 100,000+ questions for machine comprehension of text</title>
		<author>
			<persName><forename type="first">Pranav</forename><surname>Rajpurkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Konstantin</forename><surname>Lopyrev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Percy</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Sumit Chopra, and Jason Weston</title>
		<author>
			<persName><forename type="first">M</forename><surname>Alexander</surname></persName>
		</author>
		<author>
			<persName><surname>Rush</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1509.00685</idno>
	</analytic>
	<monogr>
		<title level="m">A neural attention model for abstractive sentence summarization</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Get to the point: Summarization with pointergenerator networks</title>
		<author>
			<persName><forename type="first">Abigail</forename><surname>See</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Twin networks: Matching the future for sequence generation</title>
		<author>
			<persName><forename type="first">Dmitriy</forename><surname>Serdyuk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><forename type="middle">Rosemary</forename><surname>Ke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alessandro</forename><surname>Sordoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Trischler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note>Chris Pal, and Yoshua Bengio</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Mass: Masked sequence to sequence pre-training for language generation</title>
		<author>
			<persName><forename type="first">Kaitao</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xu</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tao</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jianfeng</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tie-Yan</forename><surname>Liu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.02450</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Sequence to sequence learning with neural networks</title>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quoc V</forename><surname>Le</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note>In NIPS</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Attention is all you need</title>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niki</forename><surname>Parmar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jakob</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Llion</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aidan</forename><forename type="middle">N</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Łukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Illia</forename><surname>Polosukhin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Xlnet: Generalized autoregressive pretraining for language understanding</title>
		<author>
			<persName><forename type="first">Zhilin</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zihang</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yiming</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jaime</forename><surname>Carbonell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quoc V</forename><surname>Le</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1906.08237</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">Rowan</forename><surname>Zellers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ari</forename><surname>Holtzman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hannah</forename><surname>Rashkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonatan</forename><surname>Bisk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ali</forename><surname>Farhadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Franziska</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yejin</forename><surname>Choi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.12616</idno>
		<title level="m">Defending against neural fake news</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Pegasus: Pre-training with extracted gap-sentences for abstractive summarization</title>
		<author>
			<persName><forename type="first">Jingqing</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yao</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Saleh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Liu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1912.08777</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Addressing semantic drift in question generation for semisupervised question answering</title>
		<author>
			<persName><forename type="first">Shiyue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohit</forename><surname>Bansal</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1909.06356</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Paragraph-level neural question generation with maxout pointer and gated self-attention networks</title>
		<author>
			<persName><forename type="first">Yao</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaochuan</forename><surname>Ni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note>Yuanyuan Ding, and Qifa Ke</note>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Neural question generation from text: A preliminary study</title>
		<author>
			<persName><forename type="first">Qingyu</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Furu</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuanqi</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hangbo</forename><surname>Bao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">National CCF Conference on Natural Language Processing and Chinese Computing</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="662" to="671" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Aligning books and movies: Towards story-like visual explanations by watching movies and reading books</title>
		<author>
			<persName><forename type="first">Yukun</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ryan</forename><surname>Kiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rich</forename><surname>Zemel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE</title>
		<meeting>the IEEE</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="19" to="27" />
		</imprint>
	</monogr>
	<note>Ruslan Salakhutdinov, Raquel Urtasun, Antonio Torralba, and Sanja Fidler</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
