<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FRONTIERMATH: A BENCHMARK FOR EVALUATING ADVANCED MATHEMATICAL REASONING IN AI</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability  status="unknown">
					<licence/>
				</availability>
				<date type="published" when="2024-12-20">20 Dec 2024</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Elliot</forename><surname>Glazer</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ege</forename><surname>Erdil</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Tamay</forename><surname>Besiroglu</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Diego</forename><surname>Chicharro</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Evan</forename><surname>Chen</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Alex</forename><surname>Gunning</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Siegen</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Caroline</forename><forename type="middle">Falkman</forename><surname>Olsson</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Jean-Stanislas</forename><surname>Denain</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Anson</forename><surname>Ho</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Emily</forename><surname>De</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Oliveira</forename><surname>Santos</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Olli</forename><surname>Järviniemi</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Matthew</forename><surname>Barnett</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Robert</forename><surname>Sandler</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Matej</forename><surname>Vrzala</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Jaime</forename><surname>Sevilla</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Qiuyu</forename><surname>Ren</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Elizabeth</forename><surname>Pratt</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Lionel</forename><surname>Levine</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Grant</forename><surname>Barkley</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Natalie</forename><surname>Stewart</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Bogdan</forename><surname>Grechuk</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Leicester</orgName>
								<address>
									<addrLine>2 King&apos;s 6 UC Berkeley 10 University of Bristol 3 MIT 7 Cornell University</addrLine>
									<settlement>College London</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tetiana</forename><surname>Grechuk</surname></persName>
						</author>
						<author>
							<persName><forename type="first">‡</forename><surname>Shreepranav</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Leicester</orgName>
								<address>
									<addrLine>2 King&apos;s 6 UC Berkeley 10 University of Bristol 3 MIT 7 Cornell University</addrLine>
									<settlement>College London</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Varma</forename><surname>Enugandla</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Mark</forename><surname>Wildon</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<address>
									<addrLine>1 Epoch AI 5 ICMC</addrLine>
									<country>USP</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">FRONTIERMATH: A BENCHMARK FOR EVALUATING ADVANCED MATHEMATICAL REASONING IN AI</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2024-12-20">20 Dec 2024</date>
						</imprint>
					</monogr>
					<idno type="MD5">21D8D311592B68B4CA5748CAAA7FD792</idno>
					<idno type="arXiv">arXiv:2411.04872v5[cs.AI]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-02-21T16:18+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We introduce FrontierMath, a benchmark of hundreds of original, exceptionally challenging mathematics problems crafted and vetted by expert mathematicians. The questions cover most major branches of modern mathematics-from computationally intensive problems in number theory and real analysis to abstract questions in algebraic geometry and category theory. Solving a typical problem requires multiple hours of effort from a researcher in the relevant branch of mathematics, and for the upper end questions, multiple days. FrontierMath uses new, unpublished problems and automated verification to reliably evaluate models while minimizing risk of data contamination. Current state-of-the-art AI models solve under 2% of problems, revealing a vast gap between AI capabilities and the prowess of the mathematical community. As AI systems advance toward expert-level mathematical abilities, FrontierMath offers a rigorous testbed that quantifies their progress.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recent AI systems have demonstrated remarkable proficiency in tackling challenging mathematical tasks, from achieving olympiad-level performance in geometry <ref type="bibr" target="#b24">(Trinh et al. 2024)</ref> to improving upon existing research results in combinatorics <ref type="bibr" target="#b22">(Romera-Paredes et al. 2024)</ref>. However, existing benchmarks face some limitations: Saturation of existing benchmarks Current standard mathematics benchmarks such as the MATH dataset <ref type="bibr" target="#b12">(Hendrycks, Burns, Kadavath, et al. 2021</ref>) and GSM8K <ref type="bibr" target="#b5">(Cobbe et al. 2021)</ref> primarily assess competency at the high-school and early undergraduate level. As state-of-the-art models achieve near-perfect performance on these benchmarks, we lack rigorous ways to evaluate their capabilities in advanced mathematical domains that require deeper theoretical understanding, creative insight, and specialized expertise. Furthermore, to assess AI's potential contributions to mathematics research, we require benchmarks that better reflect the challenges faced by working mathematicians.</p><p>Benchmark contamination in training data A significant challenge in evaluating large language models (LLMs) is data contamination-the inadvertent inclusion of benchmark problems in training data. This issue leads to artificially inflated performance metrics that mask models' true reasoning capabilities <ref type="bibr" target="#b6">(Deng et al. 2023;</ref><ref type="bibr">C. Xu et al. 2024)</ref>. While competitions like the International Mathematics Olympiad (IMO) or American Invitational Mathematics Examination (AIME) offer fresh test problems created after model training, making them immune to contamination, these sources provide only a small number of problems and often require substantial manual effort to grade.</p><p>Sample problem 1: Testing Artin's primitive root conjecture Definitions. For a positive integer n, let vp(n) denote the largest integer v such that p v | n. For p a prime and a ̸ ≡ 0 (mod p), we let ordp(a) denote the smallest positive integer o such that a o ≡ 1 (mod p). For x &gt; 0, we let ordp,x(a) = q≤x q prime q vq (ordp(a)) q&gt;x q prime q vq (p-<ref type="foot" target="#foot_0">foot_0</ref>) . Sample problem 2: Find the degree 19 polynomial Construct a degree 19 polynomial p(x) ∈ C[x] such that X := {p(x) = p(y)} ⊂ P 1 × P 1 has at least 3 (but not all linear) irreducible components over C. Choose p(x) to be odd, monic, have real coefficients and linear coefficient -19 and calculate p(19).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Problem. Let</head><p>Answer: 1876572071974094803391179 Figure <ref type="figure">1</ref>: FrontierMath features hundreds of advanced mathematics problems that require hours for expert mathematicians to solve. We release representative samples from the benchmark. Statements and solutions for released problems are provided in Appendix A.</p><p>To address these limitations, we introduce FrontierMath, a benchmark of original, exceptionally challenging mathematical problems created in collaboration with over 60 mathematicians from leading institutions. FrontierMath addresses data contamination concerns by featuring exclusively new, previously unpublished problems. It enables scalable evaluation through automated verification that provides rapid, reproducible assessment. The benchmark spans the full spectrum of modern mathematics, from challenging competition-style problems to problems drawn directly from contemporary research, covering most branches of mathematics in the 2020 Mathematics Subject Classification (MSC2020). <ref type="foot" target="#foot_1">2</ref>The problems in FrontierMath demand deep theoretical understanding, creative insight, and specialized expertise, often requiring multiple hours of effort from expert mathematicians to solve. We provide a set of representative example problems and their solutions (see Appendix B.3 and Figure <ref type="figure">1</ref>). Notably, current state-of-the-art AI models are unable to solve more than 2% of the problems in FrontierMath, even with multiple attempts, highlighting a significant gap between human and AI capabilities in advanced mathematics (see Figure <ref type="figure">2</ref>).</p><p>To understand expert perspectives on FrontierMath's difficulty and relevance, we interviewed several prominent mathematicians, including Fields Medalists Terence <ref type="bibr">Tao (2006)</ref>, Timothy Gowers (1998), and Richard Borcherds (1998), and IMO coach Evan Chen. They unanimously characterized the problems as exceptionally challenging, requiring deep domain expertise and significant time investment to solve. While they noted that the requirement of numerical answers differs from typical mathematical research practice, these problems nonetheless demand substantial expertise and time even from experienced mathematicians.</p><p>Problems not solved by leading AI models Less saturated More saturated 100% 80% 60% 40% 20% 0% FrontierMath Omni-Math MathVista AIME MATH GSM-8k MMLU Figure 2: Comparison of unsolved problems across five mathematics benchmarks. While existing benchmarks are approaching saturation (see Appendix B.3), FrontierMath maintains a &gt;98% unsolved rate.</p><p>2 Data collection</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The collection pipeline</head><p>We developed the FrontierMath benchmark through collaboration with over 60 mathematicians from universities across more than a dozen countries. Our contributors formed a diverse group spanning academic ranks from graduate students to faculty members. Many are distinguished participants in prestigious mathematical competitions, collectively holding 14 IMO gold medals. One contributing mathematician also holds a Fields Medal.</p><p>Their areas of expertise collectively span a vast expanse of modern mathematics-including but not limited to algebraic geometry, number theory, point set and algebraic topology, combinatorics, category theory, representation theory, partial differential equations, probability theory, differential geometry, logic, and theoretical computer science. Since many of our contributors are active researchers, the problems naturally incorporate sophisticated techniques and insights found in contemporary mathematical research.</p><p>Each mathematician created new problems following guidelines designed to ensure clarity, verifiability, and definitive answers across various difficulty levels and mathematical domains. Four requirements guided problem creation:</p><p>• Originality: While problems could build on existing mathematical ideas, they needed to do so in novel and non-obvious ways-either through clever adaptations that substantially transform the original concepts, or through innovative combinations of multiple ideas that obscure their origins. This ensures that solving them requires genuine mathematical insight rather than pattern matching against known problems.</p><p>• Automated verifiability: Problems had to possess definitive, computable answers that could be automatically verified. To facilitate automated verification, we often structured problems to have integer solutions, which are straightforward to check programmatically. We also included solutions that could be represented as arbitrary SymPy objects-including symbolic expressions, matrices, and more. By utilizing SymPy, we enabled a wide range of mathematical outputs to be represented and verified programmatically, ensuring that even complex symbolic solutions could be efficiently and accurately checked. This approach allowed us to support diverse answer types while maintaining verification standards.</p><p>• Guessproofness: Problems were designed to avoid being susceptible to guessing; solving the problem had to be necessary to find the correct answer. As can be seen from Figure <ref type="figure">1</ref>, problems often have numerical answers that are large and nonobvious, which reduces the vulnerability to guesswork. As a rule of thumb, we require that there should not be a greater than 1% chance of guessing the correct answer without doing most of the work that one would need to do to "correctly" find the solution. This is important to ensure that the challenges assessed genuine mathematical understanding and reasoning.</p><p>• Computational tractability: The solution of a computationally intensive problem must include scripts demonstrating how to find the answer, starting only from standard knowledge of the field.<ref type="foot" target="#foot_2">foot_2</ref> These scripts must cumulatively run less than a minute on standard hardware. This requirement ensures efficient and manageable evaluation times.</p><p>For each contributed problem, mathematicians provided a detailed solution and multiple forms of metadata. Each submission included both a verification script for automated answer checking (see Section 2.2) and comprehensive metadata tags. These tags included subject and technique classifications, indicating both the mathematical domains and specific methodologies required for solution. Each submission then underwent peer review by at least one mathematician with relevant domain expertise, who evaluated all components: the problem statement, solution, verification code, difficulty ratings, and classification tags (see Section 2.3). Additionally, the problems were securely produced and handled to prevent data contamination, and reviewed for originality (see Section 2.4). Finally, the submissions included structured difficulty ratings that assessed three key dimensions: the required level of background knowledge, the estimated time needed to identify key insights, and the time required to work through technical details (see Section 2.5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Automated verification</head><p>FrontierMath focuses exclusively on problems with automatically verifiable solutions-primarily numerical answers or mathematical objects that can be expressed as SymPy objects (including symbolic expressions, matrices, sets, and other mathematical structures). For each problem, the evaluated model submits code that computes and saves its answer as a Python object. A script then automatically verifies this answer. If the problem has a unique integer solution, it checks for an exact match. If the problem has a unique symbolic real answer, it uses SymPy evaluation to check that the difference between the submitted answer and the actual answer simplifies to 0. In all other cases, a custom verification script is necessary to check validity of a submitted answer (see Figure <ref type="figure" target="#fig_2">3</ref>).</p><p>LLM submits code that computes and saves the answer.</p><p>Verification script loads the results and marks them as either correct or incorrect. import def return open (answer): answer answer answer ⤷ pickle.load( ( , )) verify(answer) pickle verify [0]**2 -7* [1]**2 == 1 = "final_answer.p" "rb" verification_script.py import with open as final_answer ( ) f: pickle.dump(final_answer, f) pickle # This is the final answer = (8, 3) # Pickle the final result to file "final_answer.p", "wb" submitted_code.py import with open as final_answer ( ) f: pickle.dump(final_answer, f) pickle # This is the final answer = (2, 2) # Pickle the final result to file "final_answer.p", "wb" submitted_code.py This design choice enables rapid, objective evaluation of AI models without requiring them to output solutions in formal proof languages like Lean or Coq. The automated verification framework substantially reduces the cost and complexity of evaluation, as verification can be performed programmatically without human intervention. Furthermore, it eliminates potential human bias and inconsistency in the evaluation process, as the verification criteria are explicitly defined and uniformly applied.</p><p>While this approach enables efficient and scalable evaluation, it does impose certain limitations. Most notably, we cannot include problems that require mathematical proofs or formal reasoning steps, as these would demand human evaluation to assess correctness and clarity.<ref type="foot" target="#foot_3">foot_3</ref> However, even without formal proofs, these problems span a substantial breadth of modern mathematics and include problems that eminent mathematicians have characterized as exceptionally difficult (see Section 6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Validation and quality assurance</head><p>To maintain high quality standards and minimize errors in the benchmark, we established a rigorous multi-stage review process. Each submitted problem underwent blind peer review by at least one expert mathematician from our team, who evaluated the following criteria:</p><p>• Verifying the correctness of the problem statement and the provided solution.</p><p>• Checking for ambiguities or potential misunderstandings in the problem wording.</p><p>• Assessing the problem for guessproofness, ensuring that solutions cannot be easily obtained without proper mathematical reasoning.</p><p>• Confirming the appropriateness of the assigned difficulty ratings and metadata.</p><p>Verifying correctness is the most important of these tasks. For problems with unique solutions-the majority of our benchmark-verifying correctness requires checking the mathematical argumentation, computations, and, if applicable, programming scripts the writer provided to justify their answer. For problems with non-unique solutions, e.g. those which ask for a solution to some system of Diophantine equations or for a Hamiltonian path in a given graph, the reviewer only checks that the provided verification script matches the problem requirements and test it on the answer.</p><p>All problems in the benchmark have undergone at least one blind peer review. Through this review process, we identify problems with incorrect answers as well as those that fail to meet our guessproofness criterion. Such problems are only included in the benchmark after authors successfully address these issues through revision.</p><p>During first reviews, our reviewers commonly identify several types of issues with submitted problems. These include answers that aren't easily verifiable, problems where guessing is easier than proving, and cases where simple brute-force methods circumvent the intended difficulty. Such issues occur predominantly with authors who are new to submitting questions to the benchmark and have not yet fully internalized the guidelines. Beyond these concerns, straightforward errors in question statements or computational mistakes in solutions leading to incorrect answers are also not uncommon.</p><p>We commissioned blind reviews from second reviewers on 30 randomly chosen questions so far to get some idea about the noise threshold we might expect due to errors, and we also randomly selected 5 questions to be removed from the dataset and serve as a public sample of problems (see Appendix A). In total, 35 of the accepted problems have received scrutiny beyond the first round of peer review.</p><p>Two out of 35 questions had an incorrect answer provided by the author, undetected in the first review. Assuming that a question being incorrect is a Bernoulli trial with probability p and that the second reviewers catch all errors, using a Jeffreys prior on p yields a posterior error rate of 2+0.5 35+1 ≈ 6.9% for this benchmark. On one hand, the Jeffreys prior is conservative since our prior belief about p is likely lower due to the careful construction of the benchmark. On the other hand, we must account for potential undetected errors that even the second review might have missed. Therefore, estimating a critical error rate of approximately 10% is reasonable. This estimate aligns with error rates typical in machine learning benchmarks; for instance, Northcutt, Athalye, and Mueller 2021 estimate a &gt; 6% label error rate in the ImageNet validation set, while <ref type="bibr" target="#b9">Gema et al. 2024</ref> find that over 9% of questions in the MMLU benchmark contain errors based on expert review of 3,000 randomly sampled questions.</p><p>The second reviews also identified less critical errors. Six out of 35 questions had missing hypotheses in their statements which technically made them not fully rigorous. While domain experts could reasonably impute this missing context, it might still pose difficulties for models attempting to solve these problems. For two of the 35 questions, reviewers proposed strategies for guessing the solution with substantially less effort or computation than was necessary for a rigorous mathematical justification of the answer, violating the guessproofness criterion. In all cases, they proposed adjustments to the problem which corrected the error while preserving the original mathematical intent of the writer.</p><p>Although the error rate remains low, the mistakes we have spotted highlight the issues of a passive review system, in which the reviewer sees the full solution document and simply has to state their approval in order for a problem to be accepted into the benchmark. Going forward, we are adopting a more active review process, and will henceforth require concrete confirmation of a problem's soundness before it is accepted. For problems which seek a solution with some easily verified characteristic, such as a tuple of integers satisfying a Diophantine equation, it is enough to test that criterion directly. If a problem seeks a symbolic real number or some efficiently computed value, then it would be strong evidence if a heuristically determined guess approximates the given solution. For more abstract problems, it may be necessary to have a reviewer solve the problem themselves, given only the key steps and ideas of the solution rather than the full write-up. Additionally, we observed inconsistent difficulty ratings between first and second reviewers; due to the subjective nature of this task, ratings rarely matched and often showed substantial differences. <ref type="foot" target="#foot_4">5</ref> In several cases, second reviewers found no fundamental problems with the questions but suggested ways to increase their difficulty, indicating potential room to improve the difficulty of the remaining questions if reviewers were to spend more time on refining them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Originality and data contamination prevention</head><p>Contributors were explicitly instructed to develop novel mathematical problems. While they could build upon existing mathematical ideas, they were required to do so in non-obvious ways-either through clever adaptations that substantially transformed the original concepts, or through novel and innovative combinations of multiple ideas. This approach ensured that solving the problems required genuine mathematical insight rather than pattern matching against known problems.</p><p>To minimize the risk of problems and solutions being disseminated online, we encouraged all submissions to be conducted through secure, encrypted channels. We employed encrypted communication platforms to coordinate with contributors and requested that any written materials stored online be encrypted-for instance, by placing documents in password-protected archives shared only via secure methods. <ref type="foot" target="#foot_5">6</ref>Our primary method for validating originality relied on expert review by our core team of mathematicians. Their extensive familiarity with competition and research-level problems enabled them to identify potential similarities with existing problems that automated systems might miss. The team conducted thorough manual checks against popular mathematics websites, online repositories, and academic publications. This expert review process was supplemented by verification using plagiarism detection software.</p><p>To provide further confidence in our problems' originality, we ran them through the plagiarism detection tools Quetext and Copyscape. Across the entire dataset, the verification process revealed no significant matches to existing content, with minimal flags attributed only to standard mathematical terminology or software oversensitivity.<ref type="foot" target="#foot_6">foot_6</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Problem difficulty</head><p>Estimates of mathematical problem difficulty are useful for FrontierMath's goal of evaluating AI mathematical capabilities, as such estimates would provide more fine-grained information about the performance of AI models. To assess problem difficulty, each problem author provided ratings along three key dimensions:</p><p>1. Background: This rating ranges from 1 to 5 and indicates the level of mathematical background required to approach the problem. A rating of 1 corresponds to high school level, 2 to early undergraduate level, 3 to late undergraduate level, 4 to graduate level, and 5 to research level.</p><p>2. Creativity: Estimated as the number of hours an expert would need to identify the key ideas for solving the problem. This measure has no upper limit.</p><p>3. Execution: Similarly estimated as the number of hours required to compute the final answer once the key ideas are found, including time writing a script if applicable. This measure also has no upper limit.</p><p>To verify and refine the initial difficulty assessments, each difficulty assessment underwent a peer-review process.</p><p>Reviewers assessed the accuracy of the initial difficulty ratings. Any discrepancies between the authors' ratings and the reviewers' assessments were discussed, and adjustments were made as needed to ensure that the difficulty ratings accurately reflected the problem's demands in terms of background, creativity, and execution.</p><p>Accurately assessing the difficulty of mathematics problems presents significant challenges (E. Chen 2024a; E. Chen 2024b). Problems that seem impossible may become trivial after exposure to certain techniques, and multiple solution paths of varying complexity often exist. Moreover, while we designed our problems to require substantial mathematical work rather than allow solutions through guessing or pattern matching, the possibility of models finding unexpected shortcuts could undermine such difficulty estimates.</p><p>Given these challenges, we view our difficulty ratings as providing rough guidance. More rigorous validation, such as through systematic data collection on human solution times, would be needed to make stronger claims about these difficulty assessments.<ref type="foot" target="#foot_7">foot_7</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Dataset composition</head><p>The FrontierMath benchmark covers a broad spectrum of contemporary mathematics, spanning both foundational areas and specialized research domains. This comprehensive coverage is crucial for effectively evaluating AI systems' mathematical capabilities across the landscape of modern mathematics. Working with over 60 mathematicians across different specializations, we captured most top-level MSC 2020 classification codes, reflecting the breadth of mathematics from foundational fields to emerging research areas.</p><p>MSC Classification Percentage MSC Classification Percentage 11 Number theory 17.8% 57 Manifolds and cell complexes 2.1% 05 Combinatorics 15.8% 13 Commutative algebra 2.1% 20 Group theory and generalizations 8.9% 54 General topology 1.4% 60 Probability theory and stochastic processes 5.1% 35 Partial differential equations 1.4% 15 Linear and multilinear algebra; matrix theory 4.8% 53 Differential geometry 1.4% 14 Algebraic geometry 4.8% 42 Harmonic analysis on Euclidean spaces 1.4% 33 Special functions 4.8% 41 Approximations and expansions 1.4% 55 Algebraic topology 3.1% 52 Convex and discrete geometry 1.4% 12 Field theory and polynomials 2.4% 82 Statistical mechanics, structure of matter 1.0% 30 Functions of a complex variable 2.4% 44 Integral transforms, operational calculus 1.0% 68 Computer science 2.4% 17 Nonassociative rings and algebras 1.0% 18 Category theory; homological algebra 2.4% Other (&lt; 3 problems each) 9.9% Table 1: Percentage distribution of Mathematics Subject Classification (MSC) 2020 codes in the FrontierMath dataset, representing the proportion of each classification relative to the total MSC assignments.</p><p>Number theory and combinatorics are most prominently represented, collectively accounting for approximately 34% of all MSC2020 tags. This prominence reflects both our contributing mathematicians' expertise and these domains' natural amenability to problems with numerical solutions that can be automatically verified. The next most represented fields are algebraic geometry and group theory (together about 14% of MSC tags), followed by algebraic topology (approximately 3%), linear algebra (5%), and special functions (5%). Problems involving probability theory and stochastic processes constitute about 5% of the MSC tags, with additional significant representation in complex analysis, category theory, and partial differential equations, each comprising between 1-3% of the MSC tags.</p><p>The network visualization (Figure <ref type="figure" target="#fig_11">4</ref>) reveals how mathematical subjects combine within individual problems. Number theory and combinatorics appear together most frequently, with 13% of problems requiring both subjects, followed by combinatorics-group theory (9%) and number theory-group theory (8%). These three fields-number theory (44% of all problems), combinatorics (39%), and group theory (22%)-form the core of the benchmark, each combining with more than a dozen other mathematical domains in novel ways.</p><p>There is a wide range of techniques required to solve the problems in our dataset. In particular, there are over 200 different techniques listed as being involved in the solutions of our problems. Although generating functions, recurrence relations, and special functions emerge as common techniques, they each appear in less than 5% of problems, underscoring the benchmark's methodological diversity. Even the most frequently co-occurring techniques appear together in at most 3 problems, highlighting how problems typically require unique combinations of mathematical approaches.</p><p>Order, lattices, ordered algebraic structures Associative rings and algebras Topological groups, Lie groups K-theory Nonassociative rings and algebras Statistics Operations research, mathematical programming Integral transforms, operational calculus Ordinary differential equations Difference and functional equations Calculus of variations and optimal control; optimization Functional analysis Approximations and expansions Geometry Sequences, series, summability Measure and integration Relativity and gravitational theory Real functions Convex and discrete geometry General topology Global analysis, analysis on manifolds Harmonic analysis on Euclidean spaces Differential geometry Several complex variables and analytic spaces Potential theory Statistical mechanics, structure of matter Partial differential equations Functions of a complex variable Field theory and polynomials Computer science Special functions Combinatorics Linear and multilinear algebra; matrix theory Probability theory and stochastic processes Commutative algebra Number theory Algebraic geometry Algebraic topology Group theory and generalizations Category theory; homological algebra Manifolds and cell complexes Figure 4: Mathematical subject interconnections in FrontierMath. Node sizes indicate the frequency of each subject's appearance in problems, while connections indicate when multiple mathematical subjects are combined within single problems, demonstrating the benchmark's integration of many mathematical domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experiment-enabled evaluation framework</head><p>To evaluate AI models on FrontierMath problems, we developed a framework that allows models to explore and verify potential solution approaches through code execution, mirroring how mathematicians might experiment with ideas when tackling challenging problems. This framework enables models to test hypotheses, receive feedback, and refine their approach based on experimental results, as illustrated in Figure <ref type="figure" target="#fig_3">5</ref>.</p><p>The evaluation process follows an iterative cycle where the model analyzes the mathematical problem, proposes solution strategies, implements these strategies as executable Python code, receives feedback from code execution results, and refines its approach based on the experimental outcomes.</p><p>For each problem, the model interacts with a Python environment where it can write code blocks that are automatically executed, with outputs and any error messages being fed back into the conversation. This allows the model to verify intermediate results, test conjectures, and catch potential errors in its reasoning. Append results of code blocks to the model prompt Prompt model with FrontierMath problem START Model response Execute code from model response Did the model's code submit a final answer? Yes END No When submitting a final answer, models must follow a standardized format by including a specific marker comment (# This is the final answer), saving the result using Python's pickle module, and ensuring the submission code is self-contained and independent of previous computations. The interaction continues until either the model submits a correctly formatted final answer or reaches the token limit, which we set to 10,000 tokens in our experiments.</p><p>If a model reaches this token limit without having submitted a final answer, it receives a final prompt requesting an immediate final answer submission. If the model still fails to provide a properly formatted final answer after this prompt, the attempt is marked as incorrect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Accuracy on FrontierMath</head><p>We evaluated six leading language models on our existing subset of FrontierMath problems: o1-preview (OpenAI 2024b), o1-mini (OpenAI 2024d), and GPT-4o (2024-08-06 version) (OpenAI 2024a), Claude 3.5 Sonnet (2024-10-22 version) (Anthropic 2024b), Grok 2 Beta (XAI 2024), and Google DeepMind's Gemini 1.5 Pro 002 (GoogleAI 2024).</p><p>All models had a very low performance on FrontierMath problems, with no model achieving even a 2% success rate on the full benchmark (see Figure <ref type="figure">6</ref>). This stands in stark contrast to other mathematics evaluations such as GSM8K <ref type="bibr" target="#b5">(Cobbe et al. 2021)</ref>, MATH (Hendrycks, Burns, Kadavath, et al. 2021), AIME 2024 (OpenAI 2024c), or Omni-MATH (Gao et al. 2024), which are closer to saturation (see Figure 2). 0% 20% 40% 60% 80% 100% Gemini 1.5 Pro (002) Claude 3.5 Sonnet (2024-10-22) o1-preview o1-mini GPT-4o (2024-08-06) Grok 2 Beta</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Solved problems</head><p>Figure <ref type="figure">6</ref>: Performance of leading language models on FrontierMath based on a single evaluation. All models show consistently poor performance, with even the best models solving less than 2% of problems. When re-evaluating problems that were solved at least once by any model, o1-preview demonstrated the strongest performance across repeated trials (see Section B.2).</p><p>Based on a single evaluation of the full benchmark, we found that models solved very few problems (less than 2% success rate). Given this low success rate and the fact that we ran only one evaluation, the precise ordering of model performance should be interpreted with significant caution, as individual successes can have an outsized impact on rankings. To better understand model behavior on solved problems, we identified all problems that any model solved at least once-a total of four problems-and conducted repeated trials with five runs per model per problem (see Appendix B.2). We observed high variability across runs: only in one case did a model solve a question on all five runs (o1-preview for question 2). When re-evaluating these problems that were solved at least once, o1-preview demonstrated the strongest performance across repeated trials (see Section B.2).</p><p>Moreover, even when a model obtained the correct answer, this does not mean that its reasoning was correct. For instance, on one of these problems running a few simple simulations was sufficient to make accurate guesses without any deeper mathematical understanding. However, models' low overall accuracy shows that such guessing strategies do not work on the overwhelming majority of FrontierMath problems. We also ran each model five times per problem on our five public sample problems (see Appendix A), and made the transcripts publicly available.<ref type="foot" target="#foot_8">foot_8</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Number of responses and token usage</head><p>Our evaluation framework allows models to run experiments and reflect on their results multiple times before submitting a final answer. We found significant differences in how models use this opportunity. For example, o1-preview averages just 1.29 responses per problem, whereas Grok 2 Beta averages 3.81 responses. o1-preview and Gemini 1.5 Pro 002 typically submit a final answer before seeing any experimental results, despite explicit instructions that they can take time to experiment and wait until they are confident to make a final guess. In contrast, the other models show more extended interactions. This pattern is also reflected in token usage. Gemini 1.5 Pro 002 reaches the 10,000 token limit in only 16.8% of questions, while Claude 3.5 Sonnet, GPT-4o and Grok 2 Beta exceed this limit in more than 45% of their attempts. On average, Gemini 1.5 Pro uses the fewest tokens per question (around 6,000), while other models use between 12,000 and 17,000 tokens.<ref type="foot" target="#foot_9">foot_9</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related work</head><p>The evaluation of mathematical reasoning in AI systems has progressed through various benchmarks and competitions, each testing different aspects of mathematical capability. Here we review the major existing benchmarks and competitions, and discuss how FrontierMath advances this landscape.</p><p>Several established mathematics benchmarks focus on evaluating basic mathematical reasoning capabilities in AI systems. Datasets like GSM8K <ref type="bibr" target="#b5">(Cobbe et al. 2021</ref>) and MATH <ref type="bibr" target="#b12">(Hendrycks, Burns, Kadavath, et al. 2021)</ref> provide structured collections of elementary to undergraduate-level problems. While these benchmarks provided useful measures of capabilities in mathematical reasoning, state-of-the-art models now achieve near-perfect performance on many of them (see Figure <ref type="figure">2</ref>), limiting their utility for discriminating between model capabilities.</p><p>Recent work has developed more challenging benchmarks for evaluating mathematical reasoning. The Advanced Reasoning Benchmark (ARB) <ref type="bibr" target="#b23">(Sawada et al. 2023</ref>) combines university-level mathematics with contest problems, spanning undergraduate to early graduate-level topics. Several benchmarks have focused specifically on olympiad-level mathematics: OlympiadBench (C. <ref type="bibr" target="#b10">He et al. 2024</ref>) compiled 8,476 problems from mathematics and physics olympiads, PutnamBench <ref type="bibr" target="#b25">(Tsoukalas et al. 2024</ref>) draws from the Putnam Competition, and OmniMATH <ref type="bibr" target="#b7">(Gao et al. 2024</ref>) provides 4,428 problems sourced from international competitions (including IMO), Art of Problem Solving forums, and verified competition archives, with detailed domain categorization and difficulty scaling. While these benchmarks present more challenging problems than earlier datasets, their reliance on historical competition materials creates significant data contamination risks, as models may have been trained on the source materials or highly similar problems.</p><p>The AI Mathematical Olympiad (AIMO) (XTX Investments 2024), an initiative led by XTX Markets, aims to develop AI systems capable of achieving International Mathematical Olympiad gold medal performance. While AIMO creates novel national olympiad-level problems specifically designed to test advanced mathematical reasoning while avoiding data contamination risks, its requirement that runtime models be open-weight means that frontier AI models cannot be officially evaluated on the benchmark.</p><p>A parallel line of work explores formal mathematics benchmarks. The MiniF2F benchmark (Zheng, J. M. Han, and Polu 2021) provides 488 formally verified problems from mathematical olympiads and undergraduate courses, manually formalized across multiple theorem proving systems including Metamath, Lean, and Isabelle. While MiniF2F enables rigorous evaluation of neural theorem provers through machine-verified proofs, it faces similar data contamination concerns and focuses on competition-style problems rather than research mathematics.</p><p>FrontierMath addresses these fundamental limitations in three key ways. First, it eliminates data contamination concerns by featuring exclusively new, previously unpublished problems, ensuring models cannot leverage training on highly similar materials. Second, it raises the difficulty level beyond existing benchmarks by incorporating research-level mathematics across most branches of modern mathematics, moving beyond beyond both elementary problems and competition-style mathematics. Third, its automated verification system enables efficient, reproducible evaluation of any model-including closed source frontier AI systems-while maintaining high difficulty standards. This positions FrontierMath as a unique tool for evaluating progress toward research-level mathematical capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Interviews with mathematicians</head><p>We conducted interviews with four prominent mathematicians to gather expert perspectives on FrontierMath's difficulty, significance, and prospects: Terence Tao (2006 Fields Medalist), Timothy Gowers (1998 Fields Medalist), Richard Borcherds (1998 Fields Medalist), and Evan Chen, a renowned mathematics educator and IMO coach.<ref type="foot" target="#foot_10">foot_10</ref> </p><p>Assessment of FrontierMath difficulty All four mathematicians characterized the research problems in the Frontier-Math benchmark as exceptionally challenging, noting that the most difficult questions require deep domain expertise and significant time investment. For example, referring to a selection of several questions from the dataset, Tao remarked, "These are extremely challenging. I think that in the near term basically the only way to solve them, short of having a real domain expert in the area, is by a combination of a semi-expert like a graduate student in a related field, maybe paired with some combination of a modern AI and lots of other algebra packages..." However, some mathematicians pointed out that the numerical format of the questions feels somewhat contrived. Borcherds, in particular, mentioned that the benchmark problems "aren't quite the same as coming up with original proofs."</p><p>Expected timeline for FrontierMath progress The mathematicians expressed significant uncertainty about the timeline for AI progress on FrontierMath-level problems, while generally agreeing these problems were well beyond current AI capabilities. Tao anticipated that the benchmark would "resist AIs for several years at least," noting that the problems require substantial domain expertise and that we currently lack sufficient relevant training data.</p><p>The interviewees anticipated human-AI collaboration would precede full automation. Chen and Tao both suggested that human experts working with AI systems could potentially tackle FrontierMath problems within around three years, much sooner than fully autonomous AI solutions. As Tao explained, on advanced graduate level questions, guiding current AI systems to correct solutions takes "about five times as much effort" as solving them directly-but he expected this ratio to improve below 1 on certain problems within a few years with sufficient tooling and capability improvements.</p><p>Key barriers to FrontierMath progress A major challenge the mathematicians identified was the extremely limited training data available for FrontierMath's specialized research problems. As Tao noted, for many FrontierMath problems, the relevant training data is "almost nonexistent...you're talking like a dozen papers with relevant things." Gowers emphasized that solving these problems requires familiarity with "the tricks of the trade of some particular branch of maths"-domain knowledge that is difficult to acquire without substantial training data. The mathematicians discussed potential approaches to address data limitations, including synthetic data generation and formal verification methods to validate solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Potential uses of FrontierMath-capable systems</head><p>The mathematicians interviewed identified several potential contributions from AI systems capable of solving FrontierMath-level problems. As Gowers noted, such systems could serve as powerful assistants for "slightly boring bits of doing research where you, for example, make some conjecture that would be useful, but you're not quite sure if it's true... it could be a very, very nice time saving device." Tao similarly emphasized their value for routine but technically demanding calculations, suggesting that a system performing at FrontierMath's level could help mathematicians tackle problems that currently "take weeks to figure out." However, several interviewees cautioned that the practical impact would depend heavily on computational costs. As Tao observed regarding current systems like AlphaProof, "if your amazing tool takes three days of compute off of all of Google to solve each problem...then that's less of a useful tool." The mathematicians generally agreed that AI systems at FrontierMath's level would be most valuable as supplements to human mathematicians rather than replacements, helping to verify calculations, test conjectures, and handle routine technical work while leaving broader research direction and insight generation to humans.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion</head><p>In this paper, we introduced FrontierMath, a new benchmark composed of a challenging set of mathematical problems spanning most branches of modern mathematics. FrontierMath focuses on highly challenging math problems, with an emphasis on research-level problems, whose solutions require multiple hours of concentrated effort by expert mathematicians. We found that leading AI models cannot solve over 2% of the problems in the benchmark. We have further qualitatively validated the difficulty of the problems by sharing a sample of ten problems to four expert mathematicians, including three Fields medal winners, who uniformly assessed the problems as exceptionally difficult.</p><p>FrontierMath addresses two key limitations of previous math benchmarks such as the MATH dataset <ref type="bibr" target="#b12">(Hendrycks, Burns, Kadavath, et al. 2021</ref>) and GSM8K <ref type="bibr" target="#b5">(Cobbe et al. 2021)</ref>. First, it focuses on exceptionally challenging problems that require deep reasoning and creativity, including research-level mathematics, preventing saturation with current leading AI systems. Second, by using exclusively novel, unreleased problems, it helps prevent data contamination, reducing the risk that models succeed through pattern matching against training data. Despite these strengths, FrontierMath has several important limitations. First, the practical focus on automatically verifiable and numerical answers excludes proof-writing and open-ended exploration, which are significant parts of modern math research. Second, while our problems are substantially more challenging than existing benchmarks, requiring hours of focused work from expert mathematicians, they still fall short of typical mathematical research, which often spans weeks, months or even years of sustained investigation. By limiting problems to hours instead of months, we make the benchmark practical but miss testing crucial long-term research skills.</p><p>Another limitation is that current AI models cannot solve even a small fraction of the problems in our benchmark. While this demonstrates the high difficulty level of our problems, it temporarily limits FrontierMath's usefulness in evaluating relative performance of models. However, we expect this limitation to resolve as AI systems improve.</p><p>Evaluating AI systems' mathematical capabilities will provide valuable insights into their potential to assist with complex mathematical research. Beyond mathematics, the precise chains of reasoning and creative synthesis required in these problems serve as an important proxy for broader scientific thinking. Through its high difficulty standards and rigorous verification framework, FrontierMath offers a systematic way to measure progress in advanced reasoning capabilities as AI systems evolve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Future work</head><p>We will further develop the FrontierMath benchmark by introducing new, rigorously vetted problems. These new problems will follow our established data collection and review process, with enhanced quality assurance procedures to reduce answer errors and improve the accuracy of difficulty ratings. We will also release another set of representative sample problems to showcase the benchmark's depth and variety.</p><p>We will further experiment with different evaluation methodologies to better assess the mathematical proficiency of today's leading models. For example, we will test the effects of increasing the token limit, allowing models to reason for longer and run more experiments per problem. We also plan to conduct multiple runs for each model-problem pair, enabling us to report statistics and confidence intervals across attempts. These evaluations will help us better understand how different evaluation parameters affect model performance on advanced mathematical reasoning tasks.</p><p>Through FrontierMath, we are setting a new standard of difficulty for evaluating complex reasoning capabilities in leading AI systems. At Epoch AI, we are committed to maintaining FrontierMath as a public resource and regularly conducting comprehensive evaluations of leading models. We will continue working with mathematicians to produce new problems, perform quality assurance, validate difficulty scores, and provide transparent and authoritative assessments of AI systems' mathematical reasoning abilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Sample problems and solutions</head><p>This section presents five problems from the FrontierMath benchmark, with one chosen at random from each quintile of difficulty. The problems are arranged in decreasing order of difficulty, from research-level number theory to undergraduate algebraic geometry. Background levels indicate the prerequisite knowledge required, while creativity and execution ratings reflect hours of innovative thinking and technical rigor needed respectively.</p><p>Problem Author Background Creativity Execution MSC Key Techniques 1 (A.1) O. Järviniemi Research 4 15 11 Frobenius elts., Artin symbols 2 (A.2) A. Kite Research 3 4 14, 20, 11 Monodromy, branch loci 3 (A.3) D. Chicharro Graduate 3 3 11 p-adic analysis, recurrences 4 (A.4) P. Enugandla Graduate 2 3 20 Coxeter groups, characters 5 (A.5) A. Gunning HS/Undergr. 2 2 14, 11 Hasse-Weil Bound Figure 7: MSC2020 codes: 11 (Number Theory), 14 (Algebraic Geometry), 20 (Group Theory and Generalizations)<ref type="foot" target="#foot_11">foot_11</ref> A.1 Sample problem 1 -high difficulty A.1.1 Problem Definitions. For a positive integer n, let v p (n) denote the largest integer v such that p v | n.</p><p>For p a prime and a ̸ ≡ 0 (mod p), we let ord p (a) denote the smallest positive integer o such that a o ≡ 1 (mod p). For x &gt; 0, we let ord p,x (a) = q≤x q prime q vq(ordp(a)) q&gt;xq prime q vq(p-1) .</p><p>Problem. Let S x denote the set of primes p for which ord p,x (2) &gt; ord p,x (3), and let d x denote the density</p><formula xml:id="formula_0">d x = |S x | |{p ≤ x : p is prime}| of S x in the primes. Let d ∞ = lim x→∞ d x .</formula><p>Compute<ref type="foot" target="#foot_12">foot_12</ref> ⌊10 6 d ∞ ⌋.</p><p>Answer: 367707</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1.2 Solution</head><p>We will break this into multiple sections.</p><p>Background First of all, the presence of the x-parameter is a technicality; informally, we are just asking for the density of primes p such that ord p (2) &gt; ord p (3).</p><p>The motivation of this problem comes from Artin's primitive conjecture which asks: for which integers a are there infinitely many primes p such that a is a primitive root modulo p? This is equivalent to requesting ord p (a) = p -1, i.e. ind p (a) = 1.</p><p>Artin's conjecture is open. For our purposes, the relevant fact is that the conjecture has been solved on the assumption of a generalization of the Riemann hypothesis (for zeta functions of number fields). This was done by C. Hooley in 1967.</p><p>The key idea is that a is a primitive root mod p if and only if there is no n &gt; 1 such that a is an nth power modulo p for some n | p -1. One can try to compute the number of such primes p not exceeding x with an inclusion-exclusion argument. The Chebotarev density theorem gives us asymptotics for |{p ≤ x : p ≡ 1 (mod n), a is a perfect nth power modulo p}| (1)</p><p>for any fixed n.</p><p>Bounding the error terms is what we need the generalization of Riemann's hypothesis for (c.f.: the standard RH bounds the error term in the prime number theorem); we don't know how to do it without.</p><p>For concreteness, if a = 2, then a is a primitive root modulo p for roughly 37% of primes. See <ref type="url" target="https://mathworld.wolfram.com/ArtinsConstant.html">https://mathworld. wolfram.com/ArtinsConstant.html</ref>. In general, the density is strictly positive as long as a is not a perfect square nor -1 (in which case there are no such primes p &gt; 3). The density is not quite 37% in all cases -see below for more on this.</p><p>This argument is very general: it can be adapted to look at primes p such that ord p (2) = ord p (3) = p -1, or ord p (2) = (p -1)/a, ord p (3) = (p -1)/b for fixed a, b ∈ Z + , or ord p (2) = ord p (3), or -you guessed itord p (2) &gt; ord p (3). The "bounding the error terms" part is no more difficult in these cases, and no non-trivial complications arise. But we of course still can't do it without GRH.</p><p>We replaced ord p (a) with ord p,x (2) for the reason of deleting the error terms, and for this reason only. As a result, when one does the inclusion-exclusion argument, there are only a finite number of terms needed, and thus we only need asymptotic formulas for (1), rather than any sharp bounds for the error term.</p><p>So the question then is about computing the main terms. To do so, one needs to be able to compute asymptotics for (1).</p><p>In the case a = 2, it turns out that ( <ref type="formula">1</ref>) is asymptotically 1/ϕ(n)n for any square-free n. In some cases, like for a = 4 and a = 5, this is not the case: For a = 4, take n = 2. For a = 5, this fails for n = 10, since p ≡ 1 (mod 5) implies that 5 is a square modulo p -this is related to the fact that √ 5 ∈ Q(ζ 5 ). But it turns out that there is always only a small, finite number of revisions one needs to make to the argument, allowing for the computation of the main terms.</p><p>There are a few papers considering generalizations of Artin's conjecture. It is known that the density of primes p for which ord p (2) &gt; ord p (3) is positive (as a special case of a more general result), this again under GRH, but the task of computing that density has not been carried out in the literature, justifying the originality of this problem. There is a fair amount of legwork and understanding needed to do this. (2) (a) These formulas are "quasi-multiplicative": they can be written in the form</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Solution outline</head><formula xml:id="formula_1">d(a, b) = f (v 2 (a), v 3 (a), v 2 (b), v 3 (b)) 5≤q≤x g q (v q (a), v q (b)).</formula><p>(b) f and g q are explicit functions that can be evaluated in O(1) time.</p><p>2. For any fixed a, the sum </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">We have, for any x</head><formula xml:id="formula_2">∞ &gt; x ≥ 10 8 , a&lt;b,a≤T |d(a, b, x ∞ ) -d(a, b, x)| ≤ 1 9x .</formula><p>Then, taking T = 10 5 and x = 10 8 , we get an answer that has error at most 2.5 • 10 -8 . This then gives 7 correct decimal places.</p><p>Step 1 In this part, we fix a, b ∈ Z + , and we'll compute the density of primes p satisfying (2).</p><p>For (2) to hold, we need 2 to be a perfect ath power (and p ≡ 1 (mod a)), but "no more": 2 should not be an aqth power for any prime q (such that p ≡ 1 (mod aq)). Similarly for b. It's convenient to frame these propositions in terms of algebraic number theory.</p><formula xml:id="formula_3">Let K = Q(ζ lcm(a,b) , 2 1/a , 3 1/b</formula><p>), and for each prime q let K 1,q = Q(ζ aq , 2 1/aq ) and K 2,q = Q(ζ bq , 3 1/bq ). We want to compute the density of primes p such that p splits in K, but doesn't split in K i,q for any i ∈ {1, 2}, 2 ≤ q ≤ x.</p><p>There is an "obvious guess" for what that density should be, by naively assuming that different values of q are independent (e.g. 2 being a fifth power shouldn't provide evidence on whether 2 is a seventh power), and that there are no "spurious correlations" (e.g. 2 being a fifth power shouldn't provide evidence on whether 3 is a fifth power or not). This intuition is almost correct: it makes a small, finite number of mistakes, namely at the primes q = 2 and q = 3.</p><p>There are two reasons for this:</p><formula xml:id="formula_4">• ζ 3 ∈ Q(ζ 4 , √ 3), since ζ 3 = (1 + √ -3)/2. • √ 2 ∈ Q(ζ 8</formula><p>), since we have (1 + i) 2 = 2i, and thus</p><formula xml:id="formula_5">1 + i = ζ 8 • √ 2.</formula><p>Crucially, the only relations between ζ N , 2 1/N and 3 1/N are these two. The following two well-known lemmas formalize this:</p><formula xml:id="formula_6">Lemma 1. Denote K n = Q(ζ n , 2 1/n , 3 1/n ).</formula><p>Let N be an arbitrary positive integer. <ref type="foot" target="#foot_14">15</ref> Let q 1 , q 2 , . . . , q k be pairwise distinct primes greater than three. The fields</p><formula xml:id="formula_7">K 6 N , K q N 1 , . . . , K q N k</formula><p>are linearly disjoint <ref type="foot" target="#foot_15">16</ref> . Furthermore, the degrees [K q N i : Q] are equal to ϕ(q N i )q 2N i ("the maximum possible").</p><p>Proof. We apply several results of Järviniemi 2020. Recall that Q(ζ q N 1 ), . . . , Q(ζ q N K ) are linearly disjoint. We can append K 6 N to the set while maintaining disjointness, since the largest cyclotomic subfield of</p><formula xml:id="formula_8">K 6 N lies in Q(ζ 2•6 N , √ 2, √ 3) ⊂ Q(ζ 2•6 N , ζ 8 , ζ 12</formula><p>) (see Proposition 3.14 of the paper). Then, throwing in elements of the form 2 1/q N i and 3 1/q N i maintains linear disjointness, because the degrees of the resulting field extensions are powers of q i , and those are coprime. For the claim about maximality of degrees, apply Proposition 3.9 with n = q N i , K = Q(ζ n ), k = n 2 , with a i the numbers 2 q x i 3 q y i for 0 ≤ x, y &lt; N ; the quotients of such numbers are not nth powers in K by Corollary 3.6. QED.</p><p>Of course, the claim about linear disjointness and the degrees being the maximum possible now holds for subfields of K 6 N , K q N 1 , . . . , K q N k , too; we'll be using this fact throughout. At the primes q = 2, q = 3 we lose a factor of 4, as promised earlier:</p><p>Lemma 2. For N ≥ 3 we have</p><formula xml:id="formula_9">[K 6 N : Q] = ϕ(6 N )6 2N 4 .</formula><p>Proof. Apply Proposition 3.9 with n = 6</p><formula xml:id="formula_10">N , K = Q(ζ n ), k = n 2 /4</formula><p>, with a i the numbers 2 2 x 3 y 3 2 z 3 w , where 0 ≤ x, y, z, w &lt; N and x, z &lt; N/2. The quotients of such numbers are not nth powers, again by Corollary 3.6. QED With these tools, we'll now attack the problem of computing d(a, b). Assume x is large enough that q | ab =⇒ q ≤ x (otherwise just replace a → q≤x q vq(a) ).</p><p>By the Chebotarev density theorem, the density of primes p splitting in a field K is [K : Q].<ref type="foot" target="#foot_16">foot_16</ref> Thus, by inclusionexclusion,</p><formula xml:id="formula_11">d(a, b, x) = n1,n2:p|ni =⇒ p≤x µ(n 1 )µ(n 2 ) [Q(ζ lcm(an1,bn2) , 2 1/an1 , 3 1/bn2 ) : Q] .</formula><p>By the first lemma, this sum is "quasi-multiplicative" in the sense that prime powers q n with q &gt; 3 can be factored out.</p><p>Explicitly, if we denote a ′ = 2 v2(a) 3 v3(a) and define b ′ similarly, we have</p><formula xml:id="formula_12">d(a, b, x) = n1,n2∈{1,2,3,6} µ(n 1 )µ(n 2 ) [Q(ζ lcm(a ′ n1,b ′ n2) , 2 1/a ′ n1 , 3 1/b ′ n2 ) : Q] × 5≤q≤x   n1,n2∈{1,q} µ(n 1 )µ(n 2 ) [Q(ζ lcm(q vq (a) n1,q vq (b) n2) , 2 1/q vq (a) n1 , 3 1/q vq (b) n2 ) : Q]   .</formula><p>The first sum over {1, 2, 3, 6} 2 depends only on v 2 (a), v 2 (b), v 3 (a), v 3 (b), and the sums over {1, q} 2 only depend on v q (a), v q (b). This proves 1(a).</p><p>For claim 1(b), we first note that for q ≥ 5, the fields in the sum have "the maximum degree" (remember the remark about the conclusion of Lemma 1 applying to subfields, too): that is, we have</p><formula xml:id="formula_13">[Q(ζ lcm(q vq (a) n1,q vq (b) n2) , 2 1/q vq (a) n1 , 3 1/q vq (b) n2 )] = ϕ(lcm(q vq(a) n 1 , q vq(b) n 2 ))q vq(a)+vq(b) n 1 n 2 .</formula><p>So these sums can be computed. (Writing the formulas down explicitly isn't necessary, since we can now write a program that computes the values.)</p><p>For the sum over n 1 , n 2 ∈ {1, 2, 3, 6}, we need to be a bit more careful about the degrees to account for the two failures-in-maximality mentioned earlier. Denote the degree of</p><formula xml:id="formula_14">Q(ζ lcm(a ′ n1,b ′ n2) , 2 1/a ′ n1 , 3 1/a ′ n2 ) by D(a ′ n 1 , b ′ n 2 )</formula><p>. By Lemma 2 (and by knowing where the factor of 4 there comes from), we can compute D(x, y). Indeed, we have That is, we have D(x, y) = ϕ(lcm(x, y))xy • C(gcd(x, 24), gcd(y, 24)), where C : {1, 2, . . . , 24} 2 → {1, 1/2, 1/4} is explicitly given by the list above. Now, our sum can be written as</p><formula xml:id="formula_15">n1,n2∈{1,2,3,6} µ(n 1 )µ(n 2 ) ϕ(lcm(a ′ n 1 , b ′ n 2 ))a ′ n 1 b ′ n 2 C(gcd(a ′ n 1 , 24), gcd(b ′ n 2 , 24)) ,</formula><p>which can be computed in O(1) time.</p><p>Step 2 Now, we fix a, and aim to evaluate the sum</p><formula xml:id="formula_16">a&lt;b d(a, b, x) = ∞ b=1 d(a, b, x) - a b=1 d(a, b, x).</formula><p>The second sum can be evaluated with brute force, and is thus not of interest to us here. Consider then the first sum. We can just forget about b altogether here: because we are summing over all of b, we are imposing no constraint on ord p,x (3); that is, we are only demanding ord p,x (2) = (p -1)/a.<ref type="foot" target="#foot_17">foot_17</ref> </p><p>Now, the density d(a, x) of p such that ord p,x (2) = (p -1)/a can be computed similarly to the computations in Part 1. But it's much simpler: note that [Q(ζ n , 2 1/n ) : Q] is always at least nϕ(n)/2 -we lose only a factor of 2, not a factor of 4 like in Lemma 2, since we only have the failure at 8 | n coming from √ 2 ∈ Q(ζ 8 ). And so our formula is multiplicative:</p><formula xml:id="formula_17">d(a, x) = 2≤q≤x n∈{1,q} µ(n) [Q(ζ q vq (a) n , q 1/q vq (a) n ) : Q] .</formula><p>Furthermore, the terms are easy to calculate: If q &gt; 2, then they are 1 ϕ(q vq(a) )q vq(a) 1 -</p><formula xml:id="formula_18">1 q 2 .</formula><p>For q = 2, the values are (for v q (a) = 0, 1, 2, . . .)</p><formula xml:id="formula_19">1 2 , 3 8 , 1 16 , 3 64 , 3 256 , 3<label>1024</label></formula><p>, . . .</p><p>Step 3 We now want to bound tail sums of d(a, b, x); the basic idea is to give pointwise bounds for d(a, b, x) and then sum those bounds.</p><p>Lemma 3. For any a, b and x we have</p><formula xml:id="formula_20">d(a, b, x) ≤ 4 ϕ(lcm(a, b))ab .</formula><p>The proof is simple: the condition ord p,x (2) = (p -1)/a, ord p,x (3) = (p -1)/b in particular implies that p splits in</p><formula xml:id="formula_21">Q(ζ lcm(a,b) , 2 1/a , 3 1/b</formula><p>), which has at least degree ϕ(lcm(a, b))ab/4 -see the previous two lemmas.</p><p>Here is a very basic tail sum bound.</p><p>Lemma 4. We have lim</p><formula xml:id="formula_22">T →∞ a,b≤T d(a, b, x) = 1.</formula><p>For the proof, note that The inner sum is O(log T ). For the outer sum, we have well-known bound ϕ(a) ≫ √ a, and so a&gt;T 1/(aϕ(a)) ≪ 1/ √ T , so the whole sum is O(log T / √ T ) = o(1).</p><p>Further note that d(1, 2, x) is strictly positive (roughly 12.5%). Together with the previous lemma this implies that the density of p with ord p,x (2) &gt; ord p,x (3) equals (An intuitive but non-trivial, technical claim -we in fact haven't proven such results if x is replaced with ∞, and this is the reason Artin's primitive conjecture is still open.)</p><p>Now, we want quantitative, strong bounds for</p><formula xml:id="formula_23">T &lt;a&lt;b d(a, b, x).</formula><p>For this, we'll use the fact that</p><formula xml:id="formula_24">ϕ(n) ≥ c 1 n c 2 δ ,</formula><p>where c 1 = 92160, c 2 = 510510, δ = 46/47. (See <ref type="url" target="https://math.stackexchange.com/questions/301837/is-the-euler-phi-function-bounded-below">https://math.stackexchange.com/questions/301837/ is-the-euler-phi-function-bounded-below</ref>.) We have</p><formula xml:id="formula_25">T &lt;a&lt;b d(a, b, x) ≤ 4 T &lt;a&lt;b 1 ϕ(lcm(a, b))ab &lt; 2c δ 2 c 1 T &lt;a,b 1 ablcm(a, b) 1+δ . Continue: 2c δ 2 c 1 T &lt;a,b 1 ablcm(a, b) δ = 2c δ 2 c 1 T &lt;a,b gcd(a, b) δ (ab) 1+δ ≤ 2c δ 2 c 1 ∞ d=1 d δ T /d&lt;a ′ ,b ′ 1 (da ′ db ′ ) 1+δ = 2c δ 2 c 1 ∞ d=1 d -2-δ   T /d&lt;n 1 n 1+δ   2 .</formula><p>The inner sum is bounded by</p><formula xml:id="formula_26">∞ T /d 1/t 1+δ dt = δ -1 (T /d) -δ (plus 1 for d &gt; T ).</formula><p>And thus, the above is bounded as</p><formula xml:id="formula_27">2c δ 2 c 1 δ 2 ∞ d=1 d -2-δ d T 2δ + 1 d&gt;T .</formula><p>The sum over d without the 1 d&gt;T part can be bounded numerically for δ = 46/47 as 13, and the 1 d&gt;T part introduces an additional (small) contribution of T -1-δ /(1 + δ), and so we arrive at</p><formula xml:id="formula_28">2c δ 2 c 1 δ 2 13T -2δ + T -1-δ /(1 + δ) . For T = 10 5 this is less than 2 • 10 -8 .</formula><p>Step 4 We want to bound the difference that arises from replacing a particular value of x in d(a, b, x) with an arbitrarily large value of x = x ∞ . Recall the function g q (v q (a), v q (b)) from Part 1. We have g q (0, 0) = 1-2/q(q-1)+1/q 2 (q-1). In particular, q&gt;x is prime</p><formula xml:id="formula_29">g q (0, 0) ≥ q&gt;x is prime 1 - 2 (q -1) 2 .</formula><p>Now, when 0 ≤ t ≤ 1/100, we have 1 -t • 0.99 ≥ e -t , so the above is bounded from below by q&gt;x is prime e -1.98/(q-1) 2 ≥ exp</p><formula xml:id="formula_30">  q&gt;x is prime -1.98/(q -1) 2   .</formula><p>For y ≥ 10 8 , there are at most 1.1y/ log(y) primes in the interval [y, 2y), and thus by dyadic decomposition q&gt;x is prime</p><formula xml:id="formula_31">1.98 (q -1) 2 ≤ y=2 k x,k≥0 1.98 y 2 1.1y log(y) = 1.98 • 1.1 x k≥0 1 2 k (k log(2) + log(x))</formula><p>, which for x ≥ 10 8 is numerically bounded by 1/9x. Thus, we arrive at the lower bound</p><formula xml:id="formula_32">exp(-1/9x) ≥ 1 - 1 9x .</formula><p>Thus, for any</p><formula xml:id="formula_33">x ∞ &gt; x &gt; max(a, b) (the last condition needed so that v q (a) = v q (b) = 0 for q ≥ x) with x ≥ 10 8 , we have 0 ≥ d(a, b, x ∞ ) -d(a, b, x) ≥ d(a, b, x)(1 - 1 9x ) -d(a, b, x) ≥ 1 9x d(a, b, x).</formula><p>And, since a&lt;b,a≤T d(a, b, x) ≤ 1, we have</p><formula xml:id="formula_34">a&lt;b,a≤T |d(a, b, x ∞ ) -d(a, b, x)| ≤ 1 9x .</formula><p>The code Finally, we have posted to GitHub a C++ script for efficiently computing the answer. You can find it at <ref type="url" target="https://github.com/epoch-research/artin_code/">https://github.com/epoch-research/artin_code/</ref>. The first 120 lines are prime sieves, gcd, fast exponentiation and other standard boilerplate. The next 80 lines are for computing various expressions arising in the explicit formulas for the density of (2), after which is a function for actually computing that density. This is done once more but one-dimensionally -see Step 2. The main function computes the answer to the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Sample problem 2 -high-medium difficulty</head><p>Problem Construct a degree 19 polynomial p(x) ∈ C[x] such that X := {p(x) = p(y)} ⊂ P 1 × P 1 has at least 3 (but not all linear) irreducible components over C. Choose p(x) to be odd, monic, have real coefficients and linear coefficient -19 and calculate p(19).</p><p>Answer 1876572071974094803391179</p><p>Solution Note that p(x) defines a covering p : P 1 x → P 1 z of degree 19 which at z = ∞ has monodromy σ ∞ , a 19-cycle, which without loss of generality is (1, 2, 3, . . . 19).</p><p>Note that X is just the fibre product of p with p (which in general is a singular curve) and therefore p(x) also defines a finite map p : X → P 1 z of degree 19 2 (if we prefer to stick with smooth schemes, we can instead use the normalisation X of X, and we will freely move between the irreducible components of X and the corresponding connected components of the smooth X with its covering structure).</p><p>The idea then is that any such covering p can be studied using group theory via its monodromy. Specifically, suppose q : X → P 1 z is of degree n and has branch locus B ⊂ P 1 z .Then if you follow the fibres around each branch value and see how this permutes the points in the fibres, we get a homomorphism q : π 1 (P 1 z -B, x) → Im(ϕ) := G q ⊂ S n (defined up to conjugation) and X is irreducible exactly when q is transitive. Moreover, if X is reducible, then the irreducible components correspond to the G q -orbits in S n .</p><p>Suppose p with branch locus B (including ∞) is encoded as p : G p ⊂ S 19 . Then we can check that p has branch locus B and is encoded diagonally as p2 : G p ⊂ S 2 19 . So we are looking for some G p ⊂ S 19 that has between 3 and 18 orbits in S 2 19 . In particular G p is not doubly transitive on S 19 . Recall a theorem of Burnside <ref type="bibr" target="#b2">(Burnside 1911</ref>): for q prime and a permutation group G ⊂ S q , either G is doubly transitive or |G| divides q(q -1).</p><p>Applying this and Sylow's theorem to our G p , we see that the order 19 subgroup ⟨σ ∞ ⟩ ⊂ G p is normal. Now take any σ i ∈ G p and suppose σ i fixes at least 2 points (wlog 1 and n). Then by normality, σ i σ ∞ σ -1 i = σ s ∞ for some s ∈ Z. Writing this out explicitly, we must have n = 1 + (n -1)s mod p and hence s = 1. Therefore plugging in 1 to</p><formula xml:id="formula_35">σ i σ ∞ σ -1 i = σ ∞ gives σ i (2) = 2.</formula><p>Continuing in this way, we conclude all non-trivial elements σ i must have at most 1 fixed point.</p><p>Applying Riemann-Hurwitz to p, we have 19 -1 = Σ r Index(σ r ) where r enumerates the branch points in B, σ r is the corresponding permutation over r and Index geometrically is the ramification index-1. Since each non-trivial σ i fixes at most 1 point, we have that Index(σ i ) ≥ (19 -1)/2 = 9, with the lower bound corresponding to precisely 9 disjoint transpositions. Therefore Riemann-Hurwitz implies r ≤ 2. If r = 1, we have exactly one 19-cycle, which would give rise to 19 irreducible components. So the only possibility is r = 2 and Index(σ i ) = 9 i.e. σ i consist of 9 disjoint transpositions for i = 1, 2. Explicitly if we assume wlog that σ 1 contains (1, 2) then the relation σ 1 σ 2 = σ ∞ (coming from the topology of P 1 -B) implies that σ 2 contains (2, 19) and continuing we find σ 1 = (1, 2)(3, 19)(4, 18) . . . and σ 2 = (2, 19)(3, 18) . . .. By the Riemann existence theorem, a polynomial with specified monodromy is essentially unique (up to affine scaling of the target and source) and is given by the degree 19 Chebyshev polynomial T 19 (x) (which can be checked has this cycle structure). One checks that it has exactly the diagonal in S 2 19 and 9 other orbits, giving 10 irreducible components. This proof therefore shows that the only possibility is a polynomial affine equivalent to T 19 (x) i.e. of the form AT 19 (ax + b) + B. Moreover, one can check that, except for the diagonal, all the remaining components are quadratic in both variables, hence of bi-degree (2,2).</p><p>Finally we impose the desired properties of p(x). Since T 19 (x) is odd, p(x) being odd implies b = 0 and B = 0. p(x) monic implies A * a 19 * 2 18 = 1 and the linear of coefficient of p(x) is -19 * A * a = -19. Solving gives A = 1/a and a 18 = 1/2 18 . Real coefficients means a = ±1/2 and hence p(x) = 2 * T 19 (x/2). p(x) = 2T 19 (x/2), the degree 19 Chebyshev polynomial, which has 10 irreducible components (including the diagonal). Therefore p(19) = 1876572071974094803391179.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Sample problem 3 -medium difficulty</head><p>Problem Let a n for n ∈ Z be the sequence of integers satisfying the recurrence formula</p><formula xml:id="formula_36">a n = 198130309625a n-1 + 354973292077a n-2 -427761277677a n-3 + 370639957a n-4</formula><p>with initial conditions a i = i for 0 ≤ i ≤ 3. Find the smallest prime p ≡ 4 mod 7 for which the function Z → Z given by n → a n can be extended to a continuous function on Z p .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answer 9811</head><p>Solution The idea of the solution comes from the Skolem-Mahler-Lech theorem. Let α 1 , . . . , α 4 be the roots of the characteristic polynomial of the recurrence, this is,</p><formula xml:id="formula_37">x 4 -198130309625x 3 -354973292077x 2 + 427761277677x -370639957.</formula><p>Then we have the explicit formula</p><formula xml:id="formula_38">a n = c 1 α n 1 + c 2 α n 2 + c 3 α n 3 + c 4 α n 4</formula><p>for all n ∈ Z, where the coefficients c i are determined by the initial conditions. We can think of the roots α i as elements of some extension L of Q p of degree ≤ 4!. Let π be a uniformiser of L, and denote by v L the π-adic valuation normalised so that v L (p) = 1 (in particular, v L (π) = 1/e).</p><p>Note that the independent coefficient 370639957 is prime, so all the roots α i have v L (α i ) = 0 for any prime p &lt; 370639957. As we shall see, the prime we are looking for is indeed &lt; 370639957.</p><p>Let us prove that whenever all the roots satisfy v L (α i -1) &gt; 0, then there exists the required extension of n → a(n) to Z p . If this is the case, then α i ≡ 1 mod π, so in particular For this prime the characteristic polynomial reduces mod p to</p><formula xml:id="formula_39">-370639957 = α 1 α 2 α 3 α 4 ≡ 1 mod p.</formula><p>x 4 -4x 3 + 6x 2 -4x + 1 = (x -1) 4 so indeed the four roots are ≡ 1 mod p.</p><p>Let us show now how to do the extension of n → a(n). By the formula above, we need to extend α n to a function on Z p , and as in real analysis this is accomplished via the exponential and the logarithm. The main problem is that log x converges only for v p (x -1) &gt; 0 in Z p . In our case this is true, so we can simply write</p><formula xml:id="formula_40">a n = i c i α n i = i c i exp(n log α)</formula><p>and this clearly extends to the continuous function</p><formula xml:id="formula_41">f (x) = i c i exp(x log α).</formula><p>(Note that f is unique since Z is dense in Z p ).</p><p>For other primes p for which the roots are not 1 mod π, the extension to Z p is not possible. This is because of the following. For simplicity let us assume that the roots α i all lie in Z p (this happens exactly when the characteristic polynomial splits completely modulo p). The general case is done similarly but with some care.</p><p>Since the projection map Z × p → F × p induces an isomorphism between the group of (p -1)th roots of unities and F × p , for every α ∈ Z × p we can find some (p -1)th roots of unity ζ α such that α ≡ ζ α mod p. Hence, v p (α/ζ α -1) &gt; 0, so log(α/ζ α ) exists. Hence, Thus, defining for each 0 ≤ k ≤ p -2 the function</p><formula xml:id="formula_42">a n = i c i α n i = i c i ζ n αi (α i /ζ αi ) n = i c i ζ n αi exp(n log(α i /ζ αi )),</formula><formula xml:id="formula_43">a (k) (x) = i c i ζ k αi exp(x log(α i /ζ αi ))</formula><p>then we have a (k) (n) = a n if n ≡ k mod p -1. Thus, we can extend the function n → a n from the set S k = {n ≡ k mod p -1} to its closure Z p . But each of the functions a (k) (x) is different, so they are not compatible. be the subset of all tuples (A 1 , A 2 , A 3 , A 4 ) satisfying the conditions:</p><formula xml:id="formula_44">A 2 i = I, for all 1 ≤ i ≤ 4 A i A j = A j A i , if {3j -i, 3i -j} ∩ 5Z &gt;0 = ∅ A i A j A -1 i A -1 j = A j A i , if {3j -i, 3i -j} ∩ 5Z &gt;0 ̸ = ∅,</formula><p>where 5Z &gt;0 refers to the set of positive multiples of 5, i.e., 5Z &gt;0 = {5, 10, 15, . . . }.</p><p>The group G = GL(1000) of invertible complex 1000 × 1000 matrices acts on S by the formula:</p><formula xml:id="formula_45">B • (A 1 , A 2 , A 3 , A 4 ) = (BA 1 B -1 , BA 2 B -1 , BA 3 B -1 , BA 4 B -1 ).</formula><p>Find the number of orbits of this action, i.e., find |S/G|.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answer 625243878951</head><p>Solution Let V be a 1000 dimensional complex vector space, with some chosen basis. Then using the fact that the A i satisfy precisely the Coxeter relations for the symmetric group S 5 , we deduce that the data of A 1 , . . . , A 4 is just a representation of S 5 in V . More precisely, the set of (i, j) ∈ {1, 2, 3, 4} 2 such that 3j -i ∈ 5Z &gt;0 is precisely {(1, 2), (2, 4), (4, 3)}. This shows that the "braid relation" only occurs for these three pairs, and all other pairs just give commutation relations.</p><p>Declaring that the transpositions (1 2), (2 3), (3 4), (4 5) act on V as multiplication respectively by A 1 , A 2 , A 4 and A 3 gives a representation of S 5 on V . The action of GL(1000) just gives the matrices of the same representation but with respect to different bases. Therefore, the number of orbits of this action is exactly the number of 1000 dimensional representations of S 5 up to isomorphism.</p><p>From the character table of S 5 , we see that the irreducible representations of S 5 have dimensions 1, 1, 4, 4, 5, 5, 6. Thus the number we are looking for is the number of ways to write 1000 as a sum of 1, 4, 5, 6 (with two different kinds of 1, 4, 5 each). This is precisely the coefficient of t 1000 in the power series</p><formula xml:id="formula_46">(1 + t + t 2 + • • • ) 2 (1 + t 4 + t 8 + • • • ) 2 (1 + t 5 + t 10 + • • • ) 2 (1 + t 6 + t 12 + • • • ),</formula><p>which is equal to the power series</p><formula xml:id="formula_47">1 (1 -t) 2 (1 -t 4 ) 2 (1 -t 5 ) 2 (1 -t 6 )</formula><p>.</p><p>The above coefficient can be computed to be 625243878951.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.5 Sample problem 5 -low difficulty</head><p>Problem How many nonzero points are there on</p><p>x 3 y + y 3 z + z 3 x = 0 over F 5 18 up to scaling?</p><p>Answer 3814708984376</p><p>Solution Using the code presented in Figure <ref type="figure" target="#fig_12">8</ref>  We can also verify this curve is smooth at p = 5 and has genus 3.</p><p>The Weil conjectures <ref type="bibr" target="#b8">(Garcia 2001)</ref> gives us</p><formula xml:id="formula_48">|C[F p n ]| = p n - 2g i=1 α n i + 1</formula><p>for some complex α i of absolute value √ p which come in conjugate pairs. <ref type="bibr" target="#b14">(Ji 2021)</ref> We notice α j = e (2j+1)iπ/6 √ 5 satisfies this equation.</p><p>To show that this is unique, let α i be roots of z</p><formula xml:id="formula_49">2 - √ 5β i z + 5, i = 1, 2, 3. Then α 2 i are roots od z 2 -5T 2 (β i )z + 25 and α 3 i are roots of z 2 - √ 125T 3 (β i )z + 215</formula><p>, where T 2 and T 3 are the 2nd and 3rd Chebyshev polynomials. So we know</p><formula xml:id="formula_50">β 1 + β 2 + β 3 = T 2 (β 1 ) + T 2 (β 2 ) + T 2 (β 3 ) = T 3 (β 1 ) + T 3 (β 2 ) + T 3 (β 3 ) = 0.</formula><p>So, knowing the values of β 1 + β 2 + β 3 , β 2 1 + β 2 2 + β 2 3 and β 3 1 + β 3 2 + β 3 3 gives you the b i (and so the (α i ) uniquely). Setting n = 18 gives us the result:</p><formula xml:id="formula_51">|C[F 5 18 ]| = 5 18 + 6 • 5 9 + 1.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Evaluation B.1 Prompts</head><p>To guide the models effectively in solving the complex mathematical problems, we wrote prompts that encourage mathematical reasoning, writing code for experiments, and adherence to formatting requirements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initial Prompt</head><p>The initial prompt introduces the problem and provides detailed instructions. It explains how the model can submit Python code enclosed in triple backticks (''') to run experiments. It explains how to submit a final answer: the submitted code should contain the exact comment # This is the final answer, and pickle dump the answer to a file named final_answer.p. Finally, the prompt reminds the model that it cannot natively perform arithmetic and algebra, and therefore encourages it to use Python code to verify this reasoning.</p><p>Continuation Prompts After each interaction, if the model has not yet arrived at a correct solution, we provide feedback based on the code execution results. The continuation prompt first includes any error messages, standard output, or indications of timeouts from the executed code. It then urges the model to keep working and try new approaches if stuck, and reminds it of the guidelines for submitting the final answer.</p><p>Final Prompt If the model has not submitted a correct answer within token limit, we provide a final prompt that informs the model that the answer is needed now and instructs it to submit the best attempt. This final prompt reiterates the requirements for the final answer code block.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initial prompt</head><p>I am presenting you with a mathematical problem that you need to solve. This problem does not require high performance computing or parallel processing to solve. Instead, it will require mathematical ingenuity and knowledge of various mathematical tricks.</p><p>Writing Python code You have the ability to write Python code that we will execute through a command line to perform experiments. This is an ability you should take advantage of to solve this problem. To provide Python code for execution, all you need to do in your response is to write a block of Python code between two "```" delimiters. We will execute all such blocks of code and provide you with the results. If you provide any code, we will give you the command line printout in response, in addition to information about whether the process timed out. Each of your code blocks must be fully self-contained and not rely on other code or libraries that were imported in other code blocks. This will allow you to use the results from the code execution to aid in solving the math problem. Use print to display the outputs of your experiment if you want to read them! Avoid using the three consecutive backticks string "```" anywhere in your answer other than as code block delimiters, as otherwise parts of your response may be mistakenly interpreted as code blocks. Remember that you need to wait for a response from us about what the output of your code blocks were: you do not execute the code yourself. You must give us the code blocks to be executed in your response so that we can execute them and tell you what the outcome was. Please provide code for execution, even if you think it might require more computing resources than available. Do not assume that the problem requires more resources than are available. It does not. Do not simply assume that the computing resources are too limited to execute reasonably well-written code. They are not. If the code you write takes more than 20 seconds<ref type="foot" target="#foot_18">foot_18</ref> to execute, we will stop execution and tell you that it timed out. The problem is a very difficult mathematical problem, and you must approach it accordingly. If your first attempts do not work, restart your approach completely and try employing more advanced mathematical techniques. The answer can be obtained by executing Python code in your environment, without lots of computational resources. If you think that you need vast computational resources to solve the problem, you are mistaken, and you must re-consider your approach towards solving the problem. Continue working on this problem until you are confident that you have found the correct answer. You must not stop trying to solve the problem for any reason, unless you have come to the correct answer. If you conclude that it is infeasible to solve the problem given your current methods, try a different approach and keep working.</p><p>Submitting your final answer Once you're confident you have the correct answer, present it as a Python script, enclosed between "```" delimiters at the start and end as before, that satisfies the following two conditions:</p><p>• The script must contain the comment "# This is the final answer" exactly as written somewhere in it. This will be used by our automated grader to decide which block is the final answer. • The script must dump your final answer using the "pickle" module to a file named "final_answer.p" in the same directory as the script.</p><p>• This script must also be fully self-contained, and must execute correctly in less then 20 seconds 19 without relying on other functions or imports that you have previously written. This formatting is essential because your answer will be extracted from our conversation transcript by a script that recognizes only the code block that has the string "# This is the final answer" in it. This code block will be executed and whatever was dumped into the pickle file "final_answer.p" will be read by our grader and be taken as your final answer. You don't have to submit a final answer in your first response! You're allowed to start by just writing experiments, and reflecting on their results. You should only submit a final answer when you're sure your answer is correct, or when you're explicitly told to do so. Make sure that your final answer is of the right type signature. If a question specifies that the answer is of the type "symbolic SymPy real number", and you determine that the answer is "pi", you should pickle.dump the object "sympy.pi", not some other object such as "numpy.pi" or "3.141592". Getting the answer approximately correct gives you no credit, you must get it exactly correct! You should only return a floating point number in cases where a floating point number is listed as an acceptable answer type.</p><p>Performing mathematical operations It's crucial to remember that as a language model, you are not inherently equipped to perform mathematical operations reliably, including arithmetic and algebra. Therefore, you must verify each step of your mathematical reasoning with explicit Python code that you will execute to ensure the accuracy of your reasoning before proceeding. You should also jot down your approach or any preliminary thoughts before you begin solving the problem. Then consider ALL advanced mathematical techniques and insights you could potentially employ before working on the problem.</p><p>Here is the mathematical problem you need to solve:</p><p>1. Background: This rating ranges from 1 to 5 and indicates the level of mathematical background required to approach the problem. A rating of 1 corresponds to high school level, 2 to early undergraduate level, 3 to late undergraduate level, 4 to graduate level, and 5 to research level.</p><p>2. Creativity: Estimated as the number of hours an expert would need to identify the key ideas for solving the problem. This measure has no upper limit.</p><p>3. Execution: Similarly estimated as the number of hours required to compute the final answer once the key ideas are found, also with no upper limit.</p><p>To verify and refine the initial difficulty assessments, each problem underwent a peer-review process. Reviewers, who are also mathematicians, examined the problems along with the provided solutions and difficulty ratings. They assessed the correctness of the solutions, the clarity of the problem statements, and the accuracy of the initial difficulty ratings. Any discrepancies between the authors' ratings and the reviewers' assessments were discussed, and adjustments were made as needed to ensure that the difficulty ratings accurately reflected the problem's demands in terms of background knowledge, creativity, and execution.</p><p>This peer-review process not only validated the difficulty ratings but also enhanced the overall quality of the problem set by ensuring correctness and clarity.</p><p>Our initial analyses have shown that substantially easier problems that are not in this benchmark that have received higher difficulty ratings are significantly less likely to be solved by advanced AI models like GPT-4o, supporting the validity of our difficulty assessment system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Metadata collected</head><p>This is the metadata we collect on each problem. Writers put in their own suggestions for this metadata when submitting a problem, but this gets edited by the reviewers to ensure consistency of difficulty ratings and of the relative granularity of subject vs. technique classification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Metadata tag Description</head><p>Background rating A difficulty rating ranging from 1 to 5 quantifying how much background knowledge is required to solve the problem.</p><p>1: High school level 2: Early undergraduate level 3: Late undergraduate level 4: Graduate level 5: Research level</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Creativity rating</head><p>This rating is based on how long we think the average human expert with the requisite background knowledge would take to find the key ideas going into the solution of a problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Execution rating</head><p>Measures the amount of attention to detail and precise reasoning required to solve the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Subjects</head><p>A list of broad subjects that the question fits into: "analytic number theory", "representation theory", "differential geometry", etc. Note that a question can fit into more than one subject.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Techniques</head><p>A list of techniques, theorems, results, etc. that can be used to solve the problem. The list doesn't need to be exhaustive and only needs to contain the "most prominent" items that occur to the question author. Example: "generating functions", "double counting", "Vieta's theorem", etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Is programming required?</head><p>This is either "yes" or "no", depending on whether a human expert would require access to a programming environment in order to find the answer to the question.</p><p>Table 3: Table of metadata tags and their descriptions</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><figDesc>Sx denote the set of primes p for which ordp,x(2) &gt; ordp,x(3), and let dx denote the density dx = |Sx| |{p ≤ x : p is prime}| of Sx in the primes. Let d∞ = lim x→∞ dx. Compute ⌊10 6 d∞⌋. Answer: 367707 MSC classification: 11 Number theory</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><figDesc>MSC classification: 14 Algebraic geometry; 20 Group theory and generalizations; 11 Number theory generalizations Sample problem 3: Prime field continuous extensions Let an for n ∈ Z be the sequence of integers satisfying the recurrence formula 1 an = (1.981 × 10 11 )an-1 + (3.549 × 10 11 )an-2 -(4.277 × 10 11 )an-3 + (3.706 × 10 8 )an-4 with initial conditions ai = i for 0 ≤ i ≤ 3. Find the smallest prime p ≡ 4 mod 7 for which the function Z → Z given by n → an can be extended to a continuous function on Zp. Answer: 9811 MSC classification: 11 Number theory</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure3: Example verification script for an instance of Pell's equation: Find a tuple of integers (x, y) such that x 2 -7y 2 = 1. The left boxes show the code that produces and saves answers, the right box shows the verification script that evaluates them. A custom verification script is necessary here since the problem has infinitely many solutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Experimental framework for mathematical problem solving. The model can either provide a final answer directly or experiment with code execution before reaching a solution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><figDesc>Here are the key steps for verifying the correctness of the answer: 1. We have explicit (but cumbersome) formulas for the density d(a, b) = d(a, b, x) of primes p such that ord p,x (2) = (p -1)/a, ord p,x (3) = (p -1)/b</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><figDesc>a&lt;b d(a, b, x) can be evaluated in O(a) time. • Idea: We can write a&lt;b d(a, b, x) = ∞ b=1 d(a, b, x) -a b=1 d(a, b, x). The first sum is just the density of p : ord p,x (2) = (p -1)/a, which can be evaluated similarly to point 1 above. The second sum can be evaluated with brute force. 3. We have, for any T ≥ 100, roughly 14 T &lt;a&lt;b d(a, b, x) &lt; 114T -2•46/47 , (think of the exponent as -2 + ϵ), and thus we have | a&lt;b d(a, b, x) -a&lt;b,a≤T d(a, b, x)| &lt; 114T -2•46/47 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>•</head><figDesc>D(x, y) = ϕ(lcm(x, y))xy/4, if we have (8 | lcm(x, y) and 2 | x) and (12 | lcm(x, y) and 2 | y). • D(x, y) = ϕ(lcm(x, y))xy/2, if we have either (8 | lcm(x, y) and 2 | x) or (12 | lcm(x, y) and 2 | y), but not both • D(x, y) = ϕ(lcm(x, y))xy, if neither (8 | lcm(x, y) and 2 | x) nor (12 | lcm(x, y) and 2 | y) hold.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Hence, p</head><figDesc>must divide 370639957 + 1 = 370639958. The prime factors of this number are 2, 13, 1453 and 9811, of which only the last two are ≡ 4 mod 7. Similarly, we have 198130309625 ≡ α 1 + α 2 + α 3 + α 4 ≡ 4 mod p so 198130309625 -4 = 198130309621 must be multiple of p. The prime factors are 37, 673, 811, 9811, so the only possible prime is p = 9811.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><figDesc>log(α i /ζ αi )).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>A. 4</head><label>4</label><figDesc>Sample problem 4 -medium-low difficulty Problem Let M 4 1000 be the set of 4-tuples of invertible 1000 × 1000 matrices with coefficients in C. Let S ⊂ M 4 1000</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Python implementation of a projective solution counter, used to identify the pattern in solution counts over finite fields F 5 , F 25 , and F 125 .</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>See Appendix A.3 for precise coefficients.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>In particular, FrontierMath contains problems across 70% of the top-level subjects in the MSC2020 classification excluding "00 General and overarching topics; collections", "01 History and biography", and "97 Mathematics education".</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>For example, if a problem requires factoring a large integer, this must be doable from a standard algorithm.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>In theory, we could have accepted formalized proofs in Lean or other formal languages as a problem solution format. However, this presents two challenges. Firstly, current AI models are often not trained to write formalized proofs in specialized languages. We wanted to ensure that the problems were measuring genuine reasoning skills, rather than skill at writing formalized proofs. Secondly, Lean's mathematical library, mathlib, doesn't fully cover the undergraduate math curriculum (Lean Community 2024), let alone the scope of research math, which limits the fields such a benchmark could measure.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>See Section 2.5 for discussion on our ongoing effort to normalize these ratings.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>While we endeavored to adhere strictly to these protocols, we acknowledge that, in some cases, standard email clients were used when communicating about a subset of the problems outside our immediate team.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6"><p>We limited our plagiarism checking to problem statements only, excluding solutions to minimize online exposure. We specifically chose Quetext and Copyscape over more widely-used tools like Turnitin because they posed the lowest risk of our problems being stored in databases that might later be used to train AI models.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_7"><p>In unpublished preliminary work, we found that problems rated as more difficult correlate with lower solution rates by GPT-4o, providing some support for our difficulty assessment system. However, more systematic validation would be needed to make strong claims about the reliability of these ratings.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_8"><p>The transcripts can be downloaded at https://epochai.org/files/sample_question_transcripts.zip</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_9"><p>These averages can exceed the 10,000 token conversation limit because models that reach the limit still get to see the results of their final experiment and complete their final answer.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11" xml:id="foot_10"><p>Note that Evan Chen is also a co-author of this paper, and Terence Tao contributed several problems to the benchmark.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_11"><p>We thank Piotr Śniady for pointing out a typo in the problem statement of Sample 4, and Will McLafferty, Timothy Smits, and Frederick Vu for identifying errors in the originally given solution for Sample 5 in an earlier draft of the paper.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_12"><p>We have lowered the precision of this and several other problems which were written before the one-minute computation rule was finalized.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="14" xml:id="foot_13"><p>This omits a lower-order term.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_14"><p>Picture N as large, e.g. N = 100.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_15"><p>This is equivalent to the Galois group of the compositum (in this case, K (6q 1 •••q k ) N ) factorizing as the product of Galois groups of the individual fields: Gal(K (6q1 •••q k ) N /Q) ∼ = Gal(K 6 N /Q) × Gal(K q N 1 /Q) × • • • × Gal(K q N k /Q).(Another way of saying this is that the degree of the compositum is the product of the degrees of the individual fields.) For the non-expert, this is just a way of saying "these things are independent from each other".</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17" xml:id="foot_16"><p>Reminder for the non-expert: Splitting of primes in a number field is a somewhat technical concept, but for our purposes you only need to know that: p splitting in Q(ζn) is equivalent to p ≡ 1 (mod n), and p splitting in a field like Q(ζn, 2 1/a , 3 1/b ) (where we always assume lcm(a, b) | n) is equivalent to p ≡ 1 (mod n), 2 being an ath power and 3 being a bth power mod p. So "splitting" is exactly the thing we need.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="18" xml:id="foot_17"><p>Technical point: we're assuming here that limN→∞ a,b≤N d(a, b, x) = 1; see Step 3 for more on this.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="19" xml:id="foot_18"><p>For problems where authors expect a solution to take more than</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="20" xml:id="foot_19"><p>seconds to run, we removed this.</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>for coeffs in np . ndindex (( p ,) * k ) : </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Continuation prompt</head><p>Keep working. If you're stuck, make sure to try new approaches. Don't be afraid to execute your code. Tell me if you feel confident about your answer and approach, and give me the solution if so. Ensure that any code block containing the comment "# This is the final answer" is indeed the final, complete solution that correctly computes the required sum and executes without modifications. Do not include the comment "# This is the final answer" in any code block unless it meets these criteria and can be run as-is to produce the accurate result and pickle dump it to a file named "final_answer.p". Also, remember the following:</p><p>• Use print to display the outputs of your experiment if you want to read them! Don't forget to do this, since for each code block we'll only show you the stdout and stderr. • Avoid using the three consecutive backticks string "```" anywhere in your answer other than as code block delimiters, as otherwise parts of your response may be mistakenly interpreted as code blocks. • If the final answer is specified as a SymPy real or rational number, be careful to not mix different libraries when expressing it: try to use pure SymPy expressions. For example, if the answer to a question is 1/sqrt( <ref type="formula">2</ref>) your final answer should be a pickle.dump of 1/sympy.sqrt(2), not of 1/math.sqrt(2). Only return a floating point number if the specified answer type includes floating point numbers as a possibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Final prompt</head><p>I need the answer now. Please submit your best guess at the solution, even if you think you aren't finished yet. Ensure that the solution is in the form of a code block that has the comment # This is the final answer somewhere in it, correctly pickle dumps the answer to a file named final_answer.p, and executes without modifications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.2 Analysis of problems solved at least once</head><p>We selected four problems that could be solved by at least one model, and conducted repeated trials with five runs per model per problem. We report the success rate over the five trials of each model on each problem in </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.3 Percentage of unsolved problems across benchmarks</head><p>Figure <ref type="figure">2</ref> shows the fraction of problems not solved by the top-performing model on prominent mathematics benchmarks: the College Mathematics subset of MMLU <ref type="bibr" target="#b11">(Hendrycks, Burns, Basart, et al. 2021)</ref>, GSM8K <ref type="bibr" target="#b5">(Cobbe et al. 2021)</ref>, MATH <ref type="bibr" target="#b12">(Hendrycks, Burns, Kadavath, et al. 2021)</ref>, AIME (OpenAI 2024c), Omni-MATH <ref type="bibr" target="#b7">(Gao et al. 2024)</ref>, MathVista <ref type="bibr" target="#b16">(Lu et al. 2024)</ref>, and FrontierMath.</p><p>To make this figure, we took one minus the top reported accuracy for each benchmark under the pass@1 setting. For MMLU, we used the o1 accuracy of 98.1% (OpenAI 2024c). For GSM8K, we used the Claude 3.5 Sonnet pass@1 accuracy of 96.4% <ref type="bibr">(Anthropic 2024a)</ref>. For MATH, we used o1's reported pass@1 accuracy of 94.8% (OpenAI 2024c).</p><p>For AIME, we used o1's reported pass@1 accuracy of 74% (OpenAI 2024c). For Omni-MATH, we took o1-mini's accuracy of 60.54% as reported on the benchmark leaderboard <ref type="bibr" target="#b7">Gao et al. 2024</ref>. For MathVista, we used o1's pass@1 accuracy of 73.9% (OpenAI 2024c). Finally, for FrontierMath, we relied on our own evaluation, which shows that more than 98% of the problems remain unsolved by the best-performing models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Difficulty ratings</head><p>Our approach to difficulty rating involves a combination of expert self-assessment and rigorous peer review to ensure the reliability and consistency of the ratings. Each problem author provided an initial difficulty assessment along three key dimensions:</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><surname>Anthropic</surname></persName>
		</author>
		<ptr target="https://www-cdn.anthropic.com" />
		<title level="m">Claude 3.5 Sonnet Model Card Addendum</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note>d5857f8f304c52/Model_Card_Claude_3_Addendum.pdf</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="https://www.anthropic.com/news/3-5-models-and-computer-use" />
		<title level="m">Introducing computer use, a new Claude 3.5 Sonnet, and Claude 3.5 Haiku</title>
		<imprint>
			<date type="published" when="2024">2024b</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Theory of Groups of Finite Order</title>
		<author>
			<persName><forename type="first">W</forename><surname>Burnside</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1911">1911</date>
			<publisher>Cambridge Univ. Press</publisher>
			<pubPlace>2nd Ed</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">Evan</forename><surname>Chen</surname></persName>
		</author>
		<ptr target="https://web.evanchen.cc/upload/MOHS-hardness.pdf" />
		<title level="m">Math Olympiad Hardness Scale (MOHS)</title>
		<imprint>
			<date type="published" when="2024-10-29">2024. October 29. 2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<ptr target="https://blog.evanchen.cc/2024/01/05/mohs-was-a-mistake/" />
		<title level="m">MOHS was a mistake</title>
		<imprint>
			<date type="published" when="2024-10-29">2024b. October 29, 2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Training verifiers to solve math word problems, 2021</title>
		<author>
			<persName><forename type="first">Karl</forename><surname>Cobbe</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2110.14168" />
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Investigating data contamination in modern benchmarks for large language models</title>
		<author>
			<persName><forename type="first">Chunyuan</forename><surname>Deng</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2311.09783</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Omni-MATH: A Universal Olympiad Level Mathematic Benchmark For Large Language Models</title>
		<author>
			<persName><forename type="first">Bofei</forename><surname>Gao</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2410.07985</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Curves over Finite Fields Attaining the Hasse-Weil Upper Bound</title>
		<author>
			<persName><forename type="first">Arnaldo</forename><surname>Garcia</surname></persName>
		</author>
		<editor>Carles Casacuberta et al. Basel</editor>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Birkhäuser Basel</publisher>
			<biblScope unit="page" from="199" to="205" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Are We Done with MMLU?</title>
		<author>
			<persName><forename type="first">Aryo</forename><surname>Gema</surname></persName>
		</author>
		<author>
			<persName><surname>Pradipta</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2406.04127.GoogleAI</idno>
		<ptr target="https://ai.google.dev/gemini-api/docs/changelog" />
	</analytic>
	<monogr>
		<title level="m">Release notes</title>
		<imprint>
			<date type="published" when="2024">2024. 2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Olympiadbench: A challenging benchmark for promoting agi with olympiad-level bilingual multimodal scientific problems</title>
		<author>
			<persName><forename type="first">Chaoqun</forename><surname>He</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2402.14008</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">Dan</forename><surname>Hendrycks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Collin</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Steven</forename><surname>Basart</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2009.03300[cs.CY</idno>
		<ptr target="https://arxiv.org/abs/2009.03300" />
		<title level="m">Measuring Massive Multitask Language Understanding</title>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Measuring mathematical problem solving with the math dataset</title>
		<author>
			<persName><forename type="first">Dan</forename><surname>Hendrycks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Collin</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saurav</forename><surname>Kadavath</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2103.03874</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Equality of orders of a set of integers modulo a prime</title>
		<author>
			<persName><forename type="first">Olli</forename><surname>Järviniemi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1912.02554</idno>
		<ptr target="https://arxiv.org/abs/1912.02554" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note>math.NT</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">Caleb</forename><surname>Ji</surname></persName>
		</author>
		<ptr target="https://www.math.columbia.edu/~calebji/RH-curves.pdf" />
		<title level="m">The Weil Conjectures for Curves</title>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Missing undergraduate mathematics in mathlib</title>
		<ptr target="https://leanprover-community.github.io/undergrad_todo.html" />
		<imprint>
			<date type="published" when="2024">2024</date>
			<publisher>Lean Community</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">Pan</forename><surname>Lu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2310.02255[cs.CV</idno>
		<ptr target="https://arxiv.org/abs/2310.02255" />
		<title level="m">MathVista: Evaluating Mathematical Reasoning of Foundation Models in Visual Contexts</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">Curtis</forename><forename type="middle">G</forename><surname>Northcutt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonas</forename><surname>Anish Athalye</surname></persName>
		</author>
		<author>
			<persName><surname>Mueller</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2103.14749</idno>
		<ptr target="https://arxiv.org/abs/2103.14749" />
		<title level="m">Pervasive Label Errors in Test Sets Destabilize Machine Learning Benchmarks</title>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note>stat.ML</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><surname>Openai</surname></persName>
		</author>
		<ptr target="https://platform.openai.com/docs/models" />
		<title level="m">GPT-4o</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<ptr target="https://openai.com/index/introducing-openai-o1-preview/" />
		<title level="m">Introducing OpenAI o1-preview</title>
		<imprint>
			<date type="published" when="2024">2024b</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<ptr target="https://openai.com/index/learning-to-reason-with-llms/" />
		<title level="m">Learning to Reason with LLMs</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<ptr target="https://openai.com/index/openai-o1-mini-advancing-cost-efficient-reasoning/" />
		<title level="m">OpenAI o1-mini</title>
		<imprint>
			<date type="published" when="2024">2024d</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Mathematical discoveries from program search with large language models</title>
		<author>
			<persName><forename type="first">Bernardino</forename><surname>Romera-Paredes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">625</biblScope>
			<biblScope unit="page" from="468" to="475" />
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Arb: Advanced reasoning benchmark for large language models</title>
		<author>
			<persName><forename type="first">Tomohiro</forename><surname>Sawada</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2307.13692</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Solving olympiad geometry without human demonstrations</title>
		<author>
			<persName><forename type="first">Trieu</forename><forename type="middle">H</forename><surname>Trinh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">625</biblScope>
			<biblScope unit="page" from="476" to="482" />
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">PutnamBench: Evaluating Neural Theorem-Provers on the Putnam Mathematical Competition</title>
		<author>
			<persName><forename type="first">George</forename><surname>Tsoukalas</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2407.11214</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><surname>Xai</surname></persName>
		</author>
		<ptr target="https://x.ai/blog/grok-2" />
		<title level="m">Grok-2 Beta Release</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">AI Mathematical Olympiad -Progress Prize 1</title>
		<ptr target="https://kaggle.com/competitions/ai-mathematical-olympiad-prize" />
		<imprint>
			<date type="published" when="2024-04">2024. April 2024</date>
			<publisher>XTX Investments</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Benchmark Data Contamination of Large Language Models: A Survey</title>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Xu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2406.04244</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Minif2f: a cross-system benchmark for formal olympiad-level mathematics</title>
		<author>
			<persName><forename type="first">Kunhao</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jesse</forename><surname>Michael Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stanislas</forename><surname>Polu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2109.00110</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
