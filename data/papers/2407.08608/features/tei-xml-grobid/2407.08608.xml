<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FlashAttention-3: Fast and Accurate Attention with Asynchrony and Low-precision</title>
				<funder>
					<orgName type="full">Princeton Language and Intelligence</orgName>
					<orgName type="abbreviated">PLI</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability  status="unknown">
					<licence/>
				</availability>
				<date type="published" when="2024-07-16">July 16, 2024</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jay</forename><surname>Shah</surname></persName>
							<email>jayhshah@colfax-intl.com</email>
						</author>
						<author>
							<persName><forename type="first">Ganesh</forename><surname>Bikshandi</surname></persName>
							<email>ganesh@colfax-intl.com</email>
						</author>
						<author>
							<persName><forename type="first">Ying</forename><surname>Zhang</surname></persName>
							<email>yingz@meta.com</email>
						</author>
						<author>
							<persName><forename type="first">Vijay</forename><surname>Thakkar</surname></persName>
							<email>vithakkar@nvidia.com</email>
						</author>
						<author>
							<persName><forename type="first">Pradeep</forename><surname>Ramani</surname></persName>
							<email>prraman@nvidia.com</email>
						</author>
						<author>
							<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Princeton University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<address>
									<region>AI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Colfax</forename><surname>Research</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Georgia</forename><surname>Tech</surname></persName>
						</author>
						<title level="a" type="main">FlashAttention-3: Fast and Accurate Attention with Asynchrony and Low-precision</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2024-07-16">July 16, 2024</date>
						</imprint>
					</monogr>
					<idno type="MD5">8465562620D71599613A4E373CFCB46E</idno>
					<idno type="arXiv">arXiv:2407.08608v2[cs.LG]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-02-21T16:17+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Attention, as a core layer of the ubiquitous Transformer architecture, is the bottleneck for large language models and long-context applications. FlashAttention elaborated an approach to speed up attention on GPUs through minimizing memory reads/writes. However, it has yet to take advantage of new capabilities present in recent hardware, with FlashAttention-2 achieving only 35% utilization on the H100 GPU. We develop three main techniques to speed up attention on Hopper GPUs: exploiting asynchrony of the Tensor Cores and TMA to (1) overlap overall computation and data movement via warp-specialization and (2) interleave block-wise matmul and softmax operations, and (3) block quantization and incoherent processing that leverages hardware support for FP8 low-precision. We demonstrate that our method, FlashAttention-3, achieves speedup on H100 GPUs by 1.5-2.0× with FP16 reaching up to 740 TFLOPs/s (75% utilization), and with FP8 reaching close to 1.2 PFLOPs/s. We validate that FP8 FlashAttention-3 achieves 2.6× lower numerical error than a baseline FP8 attention.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>For the Transformer architecture <ref type="bibr" target="#b58">[59]</ref>, the attention mechanism constitutes the primary computational bottleneck, since computing the self-attention scores of queries and keys has quadratic scaling in the sequence length. Scaling attention to longer context will unlock new capabilities (modeling and reasoning over multiple long documents <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b42">43,</ref><ref type="bibr" target="#b49">50]</ref> and files in large codebases <ref type="bibr" target="#b29">[30,</ref><ref type="bibr" target="#b47">48]</ref>), new modalities (high-resolution images <ref type="bibr">[11]</ref>, audio <ref type="bibr" target="#b22">[23]</ref>, video <ref type="bibr" target="#b24">[25]</ref>), and new applications (user interaction with long history <ref type="bibr" target="#b52">[53]</ref>, agent workflow with long horizon <ref type="bibr" target="#b61">[62]</ref>). This has generated significant interest in making attention faster in the long-context regime, including by approximation <ref type="bibr">[14,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b55">56]</ref> and software optimization ( <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b44">45]</ref>), or even alternative architectures <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b54">55]</ref>.</p><p>In this work, we build on the work of Dao et al. <ref type="bibr" target="#b16">[17]</ref> on developing exact-attention algorithms that integrate knowledge of the GPU's execution model and hardware characteristics into their high-level design. In <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr">Dao et al.</ref> introduced FlashAttention, a novel tiling strategy for parallelizing attention that eliminates intermediate reads/writes to slow global memory through fusing all of the attention operations into a single GPU kernel. Dao <ref type="bibr" target="#b14">[15]</ref> restructured the algorithm as FlashAttention-2 to also parallelize over the sequence length dimension and perform the inner loop of the forward pass over blocks of the key and value matrices, thus improving the occupancy and distribution of work on the GPU. However, we observe that FlashAttention-2 nonetheless achieves poor utilization on newer GPUs relative to optimized matrix-multiplication (GEMM) kernels, such as 35% vs. 80-90% on the Hopper H100 GPU. Partially, this may be attributed to implementation-level differences, such as not using Hopper-specific instructions in place of Ampere ones when targeting the Tensor Cores. Several work such as ThunkerKitten <ref type="bibr" target="#b51">[52]</ref> and cuDNN 9 <ref type="bibr" target="#b38">[39]</ref> has shown that with Hopper-specific instructions and tile-based abstractions, one can speedup attention computation and simplify the implementation.</p><p>More fundamentally, FlashAttention-2's algorithm adheres to a simplified synchronous model and makes no explicit use of asynchrony and low-precision in its design. Asynchrony is a result of hardware specialization to accelerate the most important operations in a ML workload: specific hardware units performing matrix multiplication (Tensor Cores) or memory loading (Tensor Memory Accelerator -TMA), separate from the rest of the CUDA cores performing logic, integer, and floating point computation. Low precision such as FP8 in Hopper and FP4 in Blackwell, continuing the trend of FP16 (Pascal in 2017) and BF16 (Ampere in 2020), is a proven technique to get double or quadruple throughput for the same power and chip area. We review the capabilities afforded by Hopper in these directions in § 2.2. The technical challenge is to redesign FlashAttention-2 to make use of these hardware features: asynchrony requires overlapping computation between matmul and softmax even though one depends on the output of the other, and low-precision requires care to minimize quantization error, especially in the case of outlier features in LLMs <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b53">54]</ref>.</p><p>To this end, we propose FlashAttention-3, which contributes and synthesizes three new ideas to further improve performance on newer GPU architectures: 1   1. Producer-Consumer asynchrony: We define a warp-specialized software pipelining scheme that exploits the asynchronous execution of data movement and Tensor Cores by splitting producers and consumers of data into separate warps, thereby extending the algorithm's ability to hide memory and instruction issue latencies.</p><p>2. Hiding softmax under asynchronous block-wise GEMMs: We overlap the comparatively low-throughput non-GEMM operations involved in softmax, such as floating point multiply-add and exponential, with the asynchronous WGMMA instructions for GEMM. As part of this, we rework the FlashAttention-2 algorithm to circumvent certain sequential dependencies between softmax and the GEMMs. For example, in the 2-stage version of our algorithm, while softmax executes on one block of the scores matrix, WGMMA executes in the asynchronous proxy to compute the next block.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Hardware-accelerated low-precision GEMM:</head><p>We adapt the forward pass algorithm to allow for targeting the FP8 Tensor Cores for GEMM, nearly doubling the measured TFLOPs/s. This requires bridging the different layout conformance requirements of WGMMA in terms of how blocks of FP32 accumulator and FP8 operand matrices are assumed to be laid out in memory. We use the techniques of block quantization and incoherent processing to mitigate the loss of accuracy that results from moving to FP8 precision.</p><p>To validate our method empirically, we benchmark FlashAttention-3 on the H100 SXM5 GPU over a range of parameters and show that (1) FP16 achieves 1.5-2.0× speedup over FlashAttention-2 in the forward pass (reaching up to 740 TFLOPs/s) and 1.5-1.75× in the backward pass, (2) FP8 achieves close to 1.2 PFLOPs/s, and (3) for large sequence length, FP16 outperforms and FP8 is competitive 2 with a state-of-the-art implementation of attention from NVIDIA's cuDNN library. We also validate that FP16 FlashAttention-3 yields the same numerical error as FlashAttention-2 and is better than the standard attention implementation as intermediate results (e.g., softmax rescaling) are kept in FP32. Moreover, FP8 FlashAttention-3 with block quantization and incoherent processing is 2.6× more accurate than standard attention with per-tensor quantization in cases with outlier features.</p><p>We open-source FlashAttention-3 with a permissive license 3 and plan to integrate it with PyTorch and Hugging Face libraries to benefit the largest number of researchers and developers.</p><p>where softmax is applied row-wise and one typically sets 𝛼 = 1/ √ 𝑑 as the scaling factor. In practice, we subtract rowmax(S) from S to prevent numerical instability with the exponential function. For multi-head attention (MHA), each head has its own set of query, key and value projections, and this computation parallelizes across multiple heads and batches to produce the full output tensor. Now let 𝜙 be a scalar loss function and let d(-) = 𝜕𝜙/𝜕 (-) be notation for the gradient. Given the output gradient dO ∈ R 𝑁 ×𝑑 , we compute dQ, dK, and dV according to the chain rule as follows:</p><formula xml:id="formula_0">dV = P ⊤ dO ∈ R 𝑁 ×𝑑 dP = dOV ⊤ ∈ R 𝑁 × 𝑁 dS = dsoftmax(dP) ∈ R 𝑁 × 𝑁 dQ = 𝛼dSK ∈ R 𝑁 ×𝑑 dK = 𝛼dS ⊤ Q ∈ R 𝑁 ×𝑑 ,</formula><p>Here, we have that d𝑠 = (diag( 𝑝) -𝑝 𝑝 ⊤ )d𝑝 for 𝑝 = softmax(𝑠) as a function of a vector 𝑠, and we write dsoftmax(dP) for this formula applied row-wise. Finally, this computation again parallelizes across the number of heads and batches for the backward pass of MHA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">GPU hardware characteristics and execution model</head><p>We describe the aspects of the GPU's execution model relevant for FlashAttention-3, with a focus on the NVIDIA Hopper architecture as a concrete instantiation of this model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Memory hierarchy:</head><p>The GPU's memories are organized as a hierarchy of data locales, with capacity inversely related to bandwidth (Table <ref type="table" target="#tab_0">1</ref>) <ref type="foot" target="#foot_0">4</ref> . Global memory (GMEM), also known as HBM, is the off-chip DRAM accessible to all streaming multiprocessors (SMs). Data from GMEM gets transparently cached into an on-chip L2 cache. Next, each SM contains a small on-chip, programmer-managed highly banked cache called shared memory (SMEM). Lastly, there is the register file within each SM.</p><p>Thread hierarchy: The GPU's programming model is organized around logical groupings of execution units called threads. From the finest to coarsest level, the thread hierarchy is comprised of threads, warps (32 threads), warpgroups (4 contiguous warps), threadblocks (i.e., cooperative thread arrays or CTAs), threadblock clusters (in Hopper), and grids.</p><p>These two hierarchies are closely interlinked. Threads in the same CTA are co-scheduled on the same SM, and CTAs in the same cluster are co-scheduled on the same GPC. SMEM is directly addressable by all threads within a CTA, whereas each thread has at most 256 registers (RMEM) private to itself. Asynchrony and warp-specialization: GPUs are throughput processors that rely on concurrency and asynchrony to hide memory and execution latencies. For async memory copy between GMEM and SMEM, Hopper has the Tensor Memory Accelerator (TMA) as a dedicated hardware unit <ref type="bibr">[38, §7.29]</ref>. Furthermore, unlike prior architectures such as Ampere, the Tensor Core of Hopper, exposed via the warpgroup-wide WGMMA instruction <ref type="bibr">[40, §9.7.14]</ref>, is also asynchronous and can source its inputs directly from shared memory.</p><p>Hardware support for asynchrony allows for warp-specialized kernels, where the warps of a CTA are divided into producer or consumer roles that only ever issue either data movement or computation. Generically, this improves the compiler's ability to generate optimal instruction schedules <ref type="bibr">[4]</ref>. In addition, Hopper supports the dynamic reallocation of registers between warpgroups via setmaxnreg [40, §9.7.17.1], so those warps doing MMAs can obtain a larger share of RMEM than those just issuing TMA (for which only a single thread is needed).</p><p>Low-precision number formats: Modern GPUs have specialized hardware units for accelerating low-precision computation. For example, the WGMMA instruction can target the FP8 Tensor Cores on Hopper to deliver 2x the throughput per SM when compared to FP16 or BF16.</p><p>However, correctly invoking FP8 WGMMA entails understanding the layout constraints on its operands. Given a GEMM call to multiply 𝐴 × 𝐵 ⊤ for an 𝑀 × 𝐾-matrix 𝐴 and an 𝑁 × 𝐾-matrix 𝐵, we say that the 𝐴 or 𝐵 operand is mn-major if it is contiguous in the outer 𝑀 or 𝑁 dimension, and k-major if is instead contiguous in the inner 𝐾-dimension. Then for FP16 WGMMA, both mn-major and k-major input operands are accepted for operands in SMEM, but for FP8 WGMMA, only the k-major format is supported. Moreover, in situations such as attention where one wants to fuse back-to-back GEMMs in a single kernel, clashing FP32 accumulator and FP8 operand layouts pose an obstacle to invoking dependent FP8 WGMMAs.</p><p>In the context of attention, these layout restrictions entail certain modifications to the design of an FP8 algorithm, which we describe in § 3.3. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Standard Attention and Flash Attention</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">FlashAttention-3: Algorithm</head><p>In this section, we describe the FlashAttention-3 algorithm. For simplicity, we focus on the forward pass, with the backward pass algorithm described in Appendix B.1. We first indicate how to integrate warp-specialization with a circular SMEM buffer into the base algorithm of FlashAttention-2. We then explain how to exploit asynchrony of WGMMA to define an overlapped GEMM-softmax 2-stage pipeline. Finally, we describe the modifications needed for FP8, both in terms of layout conformance and accuracy via block quantization and incoherent processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Producer-Consumer asynchrony through warp-specialization and pingpong scheduling</head><p>Warp-specialization As with FlashAttention-2, the forward pass of FlashAttention-3 is embarrassingly parallel in the batch size, number of heads, and query sequence length. Thus, it will suffice to give a CTA-level view of the algorithm, which operates on a tile Q 𝑖 of the query matrix to compute the corresponding tile O 𝑖 of the output. To simplify the description, we first give the warp-specialization scheme with a circular SMEM buffer that does not have in addition the GEMM-softmax overlapping. Let 𝑑 be the head dimension, 𝑁 the sequence length, and fix a query block size</p><formula xml:id="formula_1">𝐵 𝑟 to divide Q into 𝑇 𝑟 = ⌈ 𝑁 𝐵 𝑟 ⌉ blocks Q 1 , .., Q 𝑇 𝑟 .</formula><p>Algorithm 1 FlashAttention-3 forward pass without intra-consumer overlapping -CTA view</p><p>Require:</p><formula xml:id="formula_2">Matrices Q 𝑖 ∈ R 𝐵 𝑟 ×𝑑 and K, V ∈ R 𝑁 ×𝑑 in</formula><p>HBM, key block size 𝐵 𝑐 with 𝑇 𝑐 = ⌈ 𝑁 𝐵 𝑐 ⌉. 1: Initialize pipeline object to manage barrier synchronization with 𝑠-stage circular SMEM buffer. 2: if in producer warpgroup then 3:</p><p>Deallocate predetermined number of registers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4:</head><p>Issue load Q 𝑖 from HBM to shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>Upon completion, commit to notify consumer of the load of Q 𝑖 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>for 0 ≤ 𝑗 &lt; 𝑇 𝑐 do 7:</p><p>Wait for the ( 𝑗 % 𝑠)th stage of the buffer to be consumed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8:</head><p>Issue loads of K 𝑗 , V 𝑗 from HBM to shared memory at the ( 𝑗 % 𝑠)th stage of the buffer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9:</head><p>Upon completion, commit to notify consumers of the loads of K 𝑗 , V 𝑗 . Reallocate predetermined number of registers as function of number of consumer warps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>13:</head><p>On-chip, initialize O 𝑖 = (0) ∈ R 𝐵 𝑟 ×𝑑 and ℓ 𝑖 , 𝑚 𝑖 = (0), (-∞) ∈ R 𝐵 𝑟 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>14:</head><p>Wait for Q 𝑖 to be loaded in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>15:</head><p>for 0 ≤ 𝑗 &lt; 𝑇 𝑐 do 16:</p><p>Wait for K 𝑗 to be loaded in shared memory.   Wait for V 𝑗 to be loaded in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>21:</head><p>Compute</p><formula xml:id="formula_3">O 𝑖 = diag(exp(𝑚 old 𝑖 -𝑚 𝑖 )) -1 O 𝑖 + P ( 𝑗 )</formula><p>𝑖 V 𝑗 (RS-GEMM). Commit and wait.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>22:</head><p>Release the ( 𝑗 % 𝑠)th stage of the buffer for the producer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>23:</head><p>end for 24:</p><p>Compute O 𝑖 = diag(ℓ 𝑖 ) -1 O 𝑖 and 𝐿 𝑖 = 𝑚 𝑖 + log(ℓ 𝑖 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>25:</head><p>Write O 𝑖 and 𝐿 𝑖 to HBM as the 𝑖th block of O and 𝐿.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>26: end if</head><p>For our implementation of Algorithm 1 on Hopper, we use setmaxnreg for (de)allocations, TMA for loads of Q 𝑖 and {K 𝑗 , V 𝑗 } 0≤ 𝑗&lt;𝑇 𝑐 , and WGMMA to execute the GEMMs in the consumer mainloop, with the SS or RS prefix indicating whether the first operand is sourced from shared memory or register file. For interpreting the execution flow of Algorithm 1, note that issuing TMA loads does not stall on the completion of other loads due to asynchrony. Moreover, in the producer mainloop, no waits will be issued for the first 𝑠 iterations as the buffer gets filled.</p><p>Pingpong scheduling The asynchronous nature of WGMMA and TMA, along with warp-specialization, opens up the opportunity to overlap the softmax computation of one warpgroup with the GEMM of another warpgroup. To motivate this, notice that non-matmul operations have much lower throughput than matmul operations on modern hardware accelerators. As an example, the H100 SXM5 GPU has 989 TFLOPS of FP16 matmul but only 3.9 TFLOPS of special functions such as exponential <ref type="foot" target="#foot_1">5</ref> (necessary for softmax). For the attention forward pass in FP16 with head dimension 128, there are 512x more matmul FLOPS compared to exponential operations, but the exponential has 256x lower throughput, so exponential can take 50% of the cycle compared to matmul. The situation is even worse with FP8, where the matmul throughput doubles but the exponential throughput stays the same.</p><p>Since the exponential is performed by a separate hardware unit (the multi-function unit), ideally we'd want the exponential calculation to be scheduled when the Tensor Cores are performing the matmul. To do so, we use synchronization barriers (bar.sync instructions) to force the GEMMs (GEMM1 -PV of one iteration, and GEMM0 -QK ⊤ of the next iteration) of warpgroup 1 to be scheduled before the GEMMs of warpgroup 2. As a result, the softmax of warpgroup 1 will be scheduled while warpgroup 2 is performing its GEMMs. Then the roles swap, with warpgroup 2 doing softmax while warpgroup 1 doing GEMMs (hence, "pingpong" scheduling). This is illustrated in Fig. <ref type="figure" target="#fig_5">1</ref>. Though in practice the pingpong scheduling is not as clean as depicted in the figure, we generally find this to improve performance (e.g., from 570 TFLOPS to 620-640 TFLOPS for FP16 forward with head dimension 128 and sequence length 8192). Attention variants For multi-query attention <ref type="bibr" target="#b50">[51]</ref> and grouped query attention <ref type="bibr">[3]</ref>, we follow the approach in FlashAttention-2 and adjust the tensor indexing to avoid duplicating K and V in HBM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Intra-warpgroup overlapping GEMMs and softmax</head><p>Even within one warpgroup, we can overlap some instructions in the softmax with some instructions in the GEMMs. We describe one technique to do so.</p><p>In the attention algorithm, operations within the inner loop (main loop) have sequential dependencies that impede parallelization within a single iteration. For example, (local) softmax (lines 18 to 19) relies on the output S ( 𝑗 ) 𝑖 of the first GEMM, while the second GEMM takes its result P ( 𝑗 ) 𝑖 as an operand. Indeed, the wait statements in lines 17 and 21 of Algorithm 1 serialize the execution of softmax and GEMMs. However, we can break these dependencies by pipelining across iterations through additional buffers in registers. Pursuing this idea, we propose the following two-stage<ref type="foot" target="#foot_2">foot_2</ref> GEMM-softmax pipelining algorithm: Wait for K 𝑗 to be loaded in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9:</head><p>Compute S next = Q 𝑖 K 𝑇 𝑗 using WGMMA. Commit but do not wait.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>10:</head><p>Wait for V 𝑗 -1 to be loaded in shared memory.</p><p>11:</p><p>Compute O 𝑖 = O 𝑖 + Pcur V 𝑗 -1 using WGMMA. Commit but do not wait.</p><p>12:</p><p>Wait for the WGMMA Q 𝑖 K 𝑇 𝑗 .</p><p>13:</p><p>Compute 𝑚 𝑖 , Pnext and ℓ 𝑖 based on S next .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>14:</head><p>Wait for the WGMMA Pcur V 𝑗 -1 and then rescale O 𝑖</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>15:</head><p>Release the ( 𝑗 % 𝑠)th, resp. ( 𝑗 -1 % 𝑠)th stage of the buffer for K, resp. V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>16:</head><p>Copy S next to S cur . 17: end for 18: Wait for V 𝑇 𝑐 -1 to be loaded in shared memory. Algorithm 2 functions as a replacement for the consumer path of Algorithm 1 to comprise the complete FlashAttention-3 algorithm for FP16 precision. At a high-level, we use WGMMA as a metonym for asynchronous GEMM. Within the mainloop (lines 8 to 16), the second WGMMA operation of iteration 𝑗 (line 11) is overlapped with softmax operations from iteration 𝑗 + 1 (line 13).</p><p>While the pipelined structure illustrated above offers theoretical performance gains, there are several practical aspects to consider:</p><p>Compiler reordering The pseudocode represents an idealized execution order but the compiler (NVCC) often rearranges instructions for optimization. This can disrupt the carefully crafted WGMMA and non-WGMMA operation pipelining sequence, potentially leading to unexpected behavior or diminished performance gains. An analysis of the SASS code shows that the compiler generates overlapped code as expected (Section B.2).</p><p>Register pressure To maintain optimal performance, register spilling should be minimized. However, the 2-stage pipeline requires additional registers to store intermediate results and maintain context between stages. Specifically, an extra S next must be kept in registers, leading to extra register usage of size 𝐵 𝑟 × 𝐵 𝑐 × sizeof(float) per threadblock. This increased register demand may conflict with using larger block sizes (another common optimization), which is also register-hungry. In practice, trade-offs should be made based on profiling results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3-stage pipelining</head><p>Extending the 2-stage algorithm described above, we propose a 3-stage variant that would further overlap the second WGMMA with softmax. While this approach offers the potential for even higher Tensor Core utilization, it requires even more registers due to an additional stage in the pipeline, making the trade-off between tile size and pipeline depth more difficult to balance. A detailed description of the 3-stage algorithm and its evaluation results can be found in Appendix B.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Low-precision with FP8</head><p>Efficiency: layout transformations. Computing the forward pass of FlashAttention-3 in FP8 precision poses additional challenges not encountered for FP16 in terms of layout conformance. T0 {d0, d1} T1 {d0, d1} T0 {d4, d5} T1 {d4, d5} T2 {d0, d1} T3 {d0, d1} T2 {d4, d5} T3 {d4, d5} T0 {d2, d3} T1 {d2, d3} T0 {d6, d7} T1 {d6, d7} T2 {d2, d3} T3 {d2, d3} T2 {d6, d7} T3 {d6, d7} T0 {a0, a1} T0 {a2, a3} T1 {a0, a1} T1 {a2, a3} T2 {a0, a1} T2 {a2, a3} T3 {a0, a1} T3 {a2, a3} T0 {a4, a5} T0 {a6, a7} T1 {a4, a5} T1 {a6, a7} T2 {a4, a5} T2 {a6, a7} T3 {a4, a5} T3 {a6, a7} First, we note that the input tensors Q, K, and V are typically given as contiguous in the head dimension, while to satisfy the k-major constraint on FP8 WGMMA for the second GEMM we need V, or rather the tiles of V loaded into SMEM, to be contiguous in the sequence length dimension. Since the TMA load itself cannot change the contiguous dimension, we then need to either (1) transpose V in GMEM as a pre-processing step, or (2) do an in-kernel transpose of tiles of V after loading them into SMEM. To implement option (1), we can either (1a) fuse the transpose to the epilogue of a preceding step such as the rotary embedding, or (1b) call a standalone pre-processing transpose kernel<ref type="foot" target="#foot_3">foot_3</ref> to exchange the strides of the sequence length and head dimensions. However, (1a) is difficult to integrate into a standard library, and (1b) is too wasteful in a memory-bound situation such as inference.</p><p>Instead, for FP8 FlashAttention-3 we opt for option <ref type="bibr">(2)</ref>. For the in-kernel transpose, we take advantage of the LDSM (ldmatrix) and STSM (stmatrix) instructions, which involve a warp of threads collectively loading SMEM to RMEM and storing RMEM to SMEM at a granularity of 128 bytes. <ref type="foot" target="#foot_4">8</ref> The LDSM/STSM instructions are both register efficient, allowing us to execute them in the producer warpgroup, and capable of transposing layouts when doing memory copy. Moreover, after the first iteration we can arrange for the transpose of the next V tile to be executed in the shadow of the two WGMMAs that involve the preceding V and current K tile.</p><p>Second, we observe that unlike with FP16, the memory layout of the FP32 accumulator of an FP8 WGMMA is different from that assumed for its operand A when held in registers. We depict fragments of these two layouts in Fig. <ref type="figure" target="#fig_8">3</ref> and Fig. <ref type="figure" target="#fig_9">4</ref>, where the entries are held in registers per thread in the listed order. By using byte permute instructions, we can then transform the first WGMMA's accumulator into a format suitable for the second WGMMA, and compatibly with the layout of the V tile produced by the in-kernel transpose. Specifically, with reference to Fig. <ref type="figure" target="#fig_8">3</ref>, we change the order in sequence to {d0 d1 d4 d5 d2 d3 d6 d7}, and this register permutation is then replicated over every 8 bytes. In terms of the logical shape of the P tile, this manuever permutes its columns (e.g., columns 0189 now become the first four columns). For WGMMA to then compute the correct output tile, we can correspondingly arrange for the in-kernel transpose to write out a matching row permutation of the V tile. <ref type="foot" target="#foot_5">9</ref>Accuracy: block quantization and incoherent processing. With FP8 (e4m3) format, one only uses 3 bits to store the mantissa and 4 bits for the exponent. This results in higher numerical error than FP16/BF16. Moreover, large models typically have outlier values <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b53">54]</ref> that are much larger in magnitude than most other values, making quantization difficult. One typically use per-tensor scaling <ref type="bibr" target="#b36">[37]</ref> by keeping one scalar per tensor (e.g., one for Q, for K, and for V). To reduce the numerical error of attention in FP8, we employ two techniques:</p><p>1. Block quantization: we keep one scalar per block, so that for each of Q, K, V we split the tensor into blocks of size 𝐵 𝑟 × 𝑑 or 𝐵 𝑐 × 𝑑 and quantize them separately. This quantization can be fused with an operation right before attention (e.g., rotary embedding) with no additional slow down (since rotary embedding is memory-bandwidth bound). As the FlashAttention-3 algorithm naturally operates on blocks, we can scale each block of S to account for this block quantization at no computation cost.</p><p>2. Incoherent processing: to even out outliers, we multiply Q and K with a random orthogonal matrix M before quantizing to FP8. Since M is orthogonal, MM ⊤ = 𝐼 and so (QM) (KM) ⊤ = QK ⊤ , i.e., multiplying both Q and K with M does not change the attention output. This serves to "spread out" the outliers since each entry of QM or KM is a random sum of entries of Q or K, thus reducing quantization error. In practice, we follow Chee et al. <ref type="bibr" target="#b8">[9]</ref> and Tseng et al. <ref type="bibr" target="#b57">[58]</ref> and choose M to be the product of random diagonal matrices of ±1 and a Hadamard matrix, which can be multiplied in 𝑂 (𝑑 log 𝑑) instead of 𝑂 (𝑑 2 ), and can also be fused with the rotary embedding at no extra computation cost.</p><p>We validate that these two techniques reduces numerical error by up to 2.6× in § 4.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Empirical Validation</head><p>We use the primitives from CUTLASS <ref type="bibr" target="#b56">[57]</ref> such as WGMMA and TMA abstractions to implement FlashAttention-3 and evaluate its efficiency and accuracy.</p><p>• Benchmarking attention. We measure the runtime of FlashAttention-3 across different sequence lengths and compare it to a standard implementation in PyTorch, FlashAttention-2, FlashAttention-2 in Triton (which uses H100-specific instructions), as well as a vendor's implementation of FlashAttention-2 optimized for H100 GPUs from cuDNN. We confirm that FlashAttention-3 is up to 2.0× faster than FlashAttention-2 and 1.5× faster than FlashAttention-2 in Triton. FlashAttention-3 reaches up to 740 TFLOPs/s, 75% of the theoretical maximum TFLOPs/s on H100 GPUs.</p><p>• Ablation study. We confirm that our algorithmic improvements with warp-specialization and GEMM-softmax pipelining contribute to the speedup of FlashAttention-3.</p><p>• Accuracy of FP8 attention. We validate that block quantization and incoherent processing reduces the numerical error of FP8 FlashAttention-3 by 2.6×.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Benchmarking Attention</head><p>We measure the runtime of different attention methods on an H100 80GB SXM5 GPU for different settings (without / with causal mask, head dimension 64 or 128) for FP16 inputs. We report the results in Fig. <ref type="figure" target="#fig_10">5</ref> and Fig. <ref type="figure">6</ref>, showing that FlashAttention-3 is around 1.5-2.0× faster than FlashAttention-2 in the forward pass and 1.5-1.75× faster in the backward pass. Compared to a standard attention implementation, FlashAttention-3 can be up to 3-16× faster. For medium and long sequences (1k and above), FlashAttention-3 even surpasses the speed of a vendor's library (cuDNN -closed source) that has been optimized for H100 GPUs.</p><p>Benchmark settings: We vary the sequence length as 512, 1k, ..., 16k, and set batch size so that the total number of tokens is 16k. We set the hidden dimension to 2048, and head dimension to be either 64, 128, or 256 (i.e., 32 heads, 16 heads, or 8 heads). To calculate the FLOPs of the forward pass, we use:</p><formula xml:id="formula_4">4 • seqlen 2 • head dimension • number of heads.</formula><p>With causal masking, we divide this number by 2 to account for the fact that approximately only half of the entries are calculated. To get the FLOPs of the backward pass, we multiply the forward pass FLOPs by 2.5 (since there are 2 matmuls in the forward pass and 5 matmuls in the backward pass, due to recomputation). We also measure the runtime for FP8 for the forward pass under similar settings. We report the results for headdim 256 in Fig. <ref type="figure" target="#fig_11">7</ref> and give the full results in Appendix C.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Ablation Study: 2-Stage Pipelining Experiments</head><p>We ablate both the 2-stage WGMMA-softmax pipelining and warp-specialization for non-causal FP16 FlashAttention-3 with fixed parameters {batch, seqlen, nheads, hdim} = {4, 8448, 16, 128}. The result in</p><p>Table 2 confirms that our algorithmic improvements (asynchrony with warp-specialization and overlapping between GEMM and softmax) lead to significant speedup, from 570 to 661 TFLOPs. 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 52 63 67 72 73 OOM 282 306 318 321 322 324 340 382 396 400 401 403 335 373 395 408 412 413 333 392 460 476 496 497 Attention forward speed, head dim 64 (H100 80GB SXM5) Standard attention FlashAttention-2 Triton cuDNN FlashAttention-3 (a) Forward, without causal mask, head dim 64 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 16 18 18 18 18 OOM 180 229 262 284 295 299 152 291 342 363 376 363 225 288 334 363 379 388 197 265 371 420 460 473 Attention forward speed, head dim 64 (H100 80GB SXM5) Standard attention FlashAttention-2 Triton cuDNN FlashAttention-3 (b) Forward, with causal mask, head dim 64 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 74 100 119 133 139 OOM 309 350 362 368 370 370 323 372 389 389 392 395 497 574 617 609 600 595 467 565 625 638 646 648 Attention forward speed, head dim 128 (H100 80GB SXM5) Standard attention FlashAttention-2 Triton cuDNN FlashAttention-3 (c) Forward, without causal mask, head dim 128 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 26 31 34 35 35 OOM 191 260 298 319 333 335 146 273 323 353 369 378 315 410 484 518 529 539 292 423 521 579 602 616 Attention forward speed, head dim 128 (H100 80GB SXM5) Standard attention FlashAttention-2 Triton cuDNN FlashAttention-3 (d) Forward, with causal mask, head dim 128 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 275 313 321 323 324 326 470 546 580 581 580 581 482 627 707 736 746 756 Attention forward speed, head dim 256 (H100 80GB SXM5) FlashAttention-2 cuDNN FlashAttention-3 (e) Forward, without causal mask, head dim 256 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 208 251 278 293 297 298 308 391 450 483 497 509 286 427 537 612 628 642 Attention forward speed, head dim 256 (H100 80GB SXM5) FlashAttention-2 cuDNN FlashAttention-3 (f) Forward, with causal mask, head dim 256 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Numerical Error Validation</head><p>As there has been interest in the numerical error <ref type="bibr" target="#b20">[21]</ref> of FlashAttention, we compare FlashAttention-2, FlashAttention-3, and a standard implementation of attention against a reference implementation in FP64.</p><p>To simulate outlier features and activations in LLMs [20, 54], we generate the entries of Q, K, V with the following 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 68 76 88 92 95 OOM 198 238 264 279 287 291 266 348 395 417 432 433 272 363 422 453 472 474 Attention backward speed, head dim 64 (H100 80GB SXM5) Standard attention FlashAttention-2 cuDNN FlashAttention-3 (a) Backward, without causal mask, head dim 64 512 1k 2k 4k 8k 16k Sequence length 200 400 600 Speed (TFLOPs/s) 104 131 159 174 181 OOM 214 260 291 310 318 322 305 408 465 499 518 516 316 424 501 542 559 561 Attention backward speed, head dim 128 (H100 80GB SXM5) Standard attention FlashAttention-2 cuDNN FlashAttention-3 (b) Backward, without causal mask, head dim 128 Figure 6: Attention backward speed (FP16/BF16) on H100 GPU 512 1k 2k 4k 8k 16k Sequence length 400 800 1200 Speed (TFLOPs/s) 529 664 766 854 897 903 686 878 1001 1087 1122 1139 510 744 931 966 1151 1171 Attention forward speed, head dim 256 (H100 80GB SXM5)</p><p>Triton cuDNN FlashAttention-3 (a) Forward, without causal mask, head dim 256 512 1k 2k 4k 8k 16k Sequence length 400 800 1200 Speed (TFLOPs/s) 299 425 520 591 628 663 304 449 768 1015 1056 1099 329 521 703 856 960 1024 Attention forward speed, head dim 256 (H100 80GB SXM5)</p><p>Triton cuDNN FlashAttention-3 (b) Forward, with causal mask, head dim 256  N (0, 1) + N (0, 100) • Bernoulli(0.001).</p><p>That is, each entry is normally distributed with zero mean and standard deviation 1, but for 0.1% of entries we add an independent term that's normally distributed with standard deviation 10. We then measure the root mean squared error (RMSE) in</p><p>Table 3. In FP16, both FlashAttention-2 and FlashAttention-3 achieves 1.7× lower RMSE compared to the standard implementation since intermediate results (softmax) are kept in FP32. The baseline attention in FP8 uses per-tensor scaling, with matmul accumulator in FP32 and intermediate softmax results kept in FP16. Thanks to block quantization and incoherent processing, FlashAttention-3 in FP8 is 2.6× more accurate than this baseline. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Dicussion, Limitations, Conclusion</head><p>With FlashAttention-3, we have demonstrated that new programming techniques and hardware features such as asynchrony and low-precision can have a dramatic impact on the efficiency and accuracy of attention. We are able to speed up attention by 1.5-2.0× times compared to FlashAttention-2, and reduce FP8 numerical error by 2.6× compared to standard per-tensor quantization. Some limitations of our work that we hope to address in the future include: optimizing for LLM inference, integrating a persistent kernel design into the FP8 kernel, <ref type="foot" target="#foot_6">10</ref> and understanding the effects of low-precision attention in large-scale training. Though we have focused on Hopper GPUs in this work, we expect that the techniques developed here will apply to other hardware accelerators. We hope that a faster and more accurate primitive such as attention will unlock new applications in long-context tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Addition Details on Algorithms</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.1 Asynchrony Through Warp Specialization for the Backward Pass</head><p>Similar to the forward pass § 3.1, we use warp specialization to handle asynchrony. Instead of just a simple producer-consumer pattern in the forward pass, we add one extra role of a dQ writer, since we need to accumulate the value of dQ produced by each thread block to the global value of dQ. This dQ accumulation introduces memory contention (many thread blocks writing to the same location) so having a separate warp to handle this (along with asynchrony) will avoid blocking the rest of the warps in the thread block to perform the next computation (matmul). We include the backward pass with warp specialization in Algorithm 3.</p><p>Algorithm 3 FlashAttention-3 backward pass with warp specialization Require: Matrices Q, K, V, O, dO ∈ R 𝑁 ×𝑑 in HBM, logsumexp vector 𝐿 ∈ R 𝑁 in HBM, block sizes 𝐵 𝑐 , 𝐵 𝑟 . 1: In a preprocessing kernel, compute 𝐷 = rowsum(dO • O) ∈ R 𝑑 (pointwise multiply), write 𝐷 to HBM and divide it into 𝑇 𝑟 blocks 𝐷 1 , . . . , 𝐷 𝑇 𝑟 of size 𝐵 𝑟 each. 2: Divide Q into 𝑇 𝑟 = 𝑁 𝐵 𝑟 blocks Q 1 , . . . , Q 𝑇 𝑟 of size 𝐵 𝑟 × 𝑑 each, and divide K, V in to 𝑇 𝑐 = 𝑁 𝐵 𝑐 blocks K 1 , . . . , K 𝑇 𝑐 and V 1 , . . . , V 𝑇 𝑐 , of size 𝐵 𝑐 × 𝑑 each. 3: Divide dO into 𝑇 𝑟 blocks dO 𝑖 , . . . , dO 𝑇 𝑟 of size 𝐵 𝑟 × 𝑑 each, and divide 𝐿 into 𝑇 𝑟 blocks 𝐿 𝑖 , . . . , 𝐿 𝑇 𝑟 of size 𝐵 𝑟 each. 4: Initialize pipeline object to manage barrier synchronization with 𝑠-stage circular SMEM buffer. 5: if in producer warpgroup then 6:</p><p>Deallocate predetermined number of registers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>Issue load K 𝑗 and V 𝑗 from HBM to shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8:</head><p>Upon completion, commit to notify consumer of the load of K 𝑗 and V 𝑗 . Wait for the (𝑖 % 𝑠)th stage of the buffer to be consumed.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Following</head><figDesc>Dao et al.<ref type="bibr" target="#b16">[17]</ref>, we let standard attention denote an implementation of attention on the GPU that materializes the intermediate matrices S and P to HBM. The main idea of FlashAttention was to leverage a local version of the softmax reduction to avoid these expensive intermediate reads/writes and fuse attention into a single kernel. Local softmax corresponds to lines 18-19 of the consumer mainloop in Algorithm 1 together with the rescalings of blocks of O. The simple derivation that this procedure indeed computes O can be found in[15,  §2.3.1].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><figDesc>𝑖= Q 𝑖 K 𝑇 𝑗 (SS-GEMM). Commit and wait. 18: Store 𝑚 old 𝑖 = 𝑚 𝑖 and compute 𝑚 𝑖 = max(𝑚 old 𝑖 , rowmax(S ( 𝑗 ) 𝑖 )).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><figDesc>𝑖 = exp(S ( 𝑗 ) 𝑖 -𝑚 𝑖 ) and ℓ 𝑖 = exp(𝑚 old 𝑖 -𝑚 𝑖 )ℓ 𝑖 + rowsum( P ( 𝑗 ) 𝑖 ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Pingpong scheduling for 2 warpgroups to overlap softmax and GEMMs: the softmax of one warpgroup should be scheduled when the GEMMs of another warpgroup are running. The same color denotes the same iteration.</figDesc><graphic coords="6,72.00,121.18,496.79,101.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 2 : 1 : 3 : 5 :</head><label>2135</label><figDesc>Figure 2: 2-stage WGMMA-softmax pipelining</figDesc><graphic coords="6,84.42,447.42,471.96,101.34" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>19 :</head><label>19</label><figDesc>Compute O 𝑖 = O 𝑖 + Plast V 𝑇 𝑐 -1 using WGMMA. Commit and wait. 20: Epilogue: Rescale O 𝑖 based on 𝑚 𝑖 . Compute 𝐿 𝑖 based on 𝑚 𝑖 and ℓ 𝑖 . Write O 𝑖 and 𝐿 𝑖 to HBM as the 𝑖-th block of O and 𝐿.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: FP32 accumulator register WGMMA layout -rows 0 and 8, threads 0-3, entries 0-7.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: FP8 operand A register WGMMA layout -rows 0 and 8, threads 0-3, entries 0-7.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Attention forward speed (FP16/BF16) on H100 GPU</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Attention forward speed (FP8) on H100 GPU</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>9 : 1 ≤</head><label>91</label><figDesc>for 𝑖 ≤ 𝑇 𝑟 do 10:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Thread-Memory hierarchy for the NVIDIA Hopper H100 SXM5 GPU.</figDesc><table><row><cell>Hardware Level Parallel Agent</cell><cell cols="2">Data Locale Capacity @ Bandwidth</cell></row><row><cell>Chip Grid</cell><cell>GMEM</cell><cell>80 GiB @ 3.35 TB/s</cell></row><row><cell cols="2">GPC Threadblock Clusters L2</cell><cell>50 MiB @ 12 TB/s</cell></row><row><cell>SM Threadblock (CTA)</cell><cell>SMEM</cell><cell>228 KiB per SM, 31TB/s per GPU</cell></row><row><cell>Thread Thread</cell><cell>RMEM</cell><cell>256 KiB per SM</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 2 :</head><label>2</label><figDesc>Pipelining ablation measurements</figDesc><table><row><cell>Configuration</cell><cell>Time</cell><cell>TFLOPs/s</cell></row><row><cell>FlashAttention-3</cell><cell cols="2">3.538 ms 661</cell></row><row><cell cols="3">No GEMM-Softmax Pipelining, Warp-Specialization 4.021 ms 582</cell></row><row><cell cols="3">GEMM-Softmax Pipelining, No Warp-Specialization 4.105 ms 570</cell></row><row><cell>distribution:</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 3 :</head><label>3</label><figDesc>Numerical error comparisons in FP16 and FP8 (e4m3).</figDesc><table><row><cell cols="5">Method Baseline FP16 FlashAttention-2 FP16 FlashAttention-3 FP16</cell></row><row><cell></cell><cell>RMSE</cell><cell>3.2e-4</cell><cell>1.9e-4</cell><cell>1.9e-4</cell></row><row><cell cols="5">Method Baseline FP8 FlashAttention-3 FP8 No block quant No incoherent processing</cell></row><row><cell>RMSE</cell><cell>2.4e-2</cell><cell>9.1e-3</cell><cell>9.3e-3</cell><cell>2.4e-2</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_0"><p>Luo et al.<ref type="bibr" target="#b33">[34]</ref> reports shared memory bandwidth of 128 bytes per clock cycle per SM, and we multiply that by 132 SMs and the boost clock of 1830 MHz.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>The CUDA programming guide specifies that 16 operations of special functions can be performed per streaming multiprocessor (SM) per clock cycle. We multiply 16 by 132 SMs and 1830 MHz clock speed to get 3.9 TFLOPS of special functions.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_2"><p>Note that the number of stages of the overlapping scheme is bounded by, but need not equal, the number 𝑠 of stages in the circular SMEM buffer.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_3"><p>An optimized transpose kernel will achieve speed near the bandwidth of the device<ref type="bibr" target="#b45">[46]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_4"><p>In the PTX documentation, LDSM/STSM are described as copying 8 × 8 matrices with 16-bit entries[40,  §9.7.13.4.15-16], but we can pack 8-bit entries two at a time to use LDSM/STSM in the context of FP8 precision. However, the transpose versions of LDSM/STSM cannot split packed 8-bit entries, which necessitates certain register movements in between LDSM and STSM to actually perform a tile-wise transpose; we omit the details.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_5"><p>This additional freedom afforded by doing the in-kernel transpose eliminates having to use shuffle instructions to change register ownership across threads, which we previously described in<ref type="bibr" target="#b6">[7]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_6"><p>For our benchmarks, FP16 FlashAttention-3 has a persistent kernel and load balancing strategy, while FP8 FlashAttention-3 does not. This partly explains why FP8 FlashAttention-3 does not perform as well for small sequence length and causal masking compared to the FP8 cuDNN kernels.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>Acknowledgments</head><p>We are grateful to the <rs type="institution">NVIDIA CUTLASS team</rs> (especially <rs type="person">Haicheng Wu</rs>, <rs type="person">Aniket Shivam</rs>, and <rs type="person">Cris Cecka</rs>) for helping us understand Hopper's programming model and for their library, which provides clean and powerful building blocks for the implementation of FlashAttention-3. We thank the cuDNN team for the idea of in-kernel transpose for FP8. The idea of overlapping GEMMs and softmax was inspired by insightful conversations with <rs type="person">Christopher Ré</rs>, <rs type="person">Benjamin Spector</rs>, <rs type="person">Aniket Shivam</rs>, and <rs type="person">Markus Hoehnerbach</rs>. The pingpong scheduling is adapted from the warp-specialized pingpong GEMM implementation in CUTLASS. We appreciate <rs type="person">Driss Guessous</rs> for integrating FlashAttention to PyTorch. FlashAttention-3 has benefited from helpful discussions with Horace He on different attention variants, with <rs type="person">Hao Liu</rs> and <rs type="person">Phil Wang</rs> on distributed attention, and with <rs type="person">Daniel Haziza</rs> and <rs type="person">Chris De Sa</rs> on quantization. We thank <rs type="institution">Meta</rs>, <rs type="person">Together AI</rs>, and <rs type="funder">Princeton Language and Intelligence (PLI)</rs> for compute support.</p></div>
			</div>
			<listOrg type="funding">
			</listOrg>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Related Work</head><p>Attention variants and distributed attention Ever since attention became popular with the Transformer architecture <ref type="bibr" target="#b58">[59]</ref>, there has been a large body of work on approximating attention to scale it to longer sequences. These approximation methods can generally be categorized into two classes: sparse and low-rank. Sparse attention only computes some entries of the attention matrix (softmax(QK 𝑇 )) and assumes that other entries are zero. Different methods have different ways of choosing which entries should be zero, either with a fixed pattern <ref type="bibr">[12]</ref>, with a sliding window <ref type="bibr" target="#b5">[6]</ref>, or with a dynamic pattern through hashing <ref type="bibr" target="#b27">[28]</ref> or routing <ref type="bibr" target="#b46">[47]</ref>. The low-rank approach instead assumes that the attention matrix has a low-rank structure, and apply a pointwise nonlinearity to the query and key <ref type="bibr" target="#b26">[27]</ref> with random projection <ref type="bibr">[13,</ref><ref type="bibr" target="#b43">44,</ref><ref type="bibr" target="#b60">61]</ref>. One can also combine the sparse and low-rank approximation for better quality <ref type="bibr">[10,</ref><ref type="bibr" target="#b62">63]</ref>. However, these approximation methods typically do not offer the same model quality as standard attention <ref type="bibr" target="#b55">[56]</ref>, and so most large-scale models do not employ these techniques.</p><p>There are other variants of attention aimed at reducing the size of the KV cache to improve inference efficiency. Multi-query attention <ref type="bibr" target="#b50">[51]</ref> and grouped query attention <ref type="bibr">[3]</ref> tie different heads of K and V, and multiple query heads interact with the same key and value head. Multi-head latent attention <ref type="bibr" target="#b18">[19]</ref> parameterizes the K and V as low-rank projections of a shared matrix to further reduce the KV cache size. However, all of these approaches do not change the core computation softmax(QK 𝑇 )V during training and simply change how Q, K, V are obtained. As a result, any efficiency or accuracy improvement to the standard attention computation benefits these methods.</p><p>To extend to even longer context, attention computation can be distributed across multiple GPUs. Methods such as Ring attention <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b31">32]</ref> and variants <ref type="bibr" target="#b7">[8]</ref> can reach a context length of up to 1 million. They use FlashAttention (or FlashAttention-2) as a primitive, and so the improvement from FlashAttention-3 would benefit these distributed attention methods as well.</p><p>Alternative architectures Motivated by the limitations of attention, a variety of alternative architectures have been proposed. They build on the connection between linear attention <ref type="bibr" target="#b26">[27]</ref> and recurrent neural networks (RNNs). RWKV <ref type="bibr" target="#b41">[42]</ref>, H3 <ref type="bibr" target="#b17">[18]</ref>, MEGA <ref type="bibr" target="#b34">[35]</ref>, Retnet <ref type="bibr" target="#b54">[55]</ref> enhance the expressivity of the simple cumulative sum in linear attention with more sophisticated recurrences. Mamba <ref type="bibr" target="#b21">[22]</ref> and xLSTM <ref type="bibr" target="#b4">[5]</ref> use learnable weighting for the recurrence and can match the quality of Transformers in language modeling at small or medium scale. These approaches can be connected to generalizations of linear attention through the lens of the structure of the token-mixing matrix <ref type="bibr">[16]</ref>. These models have started to see some traction, seeing usage in some medium to large-scale models such as Jamba <ref type="bibr">[2]</ref>, Zamba <ref type="bibr" target="#b63">[64]</ref>, Megalodon <ref type="bibr" target="#b35">[36]</ref>, and Mamba2-hybrid <ref type="bibr" target="#b59">[60]</ref>. For the highest quality, these SSM-and RNN-based models still employ many layers of attention. We expect that techniques to speed up attention presented in this work will be useful to speedup these alternative architectures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Low-precision attention</head><p>Quantization is a promising approach to speed up attention, but they have mostly focused on reducing the space for KV cache for inference efficiency. QuIP <ref type="bibr" target="#b8">[9]</ref> and QuIP# <ref type="bibr" target="#b57">[58]</ref> use incoherent processing to reduce the quantization, and we adapted this technique for FP8 FlashAttention-3. Recent work suggests that for inference the KV cache is highly compressible down to 4-, 3-, or even 2-bits <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b32">33]</ref>. However, quantization during training is still challenging as higher precision is typically required for stable training.</p><p>Hardware-aware Algorithms Our work presented in this paper focuses on the micro-architecture specific tuning to leverage new instruction sets and adopt a natively asynchronous programming model. There are other orthogonal axes for hardware-aware algorithm co-design being explored. A recent example of this is LeanAttention <ref type="bibr" target="#b48">[49]</ref>, which recognizes the poor GPU occupancy and high memory bandwidth requirements of the sequential token generation phase as primary bottlenecks for inference and optimizes it via a smarter load balancing strategy similar to Stream-K load balancing <ref type="bibr" target="#b40">[41]</ref> to achieve nearly peak occupancy. There is a large literature on optimizing GEMM for specific hardware that employs many of the same techniques. As an example, Abdelfattah et al. <ref type="bibr">[1]</ref> presents a high performance batched GEMM kernel on K40c Graphics Processing Units (GPU) for both fixed and variable sizes, proposing specialized GEMM designs and a comprehensive autotuning process to deliver state-of-the-art performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>11:</head><p>Issue loads of Q 𝑖 , dO 𝑖 from HBM to shared memory at the (𝑖 % 𝑠)th stage of the buffer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>12:</head><p>Upon completion, commit to notify consumers of the loads of Q 𝑖 , dO 𝑖 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>13:</head><p>end for 14: else if in consumer warpgroups then 15:</p><p>Reallocate predetermined number of registers as function of number of consumer warps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>16:</head><p>On-chip, Initialize dK 𝑗 = (0) 𝐵 𝑐 ×𝑑 , dV 𝑗 = (0) 𝐵 𝑐 ×𝑑 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>17:</head><p>Wait for K 𝑗 and V 𝑗 to be loaded in shared memory. Wait for Q 𝑖 to be loaded in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>20:</head><p>Load 𝐿 𝑖 , 𝐷 𝑖 from HBM to on-chip SRAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>21:</head><p>On chip, compute S</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>22:</head><p>Wait for dO 𝑖 to be loaded in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>23:</head><p>On chip, compute dP</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>24:</head><p>On chip, wait for S ( 𝑗 )</p><p>𝑖 , then compute P</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>25:</head><p>On chip, wait for dP</p><p>𝑖 , then compute dS</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>26:</head><p>On chip, compute dV 𝑗 ← dV 𝑗 + (P</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>27:</head><p>On chip, compute dK 𝑗 ← dK 𝑗 + dS</p><p>Commit and wait for both dV 𝑗 and dK 𝑗 .  Wait for dQ (local)   𝑖 to be ready in smem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>33:</head><p>Using a semaphore, atomically add dQ (local)   𝑖 to dQ 𝑖 in global memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>34:</head><p>end for 35: end if Register pressure. This algorithm requires more registers compared to the 2-stage pipelining algorithm. In theory, it needs to store an extra P𝑖 and 𝑠𝑐𝑎𝑙𝑒_𝑜, which is of size 𝐵 𝑟 × 𝐵 𝑐 × sizeof(input_data_type) + 𝐵 𝑟 × sizeof(float). As a result, a smaller block size needs to be chosen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Addition Details on Experiments and Benchmarking</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.1 System and libraries</head><p>We benchmark the speed on an H100 80GB SXM5 (700W). We generally use the latest versions of the libraries, at the time of writing (May 2024). Specifically, we use:</p><p>• cuDNN 9.1.1.17 To reduce variability, we fix the GPU clock speed to 1830MHz (clock speed used to calculate the 989 TFLOPS FP16 theoretical max throughput). We repeat the benchmarks 100 times and take the average timing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 FP8 Attention Full Results</head><p>We use following sequence lengths: 512, 1024, 2048, 4224, 8448, 16896. When sequence length ≥ 4k, we make it also divisible by 132 (number of SMs in H100 SXM5) to avoid wave quantization.        </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Performance, design, and autotuning of batched gemm for gpus</title>
		<author>
			<persName><forename type="first">Ahmad</forename><surname>Abdelfattah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Azzam</forename><surname>Haidar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stanimire</forename><surname>Tomov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><surname>Dongarra</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-41321-1_2</idno>
		<imprint>
			<date type="published" when="2016-06">06 2016</date>
			<biblScope unit="page" from="21" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Introducing jamba: Ai21&apos;s groundbreaking ssm-transformer model</title>
		<author>
			<persName><surname>Ai21</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AI</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Gqa: Training generalized multi-query transformer models from multi-head checkpoints</title>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Ainslie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Lee-Thorp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michiel</forename><surname>De Jong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yury</forename><surname>Zemlyanskiy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Federico</forename><surname>Lebrón</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sumit</forename><surname>Sanghai</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2305.13245</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">CudaDMA: Optimizing GPU Memory Bandwidth via Warp Specialization</title>
		<author>
			<persName><forename type="first">Michael</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henry</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brucek</forename><surname>Khailany</surname></persName>
		</author>
		<idno type="DOI">10.1145/2063384.2063400</idno>
		<ptr target="https://doi.org/10.1145/2063384.2063400" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis, SC &apos;11</title>
		<meeting>2011 International Conference for High Performance Computing, Networking, Storage and Analysis, SC &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">Maximilian</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Korbinian</forename><surname>Pöppel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Markus</forename><surname>Spanring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Auer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oleksandra</forename><surname>Prudnikova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Kopp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Günter</forename><surname>Klambauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Johannes</forename><surname>Brandstetter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sepp</forename><surname>Hochreiter</surname></persName>
		</author>
		<author>
			<persName><surname>Xlstm</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2405.04517</idno>
		<title level="m">Extended long short-term memory</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">Iz</forename><surname>Beltagy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><forename type="middle">E</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arman</forename><surname>Cohan</surname></persName>
		</author>
		<author>
			<persName><surname>Longformer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2004.05150</idno>
		<title level="m">The long-document transformer</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Delivering 1 PFLOP/s of Performance with FP8 FlashAttention-2</title>
		<author>
			<persName><forename type="first">Ganesh</forename><surname>Bikshandi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jay</forename><surname>Shah</surname></persName>
		</author>
		<ptr target="https://research.colfax-intl.com/adding-fp8-to-flashattention/" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Striped attention: Faster ring attention for causal transformers</title>
		<author>
			<persName><forename type="first">William</forename><surname>Brandon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aniruddha</forename><surname>Nrusimha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zachary</forename><surname>Ankner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tian</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiye</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Ragan-Kelley</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2311.09431</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Quip: 2-bit quantization of large language models with guarantees</title>
		<author>
			<persName><forename type="first">Jerry</forename><surname>Chee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yaohui</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Volodymyr</forename><surname>Kuleshov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher M De</forename><surname>Sa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Scatterbrain: Unifying sparse and low-rank attention</title>
		<author>
			<persName><forename type="first">Beidi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Winsor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhao</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Atri</forename><surname>Rudra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Ré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems (NeurIPS)</title>
		<imprint>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Scaling vision transformers to gigapixel images via hierarchical self-supervised learning</title>
		<author>
			<persName><forename type="first">Chengkuan</forename><surname>Richard J Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yicong</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tiffany</forename><forename type="middle">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><surname>Trister</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Faisal</forename><surname>Rahul G Krishnan</surname></persName>
		</author>
		<author>
			<persName><surname>Mahmood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition</title>
		<meeting>the IEEE/CVF Conference on Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="16144" to="16155" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Generating long sequences with sparse transformers</title>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1904.10509</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Rethinking attention with performers</title>
		<author>
			<persName><forename type="first">Krzysztof</forename><surname>Choromanski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Valerii</forename><surname>Likhosherstov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Dohan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xingyou</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreea</forename><surname>Gane</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tamas</forename><surname>Sarlos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><surname>Hawkins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Afroz</forename><surname>Mohiuddin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lukasz</forename><surname>Kaiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Rethinking attention with performers</title>
		<author>
			<persName><forename type="first">Valerii</forename><surname>Krzysztof Marcin Choromanski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Likhosherstov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xingyou</forename><surname>Dohan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreea</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tamas</forename><surname>Gane</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><surname>Sarlos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><forename type="middle">Quincy</forename><surname>Hawkins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Afroz</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lukasz</forename><surname>Mohiuddin</surname></persName>
		</author>
		<author>
			<persName><surname>Kaiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning</title>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2307.08691" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Transformers are SSMs: Generalized models and efficient algorithms with structured state space duality</title>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Albert</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning (ICML)</title>
		<imprint>
			<biblScope unit="page">2024</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">FlashAttention: Fast and memoryefficient exact attention with IO-awareness</title>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><forename type="middle">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stefano</forename><surname>Ermon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Atri</forename><surname>Rudra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Ré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Hungry hungry hippos: Towards language modeling with state space models</title>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><forename type="middle">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Khaled</forename><forename type="middle">K</forename><surname>Saab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Armin</forename><forename type="middle">W</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Atri</forename><surname>Rudra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Ré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<biblScope unit="page">2023</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Deepseek-v2: A strong, economical, and efficient mixture-of-experts language model</title>
		<author>
			<persName><forename type="first">Deepseek-Ai</forename></persName>
		</author>
		<idno type="arXiv">arXiv:2405.04434</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">-bit matrix multiplication for transformers at scale</title>
		<author>
			<persName><forename type="first">Tim</forename><surname>Dettmers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mike</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Younes</forename><surname>Belkada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<idno>CoRR abs/2208.07339</idno>
	</analytic>
	<monogr>
		<title level="j">Llm. int</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">8</biblScope>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">Alicia</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuel</forename><surname>Hsia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fei</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bilge</forename><surname>Acun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Basil</forename><surname>Hosmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yejin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zachary</forename><surname>Devito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeff</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gu-Yeon</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Brooks</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2405.02803</idno>
		<title level="m">Is flash attention stable? arXiv preprint</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Mamba: Linear-time sequence modeling with selective state spaces</title>
		<author>
			<persName><forename type="first">Albert</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Conformer: Convolution-augmented transformer for speech recognition</title>
		<author>
			<persName><forename type="first">Anmol</forename><surname>Gulati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chung-Cheng</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niki</forename><surname>Parmar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiahui</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shibo</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhengdong</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonghui</forename><surname>Wu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2005.08100</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">Mandy</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Ainslie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Uthus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Santiago</forename><surname>Ontanon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jianmo</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yun-Hsuan</forename><surname>Sung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yinfei</forename><surname>Yang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2112.07916</idno>
		<title level="m">Longt5: Efficient text-to-text transformer for long sequences</title>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Video diffusion models</title>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tim</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexey</forename><surname>Gritsenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">William</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">J</forename><surname>Fleet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="8633" to="8646" />
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">Coleman</forename><surname>Hooper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sehoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hiva</forename><surname>Mohammadzadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">W</forename><surname>Mahoney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yakun</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Sophia</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kurt</forename><surname>Keutzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amir</forename><surname>Gholami</surname></persName>
		</author>
		<author>
			<persName><surname>Kvquant</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2401.18079</idno>
		<title level="m">Towards 10 million context length llm inference with kv cache quantization</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Transformers are RNNs: Fast autoregressive transformers with linear attention</title>
		<author>
			<persName><forename type="first">Angelos</forename><surname>Katharopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Apoorv</forename><surname>Vyas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nikolaos</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">François</forename><surname>Fleuret</surname></persName>
		</author>
		<idno>PMLR</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="5156" to="5165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Reformer: The efficient transformer</title>
		<author>
			<persName><forename type="first">Nikita</forename><surname>Kitaev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Łukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anselm</forename><surname>Levskaya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Machine Learning (ICML)</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Efficient memory management for large language model serving with pagedattention</title>
		<author>
			<persName><forename type="first">Woosuk</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhuohan</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Siyuan</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ying</forename><surname>Sheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lianmin</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cody</forename><forename type="middle">Hao</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hao</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ion</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th Symposium on Operating Systems Principles</title>
		<meeting>the 29th Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="2023">2023</date>
			<biblScope unit="page" from="611" to="626" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName><forename type="first">Raymond</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Loubna</forename><surname>Ben Allal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yangtian</forename><surname>Zi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niklas</forename><surname>Muennighoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Denis</forename><surname>Kocetkov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chenghao</forename><surname>Mou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marc</forename><surname>Marone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Akiki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jia</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jenny</forename><surname>Chim</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2305.06161</idno>
		<title level="m">Starcoder: may the source be with you! arXiv preprint</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Ring attention with blockwise transformers for near-infinite context</title>
		<author>
			<persName><forename type="first">Hao</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matei</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pieter</forename><surname>Abbeel</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2310.01889</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">World model on million-length video and language with ringattention</title>
		<author>
			<persName><forename type="first">Hao</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wilson</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matei</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pieter</forename><surname>Abbeel</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2402.08268</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">Zirui</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiayi</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongye</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaochen</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhaozhuo</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vladimir</forename><surname>Braverman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Beidi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xia</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><surname>Kivi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2402.02750</idno>
		<title level="m">A tuning-free asymmetric 2bit quantization for kv cache</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Benchmarking and Dissecting the Nvidia Hopper GPU Architecture</title>
		<author>
			<persName><forename type="first">Weile</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruibo</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zeyu</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dayou</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qiang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaowen</forename><surname>Chu</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2402.13499" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Mega: Moving average equipped gated attention</title>
		<author>
			<persName><forename type="first">Xuezhe</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chunting</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiang</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junxian</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Liangke</forename><surname>Gui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graham</forename><surname>Neubig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>May</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<biblScope unit="page">2023</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<author>
			<persName><forename type="first">Xuezhe</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaomeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenhan</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Beidi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lili</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hao</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>May</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Omer</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chunting</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><surname>Megalodon</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2404.08801</idno>
		<title level="m">Efficient llm pretraining and inference with unlimited context length</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Fp8 formats for deep learning</title>
		<author>
			<persName><forename type="first">Paulius</forename><surname>Micikevicius</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dusan</forename><surname>Stosic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Neil</forename><surname>Burgess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marius</forename><surname>Cornea</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pradeep</forename><surname>Dubey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Grisenthwaite</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sangwon</forename><surname>Ha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><surname>Heinecke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Patrick</forename><surname>Judd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Kamalu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2209.05433</idno>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">CUDA Programming Guide Version 12</title>
		<author>
			<persName><surname>Nvidia</surname></persName>
		</author>
		<ptr target="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html" />
		<imprint>
			<date type="published" when="2024">2024</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Accelerating transformers with nvidia cudnn 9</title>
		<author>
			<persName><surname>Nvidia</surname></persName>
		</author>
		<ptr target="https://developer.nvidia.com/blog/accelerating-transformers-with-nvidia-cudnn-9/" />
	</analytic>
	<monogr>
		<title level="m">Nvidia blog</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Parallel Thread Execution ISA Version 8</title>
		<author>
			<persName><surname>Nvidia</surname></persName>
		</author>
		<ptr target="https://docs.nvidia.com/cuda/pdf/ptx_isa_8.4.pdf" />
		<imprint>
			<date type="published" when="2024">2024</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Stream-k: Workcentric parallel decomposition for dense matrix-matrix multiplication on the gpu</title>
		<author>
			<persName><forename type="first">Muhammad</forename><surname>Osama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Duane</forename><surname>Merrill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cris</forename><surname>Cecka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">D</forename><surname>Owens</surname></persName>
		</author>
		<idno type="DOI">10.1145/3572848.3577479</idno>
		<ptr target="https://doi.org/10.1145/3572848.3577479" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming, PPoPP &apos;23</title>
		<meeting>the 28th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming, PPoPP &apos;23<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2023">2023</date>
			<biblScope unit="volume">9798400700156</biblScope>
			<biblScope unit="page" from="429" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<author>
			<persName><forename type="first">Bo</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Alcaide</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quentin</forename><surname>Anthony</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alon</forename><surname>Albalak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuel</forename><surname>Arcadinho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Huanqi</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xin</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matteo</forename><surname>Grella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kranthi</forename><surname>Kiran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">V</forename></persName>
		</author>
		<idno type="arXiv">arXiv:2305.13048</idno>
		<title level="m">Reinventing RNNs for the Transformer era</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Yarn: Efficient context window extension of large language models</title>
		<author>
			<persName><forename type="first">Bowen</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Quesnelle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Honglu</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Enrico</forename><surname>Shippole</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2309.00071</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Random feature attention</title>
		<author>
			<persName><forename type="first">Hao</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nikolaos</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dani</forename><surname>Yogatama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Roy</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noah</forename><forename type="middle">A</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lingpeng</forename><surname>Kong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Self-attention does not need 𝑂 (𝑛 2 ) memory</title>
		<author>
			<persName><forename type="first">N</forename><surname>Markus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Rabe</surname></persName>
		</author>
		<author>
			<persName><surname>Staats</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2112.05682</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<author>
			<persName><forename type="first">Colfax</forename><surname>Research</surname></persName>
		</author>
		<ptr target="https://research.colfax-intl.com/tutorial-matrix-transpose-in-cutlass/" />
		<title level="m">Matrix Transpose in CUTLASS</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Efficient content-based sparse attention with routing Transformers</title>
		<author>
			<persName><forename type="first">Aurko</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Saffar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Grangier</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2003.05997</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Code llama: Open foundation models for code</title>
		<author>
			<persName><forename type="first">Jonas</forename><surname>Baptiste Roziere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fabian</forename><surname>Gehring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sten</forename><surname>Gloeckle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Itai</forename><surname>Sootla</surname></persName>
		</author>
		<author>
			<persName><surname>Gat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ellen</forename><surname>Xiaoqing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yossi</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jingyu</forename><surname>Adi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tal</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jérémy</forename><surname>Remez</surname></persName>
		</author>
		<author>
			<persName><surname>Rapin</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2308.12950</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Lean attention: Hardware-aware scalable attention mechanism for the decode-phase of transformers</title>
		<author>
			<persName><forename type="first">Rya</forename><surname>Sanovar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Srikant</forename><surname>Bharadwaj</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Renee</forename><surname>St</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Victor</forename><surname>Amant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saravan</forename><surname>Rühle</surname></persName>
		</author>
		<author>
			<persName><surname>Rajmohan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<author>
			<persName><forename type="first">Uri</forename><surname>Shaham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elad</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maor</forename><surname>Ivgi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Avia</forename><surname>Efrat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ori</forename><surname>Yoran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adi</forename><surname>Haviv</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ankit</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenhan</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mor</forename><surname>Geva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Berant</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2201.03533</idno>
		<title level="m">Standardized comparison over long language sequences</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Fast transformer decoding: One write-head is all you need</title>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1911.02150</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Spector</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaryan</forename><surname>Singhal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Simran</forename><surname>Arora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Ré</surname></persName>
		</author>
		<ptr target="https://github.com/HazyResearch/ThunderKittens" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Bert4rec: Sequential recommendation with bidirectional encoder representations from transformer</title>
		<author>
			<persName><forename type="first">Fei</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Changhua</forename><surname>Pei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiao</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenwu</forename><surname>Ou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peng</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th ACM international conference on information and knowledge management</title>
		<meeting>the 28th ACM international conference on information and knowledge management</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="1441" to="1450" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<author>
			<persName><forename type="first">Mingjie</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xinlei</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zico Kolter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhuang</forename><surname>Liu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2402.17762</idno>
		<title level="m">Massive activations in large language models</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Retentive network: A successor to transformer for large language models</title>
		<author>
			<persName><forename type="first">Yutao</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaohan</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shuming</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuqing</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jilong</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jianyong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Furu</forename><surname>Wei</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2307.08621</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<author>
			<persName><forename type="first">Yi</forename><surname>Tay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mostafa</forename><surname>Dehghani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dara</forename><surname>Bahri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Donald</forename><surname>Metzler</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2009.06732</idno>
		<title level="m">Efficient transformers: A survey</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">Vijay</forename><surname>Thakkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pradeep</forename><surname>Ramani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cris</forename><surname>Cecka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aniket</forename><surname>Shivam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Honghao</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ethan</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><surname>Kosaian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Hoemmen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Haicheng</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Kerr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matt</forename><surname>Nicely</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Duane</forename><surname>Merrill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dustyn</forename><surname>Blasig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fengqi</forename><surname>Qiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Piotr</forename><surname>Majcher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Springer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Markus</forename><surname>Hohnerbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jin</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Manish</forename><surname>Gupta</surname></persName>
		</author>
		<ptr target="https://github.com/NVIDIA/cutlass" />
	</analytic>
	<monogr>
		<title level="j">CUTLASS</title>
		<imprint>
			<date type="published" when="2023-01">January 2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<author>
			<persName><forename type="first">Albert</forename><surname>Tseng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerry</forename><surname>Chee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qingyao</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Volodymyr</forename><surname>Kuleshov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><forename type="middle">De</forename><surname>Sa</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2402.04396</idno>
		<title level="m">Quip#: Even better llm quantization with hadamard incoherence and lattice codebooks</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Attention is all you need</title>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niki</forename><surname>Parmar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jakob</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Llion</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aidan</forename><forename type="middle">N</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Łukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Illia</forename><surname>Polosukhin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">30</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">An empirical study of mamba-based language models</title>
		<author>
			<persName><forename type="first">Roger</forename><surname>Waleffe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wonmin</forename><surname>Byeon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Duncan</forename><surname>Riach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Norick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vijay</forename><surname>Korthikanti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tri</forename><surname>Dao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Albert</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ali</forename><surname>Hatamizadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sudhakar</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Deepak</forename><surname>Narayanan</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2406.07887</idno>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Nyströmformer: A nystöm-based algorithm for approximating self-attention</title>
		<author>
			<persName><forename type="first">Yunyang</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhanpeng</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rudrasis</forename><surname>Chakraborty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mingxing</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Glenn</forename><surname>Fung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vikas</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the AAAI Conference on Artificial Intelligence. AAAI Conference on Artificial Intelligence</title>
		<meeting>the AAAI Conference on Artificial Intelligence. AAAI Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="2021">2021</date>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page">14138</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<author>
			<persName><forename type="first">Shunyu</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dian</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Izhak</forename><surname>Shafran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karthik</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuan</forename><surname>Cao</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2210.03629</idno>
		<title level="m">React: Synergizing reasoning and acting in language models</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Big bird: Transformers for longer sequences</title>
		<author>
			<persName><forename type="first">Manzil</forename><surname>Zaheer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guru</forename><surname>Guruganesh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Avinava</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Dubey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Ainslie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Santiago</forename><surname>Alberti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Philip</forename><surname>Ontanon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anirudh</forename><surname>Pham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qifan</forename><surname>Ravula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">B.2 2-Stage Pipelining SASS Analysis We give simplified SASS code for the inside of the consumer warpgroup mainloop. // Compute row_max FMNMX.FTZ R0, R24</title>
		<author>
			<persName><surname>Zyphra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Zyphra blog</title>
		<imprint>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note>Zyphra unveils zamba: A compact 7b ssm hybrid model !PT ; SHFL.BFLY PT, R185, R2, 0x2, 0x1f</note>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Shfl</forename><forename type="middle">Bfly</forename><surname>Fmnmx</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">FTZ R2, R4</title>
		<author>
			<persName><forename type="first">O</forename><surname>Rescale</surname></persName>
		</author>
		<author>
			<persName><surname>Fmul</surname></persName>
		</author>
		<idno>MUFU.EX2 R185</idno>
	</analytic>
	<monogr>
		<title level="j">FFMA.FTZ R</title>
		<imprint>
			<biblScope unit="volume">184</biblScope>
			<biblScope unit="issue">9</biblScope>
			<pubPlace>UR</pubPlace>
		</imprint>
	</monogr>
	<note>R reuse ; FADD.FTZ R24, R211, R24</note>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Ffma</forename><surname>Fmul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mufu</forename><surname>Fmul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fadd</forename><surname>Ex2</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">FP16 conversion are interleaved with exp2, row_sum and O rescaling. F2FP.F16.F32</title>
	</analytic>
	<monogr>
		<title level="j">PACK_AB R</title>
		<imprint>
			<biblScope unit="volume">231</biblScope>
		</imprint>
	</monogr>
	<note>R231</note>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Fmul</forename><surname>F2fp</surname></persName>
		</author>
		<author>
			<persName><surname>Mufu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fadd</forename><surname>Ffma</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
		<title level="m" type="main">64x192x16</title>
		<author>
			<persName><forename type="first">!</forename><surname>Hgmma ; Rz</surname></persName>
		</author>
		<author>
			<persName><surname>Upt</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">&gt;FP</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
	<note>rescaling are interleaved with HGMMA</note>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Mufu</forename><surname>F2fp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fadd</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<monogr>
		<title level="m" type="main">The last HGMMA is issued here. No need to wait. HGMMA.64x192x16</title>
		<imprint/>
	</monogr>
	<note>F32 R24, gdesc[UR44], R24, gsb0</note>
</biblStruct>

<biblStruct xml:id="b73">
	<monogr>
		<title level="m" type="main">64x128x16</title>
		<author>
			<persName><surname>Hgmma</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
	<note>gdesc[UR8].tnspB, R120 ; ... HGMMA x 10 ..</note>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title level="m" type="main">64x128x16</title>
		<author>
			<persName><surname>Hgmma</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
	<note>gdesc[UR8].tnspB, R120, gsb0 ; observations</note>
</biblStruct>

<biblStruct xml:id="b75">
	<monogr>
		<title level="m" type="main">Softmax is reordered to the very beginning, even before the first WGMMA</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<monogr>
		<title level="m" type="main">The first WGMMA is interleaved with softmax and FP32 → FP16 datatype conversion of S. This indicates that WGMMA and non-WGMMAs are executed in parallel</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<title level="m" type="main">exp2, row\_sum, O rescaling and FP32 → FP16 conversions are interleaved together</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<monogr>
		<title level="m" type="main">The second WGMMA is not overlapped with other instructions</title>
		<imprint/>
	</monogr>
	<note>as expected</note>
</biblStruct>

<biblStruct xml:id="b79">
	<monogr>
		<title level="m" type="main">SASS shows that the 2-stage pipelining idea works as expected</title>
		<author>
			<persName><surname>Overall</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<monogr>
		<title level="m" type="main">3 3-Stage Pipelining Algorithm We experiment with a 3-stage pipelining algorithm to parallelize the first WGMMA from iteration 𝑗 + 2, softmax from iteration 𝑗 + 1, and the second WGMMA from iteration 𝑗. We describe this algorithm in Algorithm 4. This algorithm behaves worse than the 2-stage pipelining algorithm due to the reasons below: Figure 8: 3-Stage Pipelining Algorithm 4 FlashAttention 3-stage pipelining consumer warpgroup forward pass Require: Matrices Q, K, V ∈ R 𝑁 ×𝑑 in HBM, block sizes 𝐵 𝑐 , 𝐵 𝑟 . Each warpgroup reads 1 block Qi of size 𝐵 𝑟 × 𝑑, 𝑇 𝑐 = 𝑁 𝐵 𝑐 blocks K 1 , . . . , K 𝑇 𝑐 and V 1 , . . . , V 𝑇 𝑐 of size 𝐵 𝑐 × 𝑑. Each warpgroup writes 1 output block O 𝑖 of size 𝐵 𝑟 × 𝑑, and 1 logsumexp block 𝐿 𝑖 of size 𝐵 𝑟</title>
		<author>
			<persName><forename type="first">B</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<monogr>
		<title level="m" type="main">Load Q 𝑖 from HBM to on-chip SRAM. Initialize O 𝑖 , ℓ 𝑖 , 𝑚 𝑖 , 𝑠𝑐𝑎𝑙𝑒_𝑜. 2: Wait for the producer warpgroup loading K 0 from HBM to on-chip SRAM. 3: Compute S = Q 𝑖 K 𝑇 0 using WGMMA</title>
		<author>
			<orgName type="collaboration">Initialization</orgName>
		</author>
		<imprint/>
	</monogr>
	<note>Commit and wait</note>
</biblStruct>

<biblStruct xml:id="b82">
	<monogr>
		<title level="m" type="main">𝑠𝑐𝑎𝑙𝑒_𝑜 based on S. 5: Wait for the producer warpgroup loading K 1 from HBM to on-chip SRAM. 6: Compute S = Q 𝑖 K 𝑇 1 using WGMMA. Commit and wait. 7: for 2 ≤ 𝑗 &lt; 𝑇 𝑐 -2 do 8: Wait for the producer warpgroup loading K 𝑗</title>
		<author>
			<persName><forename type="first">𝑚</forename><surname>Compute</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P𝑖</forename><surname>𝑖</surname></persName>
		</author>
		<author>
			<persName><surname>𝑖</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>from HBM to on-chip SRAM</note>
</biblStruct>

<biblStruct xml:id="b83">
	<monogr>
		<title level="m" type="main">Compute S_𝑛𝑒𝑥𝑡 = Q 𝑖 K 𝑇 𝑗 using WGMMA. Commit but do not wait</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<monogr>
		<title level="m" type="main">Wait for the producer warpgroup loading V 𝑗 -2 from HBM to on-chip SRAM</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Rescale O 𝑖 based on 𝑠𝑐𝑎𝑙𝑒_𝑜</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">O 𝑖 = O 𝑖 + P𝑖 V</forename><surname>Compute</surname></persName>
			<affiliation>
				<orgName type="collaboration">2 using WGMMA. Commit but do not wait</orgName>
			</affiliation>
		</author>
		<author>
			<persName><surname>𝑗</surname></persName>
			<affiliation>
				<orgName type="collaboration">2 using WGMMA. Commit but do not wait</orgName>
			</affiliation>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">𝑚</forename><surname>Compute</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P𝑖</forename><surname>𝑖</surname></persName>
		</author>
		<author>
			<persName><surname>_𝑛𝑒𝑥𝑡</surname></persName>
		</author>
		<imprint>
			<publisher>𝑠𝑐𝑎𝑙𝑒_𝑜 based on S</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<monogr>
		<title level="m" type="main">Wait for all previous WGMMAs</title>
		<author>
			<orgName type="collaboration">Copy S_𝑛𝑒𝑥𝑡 to S</orgName>
		</author>
		<imprint>
			<biblScope unit="volume">15</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<monogr>
		<title level="m" type="main">Wait for the producer warpgroup loading V 𝑇 𝑐 -2 from HBM to on-chip SRAM. 19: Rescale O 𝑖 based on 𝑠𝑐𝑎𝑙𝑒_𝑜. 20: Compute O 𝑖 = O 𝑖 + P𝑖 V 𝑇 𝑐 -2 using WGMMA. Commit and wait. 21: Compute 𝑚 𝑖 , P𝑖 , ℓ 𝑖 , 𝑠𝑐𝑎𝑙𝑒_𝑜 based on S. 22: Wait for the producer warpgroup loading V 𝑇 𝑐 -1 from HBM to on-chip SRAM. 23: Rescale O 𝑖 based on 𝑠𝑐𝑎𝑙𝑒_𝑜. 24: Compute O 𝑖 = O 𝑖 + P𝑖 V 𝑇 𝑐 -1 using WGMMA. Commit and wait. 25: Epilogue. Rescale O 𝑖 based on ℓ 𝑖 . Compute 𝐿 𝑖 based on ℓ 𝑖 and 𝑚 𝑖</title>
		<idno>Copy P𝑖 _𝑛𝑒𝑥𝑡 to P𝑖 . 17: end for 18</idno>
		<imprint/>
	</monogr>
	<note>Write O 𝑖 and 𝐿 𝑖 to HBM as the 𝑖-th block of O and 𝐿</note>
</biblStruct>

<biblStruct xml:id="b90">
	<monogr>
		<title level="m" type="main">We expected that softmax can be overlapped with (the first WGMMA + the second WGMMA)</title>
		<author>
			<persName><surname>Overlapping</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b91">
	<monogr>
		<title level="m" type="main">the compiler doesn&apos;t cooperate in this way. SASS code shows that only the first WGMMA is overlapped with softmax, while the second WGMMA is not. It&apos;s not clear why the compiler chooses to reorder instructions in this way</title>
		<author>
			<persName><surname>However</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
