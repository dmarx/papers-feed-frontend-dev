<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Develop AI Agents for System Engineering in Factorio</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability  status="unknown">
					<licence/>
				</availability>
				<date type="published" when="2025-02-03">3 Feb 2025</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Neel</forename><surname>Kant</surname></persName>
						</author>
						<title level="a" type="main">Develop AI Agents for System Engineering in Factorio</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2025-02-03">3 Feb 2025</date>
						</imprint>
					</monogr>
					<idno type="MD5">AC97116FD0CD065D80427F1D1762B798</idno>
					<idno type="arXiv">arXiv:2502.01492v1[cs.AI]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-02-21T16:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Continuing advances in frontier model research are paving the way for widespread deployment of AI agents. Meanwhile, global interest in building large, complex systems in software, manufacturing, energy and logistics has never been greater. Although AI-driven system engineering holds tremendous promise, the static benchmarks dominating agent evaluations today fail to capture the crucial skills required for implementing dynamic systems, such as managing uncertain trade-offs and ensuring proactive adaptability. This position paper advocates for training and evaluating AI agents' system engineering abilities through automation-oriented sandbox games-particularly Factorio. By directing research efforts in this direction, we can equip AI agents with the specialized reasoning and longhorizon planning necessary to design, maintain, and optimize tomorrow's most demanding engineering projects.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Since the release of ChatGPT in November 2022, the field of generative AI has experienced an explosive surge in both attention and investment. Early successes in large language models (LLMs) have demonstrated that tuning foundation models to follow instructions and optimize for human preferences can yield AI systems capable of a wide range of tasks-often approaching or matching human-level proficiency in specific domains. This has led researchers and industry experts alike to speculate that we now possess the fundamental building blocks for artificial general intelligence (AGI).</p><p>A logical progression beyond chatbots and prompt-based LLMs is the development of AI agents. Unlike conventional models that simply output text in response to queries, agentic AI systems combine language comprehension with memory, tools, and other interfaces, allowing them to interact with environments in near-human ways. This paradigm shift has ignited excitement about the possibility of autonomous, always-on AI "workers" that can undertake many tasks currently performed by humans-ranging from data analysis to coding, from supply-chain management to design optimization.</p><p>Yet, for all the excitement around AI agents, today's systems often remain limited in scope and capability. Part of this is due to a lack of robustness and a need for continued integration with real-world interfaces, but it is also due to limitations of static development environments for agents. We argue that these constraints can be overcome by explicitly training and evaluating agents in system engineering tasks, where scalability, adaptability, and long-term strategic thinking become paramount. By building, optimizing, and maintaining complex, real-world systems-or close simulations thereof-agents can push well beyond static benchmarks toward generalized superhuman problem-solving.</p><p>This paper makes three main points:</p><p>1. System engineering is a uniquely high-leverage capability. Societies worldwide face challenges that demand new levels of coordination and innovation in designing and managing complex infrastructures and processes.</p><p>2. Sandbox-style simulation platforms are essential for training and evaluating AI agents on their capacity to handle real-world complexities. Such platforms can capture the interplay between adaptability, automation, and other dynamic trade-offs that static benchmarks fail to represent, thereby enabling more realistic and robust testing.</p><p>3. Factorio stands out as the ideal sandbox game for this purpose as its entire nature centers on designing and automating complex systems along with key technical advantages like robust support for modifying and augmenting game mechanics.</p><p>We explore each of these points in detail in subsequent sections individually, and provide an Appendix which visually illustrates Factorio for newcomers to gain intuition about its gameplay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The Importance of System Engineering</head><p>In this section, we examine trends in complex system development and AI agents. We deduce that these will converge and we thus firmly establish the value proposition for developing system engineering capability in AI agents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">The Ubiquity of Systems</head><p>A system is defined as a collection of interacting components that together serve a function or purpose. Under this broad definition, the world as we know it is held together by complex systems. Key examples include:</p><p>• Transportation and Logistics. Industries such as shipping, trucking, and ridesharing; public services like trains and buses; physical infrastructure projects including roads, bridges, and tunnels.</p><p>• Energy Infrastructure. Raw material acquisition and refinement; large-scale energy generation in specialized facilities; storage and distribution networks required for load balancing.</p><p>• Modern Agriculture. Encompassing land management (irrigation, fertilization, pest control), crop and livestock cycles, as well as packaging and distribution systems to bring products to market.</p><p>• Advanced Manufacturing. The creation of parts from raw materials; international supply chain coordination; final assembly of complex products across sectors such as computing, biotechnology, and aerospace.</p><p>• Digital Ecosystems. Physical networking infrastructure; internet hosting servers; cloud computing stacks; software frameworks, libraries, and algorithms.</p><p>System engineering refers to the design, implementation, and management of such large-scale systems that integrate hardware, software, and human processes. Our understanding of systems has evolved significantly over time. Early industrial breakthroughs (e.g., standardized components, assembly lines, electrification) introduced new layers of complexity by increasing production volumes, lowering costs, and extending distribution chains. In aerospace and defense projects, where massive interdisciplinary teams had to be coordinated, formal system engineering practices emerged <ref type="bibr" target="#b4">(Blanchard &amp; Fabrycky, 2010;</ref><ref type="bibr" target="#b21">Kossiakoff et al., 2011;</ref><ref type="bibr" target="#b39">Walden et al., 2015;</ref><ref type="bibr" target="#b5">Buede &amp; Miller, 2016;</ref><ref type="bibr" target="#b24">Madni &amp; Madni, 2018)</ref>. Over the years, these yielded iterative and agile methods emphasizing continuous integration and rapid feedback-trends that are now mainstream in digital ecosystems.</p><p>The demand for building and scaling complex systems shows no signs of slowing down. Across the world, large projects are planned or underway to address unprecedented challenges in the form of energy needs, aging demographics, changing climate patterns, geopolitical tensions, and more <ref type="bibr" target="#b25">(McKinsey &amp; Company, 2022;</ref><ref type="bibr" target="#b7">Deloitte, 2023;</ref><ref type="bibr" target="#b31">Reshoring Initiative, 2023)</ref>. The competitive advancement of technology itself leads to self-reinforcing demand for systems, exemplified by staggering investments into AI-related infrastructure (U.S. <ref type="bibr">Congress, 2022;</ref><ref type="bibr" target="#b13">Glebova &amp; Nelson, 2025)</ref>. Budget overruns and timeline delays are all too common in implementing large projects, showing that human planning and system engineering has its limitations. It thus appears nearly certain that advanced AI will be crucial in tackling these challenges and implementing the solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">The Rise of AI Agents</head><p>Simultaneously, AI agents are gaining traction as the most promising framework for applying human-aligned generative AI models. Significant advances in multimodal input processing and reasoning through inference-time compute use have exposed the possibilities of autonomous agents using complex interfaces to accomplish tasks over longer time horizons. These opportunities are rapidly being realized through virtual agents which are increasingly using web browsers, code interpreters and other digital tools to automate workflows and offload other labor from humans <ref type="bibr" target="#b43">(Wu, 2024;</ref><ref type="bibr" target="#b27">OpenAI, 2025)</ref>. Progress in physical agents is also picking up steam, leaning on advances in both generalpurpose foundation models and maturing robotics technology <ref type="bibr" target="#b26">(NVIDIA, 2024;</ref><ref type="bibr" target="#b14">Griffin, 2024)</ref>.</p><p>The tasks assigned to AI agents today may be composites of several smaller sub-tasks, but ultimately tend to be selfcontained workflows. As AI agents become more reliable at executing these tasks, it will become more enticing to involve them in more system-level challenges. Systemslevel expertise is always more scarce since it demands deep knowledge of choices for components, interconnections and associated trade-offs for costs, implementation time, complexity, scalability, etc. Training data for reasoning about systems is also commensurately scarce and so it will naturally present a challenge for improving AI agents. As AI agents proliferate, the challenges and opportunities associated with multi-agent coordination will also become more relevant and influence the efficacy of AI-enhanced systems.</p><p>Hence, this trajectory of elevating AI agents to effectively work on system engineering seems central for achieving the long-term goals of developing AGI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Implications of Superhuman System Engineering</head><p>AI models and agents have shown superhuman ability in various domains. Historically, this is evidenced by their mastery of classically challenging board games and more complex real-time strategy video games <ref type="bibr" target="#b35">(Silver et al., 2017;</ref><ref type="bibr" target="#b38">Vinyals et al., 2019)</ref>. In applied settings, AI models have outperformed human-engineered solutions in predicting molecular structures <ref type="bibr" target="#b20">(Jumper et al., 2021)</ref>, weather patterns <ref type="bibr" target="#b28">(Price &amp; Willson, 2024)</ref>, and even designing certain GPU circuits <ref type="bibr">(Roy et al., 2021)</ref>. Recent frontier models demonstrate advances in multimodal and highly technical reasoning, suggesting that a trajectory toward general superhuman intelligence is potentially close. Given all this, it is worth considering the ramifications of successfully building superhuman AI system engineers.</p><p>We can look to current examples of top-tier system engineering by humans. These achievements share a common pattern: they redefined what was previously considered possible. For instance, when Apple replaced Intel chips with its in-house M-series CPUs, the gains in thermal performance, battery life, and software speed were widely seen as a generational leap. Similarly, SpaceX reshaped the frontier of aerospace by reducing costs by orders of magnitude and inventing reusable rocket technology. Meanwhile, the unrelenting dominance of Nvidia's entire data center stack-from hardware to deep learning libraries-has made it (at least temporarily) the most valuable company in the world. In each of these cases, the teams in charge took ownership of the entire system, jointly optimizing it over many iteration cycles to achieve superior metrics. It is worth stressing that the same depth of expertise required for proposing a comprehensive initial design is needed for continually refactoring a system to improve its scalability, maintainability, security, and fault tolerance as development progresses</p><p>Superhuman AI agent capability in system engineering gives us a much better chance of addressing civilizational challenges, such as scaling clean energy systems, securing reliable water and food supplies, and lowering the cost of economically important finished goods. In other words, superhuman-level system engineering is the key to producing utopian abundance (provided we solve the alignment problem for such superintelligence). Full automation of physical projects will also require general-purpose robotics, which may be a bottleneck in the near term. Yet as those technologies mature, AI agents could combine high-level system design with low-level mechanical tasks, delivering a fully optimized, end-to-end engineering capability for arbitrarily complex systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Designing Evaluations for System Engineering</head><p>We highlight core trade-offs associated with building systems, namely efficiency, scalability and adaptability. We argue that system engineering training and evaluation environments must be dynamic and open-ended to adequately assess the dynamic equilibrium of these characteristics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Real-World Intuition</head><p>In the design phase of a system engineering project, the focus is on delivering a proposal that meets various requirements and user preferences for features and costs. This requires deep domain expertise since many valid proposals can exist, yet vary in terms of up-front costs, maintenance costs, implementation time, complexity, regulatory compliance, scalability, and so on. Design capability is readily tested in the software industry with system design interviews that pose questions such as "How would you design a real-time collaborative word processing application like Google Docs?" or, more bluntly, "Design Google Docs.", "Design Uber.", "Design Twitter.", etc. These questions are not meant to be answered in a single pass, but rather serve as a starting point for iteratively gathering requirements and proposing increasingly detailed solutions.</p><p>Figure <ref type="figure">1</ref>. The Law of Requisite Variety. TV : A → E is a trajectory where a system stays viable through adaptation. TU : A → D′ shows an alternate trajectory where the system does not adapt and becomes unviable. A system is viable within the total state space S when the variety of the environment at that time VE remains a subset of variety the system can handle VR. Systems must adapt proactively (A → B) to ensure this condition is met, but then ideally reduce variety to improve efficiency and maintainability (D → E).</p><p>After a real system is designed, the implementation phase begins and often never truly ends. Successful systems typically continue to expand in scope because increased outputs fuel greater demand. This pattern is evident in large software services, energy networks, and public transportation systems. Even if overall scale plateaus, there is an ongoing need for repair and maintenance-particularly in physical systems but also in software, which must periodically upgrade dependencies and refactor for performance. Consequently, the longevity and effectiveness of a system fundamentally depend on its capacity to assimilate feedback and adapt to inevitable changes.</p><p>Feedback collection is facilitated through automated means like logging in software or more manually such as accepting verbal customer feedback. Adapting the system with this feedback is thus core to ensuring it meets expectations through key performance indicators. Some future scenarios are more serious and difficult to fully predict. Recent examples such as the COVID-19 pandemic required large-scale adaptations not seen since World War II, and the volatility of geopolitics-as highlighted by the conflict in Ukraine-continues to demand swift adjustments in global systems. Natural disasters like hurricanes and wildfires, technological breakthroughs such as the generative AI boom, major cybersecurity incidents, and new discoveries of key commodities further underscore the need for flexible system design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Supporting Theory</head><p>Fortunately, the study of systems has long acknowledged the value of adaptability, leading to foundational frameworks that inform real-world solutions. One such lineage is cybernetics <ref type="bibr" target="#b42">(Wiener, 1948)</ref>, which reveals how continuous feedback loops and robust communication channels allow systems to counter external disturbances. Ashby's law of requisite variety (LRV) <ref type="bibr" target="#b1">(Ashby, 1956)</ref> stresses that systems must possess enough complexity (known as variety) internally to handle the complexity of potential external disruptions (Figure <ref type="figure">1</ref>. If this condition is not met, it can lead to a loss of stability of the system, meaning that it will not be able to maintain desired indicators of success. The intuition is comparable to that of machine learning theory, where out-of-distribution inputs lead to poor model performance.</p><p>The law is typically presented in the static setting, meaning it applies to the (internal) response variety (V R ) and environmental variety (V E ) at any given time. However, it can be extended to apply over time, where the configuration of a system must be able to change in order to support the particular variety of the environment over time (Figure <ref type="figure">1</ref>). Building on this, Beer's viable system model (VSM) <ref type="bibr" target="#b3">(Beer, 1959;</ref><ref type="bibr" target="#b3">1972)</ref> emphasizes hierarchical structures for robust systems. The modularity of hierarchy allows different levels of a system to handle only the variety of inputs which the level is responsible for (Figure <ref type="figure" target="#fig_0">2</ref>, Table <ref type="table" target="#tab_0">1</ref>). For example, the lowest level (System 1) of viable systems are the autonomous operational units which act in the world, so they individually only need to support their distinct lowlevel functions. In this model, it is essential for systems to have a layer which plans proactive adaptation (System 4), enabling organizations and infrastructures to pivot swiftly under changing requirements.</p><p>The law of requisite variety (LRV) and the viable system model (VSM) highlight a central tension in robust system operation: efficiency and flexibility tend to come at the cost of each other. For instance, a mechanized assembly line can mass-produce a single product more rapidly than a human worker, yet the latter may be more versatile in producing a variety of items. In software, production-level code is often streamlined through rigid abstractions, whereas oneoff scripts are less optimized but highly flexible. Even in the study of LLMs, the choice between prompt-engineering large models and finetuning smaller ones reflect this same trade-off. This principle is shown graphically in Figure <ref type="figure">1</ref> where system variety V R is expensive to maintain, and ultimately should be reduced when unneeded. Likewise, Figure 2 illustrates that System 3 and 4 directly embody this tension and it is up to System 5 to arbitrate and maintain cohesion. Scaling up and maintaining systems thus presents a persistent challenge of preserving dynamic equilibrium, in which the benefits of automation and scale do not compromise a system's capacity to adapt <ref type="bibr" target="#b12">(Forrester, 1961;</ref><ref type="bibr" target="#b17">Holling, 1973;</ref><ref type="bibr" target="#b37">Sterman, 2000)</ref>.</p><p>From a machine learning perspective, adaptability has been explored under many paradigms, including domain adaptation <ref type="bibr" target="#b30">(Redko et al., 2022)</ref>, meta-learning for agents <ref type="bibr" target="#b2">(Beck et al., 2024)</ref>, continual learning <ref type="bibr" target="#b41">(Wang et al., 2024)</ref>, incontext learning <ref type="bibr" target="#b8">(Dong et al., 2024)</ref>, and out-of-distribution generalization <ref type="bibr" target="#b22">(Liu et al., 2023)</ref>. Central themes across these fields involve developing robust representations, ensuring sample-efficient training, and promoting safe exploration. By weaving AI-driven automation into systems, we now have the opportunity to significantly enhance both efficiency and adaptability-two objectives that have traditionally been at odds. See Table <ref type="table" target="#tab_0">1</ref> for longer descriptions. These levels are only responsible for the variety associated with that level and can escalate or delegate as needed. A key aspect is how Level 5 effectively balances out the tension between Levels 3 and 4 which are more present-and future-focused respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Evaluations for AI Agents</head><p>Recent advances in AI research have fueled efforts to build virtual agents capable of increasingly complex interactions with real-world interfaces. As these cognitive capabilities continue to mature, they provide a foundation for agents to meaningfully contribute to system engineering projects.</p><p>Realizing this vision, however, requires a fundamental rethinking of how we both train and evaluate virtual AI agents.</p><p>Evaluation methods for LLM-derived agents naturally began with classic NLP benchmarks, such as question answering in MMLU <ref type="bibr" target="#b16">(Hendrycks et al., 2021)</ref>. They have since evolved to encompass multi-turn interaction <ref type="bibr" target="#b47">(Zheng et al., 2023)</ref>, multimodality <ref type="bibr" target="#b45">(Yue et al., 2024)</ref>, and external tool use <ref type="bibr" target="#b48">(Zhou et al., 2023;</ref><ref type="bibr" target="#b15">He et al., 2024)</ref>-capabilities expected of advanced AI agents. SWE-bench <ref type="bibr" target="#b19">(Jimenez et al., 2024)</ref> (and its multimodal extension <ref type="bibr" target="#b44">(Yang et al., 2024)</ref>) is likely the most challenging agent benchmark in use today. It requires agents to resolve issues in codebases by modifying multiple files and subsequently passing unit tests. Though it involves reasoning and multi-step planning, it remains a static evaluation that does not measure the capacity to maintain dynamic equilibrium between VSM Systems 3 and 4 and deal with the uncertainty of dynamic environment variety as per the LRV. This would hold true even for an extension of the benchmark in which agents designed a system like Google Docs and implemented it, yet never had to respond to changing requirements or circumstances.</p><p>By contrast, non-LLM-based agents have often been evaluated in dynamic environments. This is the case for agents achieving superhuman performance in competitive games such as Go <ref type="bibr" target="#b35">(Silver et al., 2017)</ref> and StarCraft II <ref type="bibr" target="#b38">(Vinyals et al., 2019)</ref>, where the presence of an opponent forces rapid adaptations to both the agent's own actions and those of adversaries. For a time, increasingly complex games appeared to be a promising route to building general intelligence, culminating in work on Minecraft via Voyager <ref type="bibr" target="#b40">(Wang et al., 2023)</ref> and MineDojo <ref type="bibr" target="#b11">(Fan et al., 2022)</ref>. These agents achieved goals in a dynamic, open-ended environment, with effectively unconstrained objectives demanding resource gathering, multi-step planning, and adaptability to emergent challenges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">The Ideal Evaluation Environment for System Engineering</head><p>Interest in dynamic, open-ended environments waned somewhat after the advent of LLM-based generalist models. However, the rapid evolution of ChatGPT and its successors-featuring multimodality, tool-use capabilities, and ample test-time compute-opens new possibilities for resurrecting this research agenda in a more advanced form.</p><p>We deduce from the ar, sandbox games which support au-tomation as a mechanic are the ideal setting for evaluating system engineering. They let researchers specify high-level objectives and observe an agent's ability to break down tasks, weigh trade-offs, and implement solutions. Over time, the researcher can change these objectives or introduce disruptions, testing the agent's capacity to maintain a healthy dynamic equilibrium as per the viable system model. Greater open-endedness is also desirable as it allows for more comprehensive testing of an agent's ability to comply with the law of requisite variety. Simulated environments additionally have the benefits of being fundamentally safer than real-world testing and can manage the trade-off between world physics complexity and scalability.</p><p>Drawing on Minecraft as inspiration, one can envision an "ideal" environment that focuses on abstractions relevant to system engineering while omitting excessively detailed physics. Full 3D simulations can be computationally expensive and often distract from the higher-level reasoning crucial for scaling and process orchestration. Accordingly, a game environment centered on resource flows, balancing trade-offs, and long-horizon planning is preferable. Core properties of such an environment include:</p><p>• Automation. The agent's action space should permit automating processes and managing the associated trade-offs between efficiency and adaptability. This is key for testing System 3 and 4 capability as per the VSM.</p><p>• Complex Evaluation Metrics. Long-horizon performance, resource usage, and resilience under partial failures become measurable, enabling richer assessments than single-turn tests. This is part of high environment variety in the LRV.</p><p>• Multi-Agent Support. Collaboration with peers, hierarchical coordination, and competition with adversaries significantly increase complexity, further testing an agent's capacity to adapt. This is also key for testing System 3 and 4 capability in the VSM.</p><p>• Modding Support. Allowing users and artificial agents to create modifications or extensions fosters adaptation to out-of-distribution scenarios. This another way to have high environment variety in the LRV.</p><p>• Scalability. The environment mechanics should be at the right level of abstraction to facilitate systems reasoning, planning, and implementation without requiring excessive computational resources.</p><p>There to one or more of the above criteria. As the next section will show, Factorio stands out for providing an ideal testbed for AI system engineering: its mechanics inherently encourage large-scale "megabase" building, resource management, automation, and iterative adaptation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Factorio as a System Engineering Testbed</head><p>We now argue that Factorio is an ideal environment to develop system engineering capability in AI agents. We describe the mechanics, features and extensible scope of the game and put forth a call for using Factorio as a platform for public research. Interested readers can find a more detailed walkthrough of the game in Appendix A</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Overview</head><p>Factorio is a 2D, top-down factory-building game that centers on automation, rendering it a uniquely rich environment for developing and evaluating AI agents with strong system engineering capabilities. Although it shares the opensandbox approach of titles like Minecraft, Factorio is far better suited for this purpose as it emphasizes building systems with high throughput, efficiency, and resilience. Automating the production of goods-from early hand-assembled items to complex industrial chains-is not merely a side option but rather the heart of the gameplay. This emphasis on scaling and optimizing factories pushes agents to navigate challenges that mirror real-world engineering dilemmas: resource constraints, energy usage, logistical complexity, and even defensive measures against hostile forces.</p><p>A key metric of success is science per minute (SPM), a community-standard indicator of a factory's overall efficiency in generating the science packs needed for techno-logical progress. Because each successive tier of research unlocks new possibilities (e.g., improved assemblers, trains, robots) but also imposes heavier resource and energy demands, any small inefficiency can ripple into crippling bottlenecks. Consequently, an effective agent must maintain the appropriate degree of variety in its approach at all times, ensuring that its decision-making processes can handle the game's growing complexity and unexpected fluctuations. SPM makes for a great summary benchmark metric, with human novice bases at ∼0-30 SPM, intermediate at ∼30-200 SPM and advanced bases at ∼200-1000+ SPM.</p><p>From a VSM perspective, Factorio initially starts players at purely System 1 activities like manually extracting coal and iron to be placed in a hand-crafted furnace. The use of automated conveyer belts with splitting and load-balancing mechanisms combined with automated inserter arms elevates design to a System 2 level. A key gameplay entity is the assembler which can be programmed with a recipe to convert inputs to finished outputs using materials, power and space for operation. Scaling the automated production of intermediate goods setting up train cargo networks and selecting technology tree paths are all System 3, 4 and 5 functions (Table <ref type="table" target="#tab_0">1</ref>). A pivotal late game technology is the use of automated construction robots which can be used to rapidly bring and place materials in accordance with large, complex player-made blueprints. This capability hence focuses gameplay purely on systems-level control problems, choosing the right smelting column, railway depot, solar array configuration, etc. to evolve the base as needed.</p><p>This versatility is further magnified by Factorio's robust modding support, which allows researchers and the broader community to introduce new mechanics, custom APIs, or entire rebalanced rule sets. In other words, the sandbox nature of Factorio can be extended indefinitely, enabling the environment itself to evolve and stress-test an agent's capacity to adapt and manage variety. Such flexibility in scaling and customization makes Factorio ideal for public research, as it encourages the development of AI agents that can grow beyond initial, narrowly-defined tasks and rise to dynamic challenges that demand integrated System 1-5 competencies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Challenges for Current AI Agents</head><p>While AI agents have made remarkable progress in reasoning and multimodal interaction, there remains a sizable gap between the capabilities of frontier agents (e.g. <ref type="bibr">(Google DeepMind, 2024;</ref><ref type="bibr" target="#b27">OpenAI, 2025)</ref>) and the level of sophistication needed to thrive in Factorio-and, by extension, in complex real-world systems. For example, Factorio uses traditional a keyboard-and-mouse interface with numerous GUI windows and features detailed real-time visualization-where every item, belt, or robot is tracked on screen from a 2D view. This is coupled with the ability to view monitoring for practically all processes, placing it at the cutting edge of current AI capabilities for handling multimodal data bandwidth and human interface use.</p><p>Bases are commonly developed over several dozens if not hundreds of hours. There is a tremendous amount of temporal information involved in optimizing a base which would certainly test the long-context nature of frontier agents. Sophisticated memory and recall systems would undoubtedly be necessary for an LLM-based agent to succeed in an extended episode playing Factorio. Separately, planning for the future would certainly benefit from time spent reasoning, but this comes at a cost when acting in a real-time environment, hence aligning interplay of System 3 and 4 with a key compute usage trade-off.</p><p>Addressing these technical barriers also highlights the importance of multi-agent collaboration: large-scale systems often require multiple agents or human-agent teams working in sync. This necessitates coordination frameworks that facilitate shared state and efficient task delegation. Moreover, real-world complexities like supply-chain delays or hardware breakdowns call for robust decision-making under uncertainty-agents must act swiftly and safely, even with incomplete information. Nevertheless, scaling compute FLOPs and refining AI architectures are likely to improve input-output flow management to the point where agents can handle advanced simulations like Factorio in real time (realistically the game only needs to be played at around 5 FPS), without relying on domain-specific observation and action spaces, as was common in earlier superhuman-agent research such as AlphaStar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Modding, Market Interactions, and the Agent-Evaluator Framework</head><p>Factorio's modding ecosystem is unusually flexible, allowing Lua scripts to fundamentally alter or extend nearly every facet of the simulation. At one end, small "Quality-of-Life" mods streamline actions like inventory management or blueprint deployment-an approach often mirrored in realworld industrial systems where specialized scripts automate repetitive tasks. At the other end, total conversion mods, such as Space Exploration <ref type="bibr">(Earendel)</ref> or Industrial Revolution 3 (Deadlock989) introduce entirely new resources, tech trees, and production pipelines. This capacity for extensive re-parameterization means researchers can craft tailored scenarios focusing on, for example, large-scale chemical manufacturing or advanced energy grids. By doing so, Factorio can serve as a robust platform for evaluating AI agents under conditions that closely resemble real-world system engineering challenges.</p><p>An especially promising application of this modding framework involves designing market pricing and multi-agent interactions. Factorio already supports multiplayer, and community-created mods showcase how resource trading, diplomatic pacts and emergent economies can drive the game's complexity (ZeroAinz; ZwerOxotnik). In a research context, introducing dynamic markets would allow agents to buy and sell resources, negotiate prices, and even form alliances or contracts-key elements of real-world logistics and supply chains. Observing how AI agents adapt to fluctuating market forces and coordinate with others could yield insights into cooperative and competitive strategies, as well as negotiation tactics and resilient system designs.</p><p>Beyond market dynamics, Factorio's modding API also lends itself to the concept of a Agent-Evaluator Framework. In this paradigm, a "evaluator" agent (human or AI) orchestrates scenario constraints, random events, or objectives (Informing system 5 as per the VSM) while the "agent" attempts to build and maintain a functional factory. This setup is well-suited to self play-like reinforcement learning algorithms, where the evaluator can inject perturbations-ranging from supply shortages to power-grid failures-testing the agent's capacity for adaptive, long-horizon decision-making. The evaluator could also coordinate multiple agents with distinct roles or goals, enabling both collaboration and competition. Such arrangements bring Factorio closer to real-world engineering environments, where teams of engineers and managers must not only design but also continually refactor systems in response to shifting requirements and unforeseen disruptions.</p><p>By blending flexible modding, multi-agent mechanics, and the Agent-Evaluator approach, Factorio becomes more than just a factory-building game. It becomes a powerful sandbox for studying how AI agents might operate in large-scale, ever-evolving ecosystems-spanning everything from supply-chain economics to self-directed adaptation and robust error handling. This versatility sets Factorio apart as a uniquely comprehensive testbed for advancing AI-driven system engineering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Technical Advantages</head><p>Beyond the near-limitless opportunities provided by mods, Factorio offers a few key advantages that are worth highlighting. First, as a 2D game, it is far more resource efficient for the complexity of systems that can be built in it as it does not involve costly 3D graphics rendering as would be the case in other titles such as Satisfactory. Even despite this major difference, Factorio is well-known to be a very welloptimized game in terms of memory usage, as it has been continually refined by its dedicated team since its first public release in 2012. Furthermore, the game is platform-agnostic, running natively on Windows, Mac OS X and Linux, which is rare. It offers a free headless Linux server for supporting well-optimized multiplayer gameplay which would be crucial for human-AI and multi-AI agent experimentation. And as mentioned before, the game has exceptional support for modding, showcased by community mods which completely overhaul the tech tree, environmental mechanics and GUI systems. We believe it is quite feasible to build an API layer for control as an intermediate solution for AI usage similar to Mineflayer (PrismarineJS, 2024) (used in the Voyager project <ref type="bibr" target="#b40">(Wang et al., 2023)</ref>). In fact, that could even be a task for an AI agent to perform as part of its introduction to the game.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Alternative Views</head><p>Some critics argue that advancing AI system engineering is premature, given that core capabilities-like consistent reasoning, robust multimodality, and factual grounding-remain underdeveloped. They believe AI should first address these foundational weaknesses before tackling higher-level tasks. Yet proactive, orthogonal research can reveal new performance bottlenecks and drive innovation across modalities. Much as multimodality has progressed alongside unresolved text-based issues, tackling system engineering now can highlight what crucial gaps persist, helping to shape more integrated AI architectures.</p><p>Another concern is the risk of entrusting critical infrastructures to automated agents. Misaligned objectives or flawed reasoning could theoretically sabotage energy grids, supply chains, or other vital systems. While these dangers merit attention, the potential benefits-greater efficiency, cost savings, and creative solutions-are substantial. Alignment sits at the core of system engineering, which is rooted in clear requirements, continuous feedback loops, and stakeholder validation. By maintaining transparency and accountability, AI-driven engineering can strike a balance between prudence and progress.</p><p>Skeptics may also doubt whether games like Factorio adequately reflect real-world complexities, noting they often omit granular physical laws or regulatory constraints. Yet such "unrealistic" environments highlight the essence of system engineering-resource management, strategic planning, and iterative trade-offs in efficiency, adaptability, and cost-far better than static benchmarks and without the noise associated with realistic physics simulations. Skills developed in orchestrating large-scale virtual factories can be paired with domain-specific testing to produce a fuller assessment of AI's strengths. This integrated approach shows where AI excels (e.g., in macro-level design) and where further refinement is needed before applying these insights to physical-world applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusion</head><p>AI agents stand on the verge of a new era where they can systematically design, optimize, and maintain complex systems in ways that rival or surpass human expertise. While LLMs have already showcased impressive capabilities for text generation, the true promise lies in the agentic paradigm-with integrated multimodal interfaces, memory, autonomy, and adaptive planning.</p><p>We have argued that system engineering represents a highleverage domain for such agentic AI. Whether the task is orchestrating large-scale software infrastructures or managing logistical networks, adaptability and continuous learning map naturally onto the strengths of a well-trained AI agent. Yet, to properly develop and evaluate these systems, we must look beyond static benchmarks toward open-ended simulations that reflect real-time constraints, multi-agent collaboration, and shifting objectives.</p><p>In this regard, Factorio emerges as a compelling platform, providing a safe yet rich environment for refining agentic capabilities. Its emphasis on real-time resource management, multi-objective optimization, and large-scale factory layouts makes it a microcosm of industrial-scale challenge. Success in Factorio would signal that agents can handle real complexity, track multiple objectives, and adapt in realistic ways.</p><p>In conclusion, the evolution from LLM-based chatbots to versatile AI agent that can tackle system engineering marks a logical next step if we hope to solve the grand challenges of our era. By leveraging automation-oriented sandbox simulations like Factorio, we can accelerate progress toward AI systems that orchestrate research, design, and operations at scale-fundamentally reshaping how societies function and flourish in the coming decades.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Visual Introduction to Factorio</head><p>This appendix provides a high-level, illustrated overview of key Factorio systems, ensuring that newcomers can grasp the fundamental mechanics of extracting resources, setting up production lines, defending against threats, and automating workflows. Each subsection introduces core concepts, from the simplest mining operations to advanced infrastructures like rail networks, circuit logic, and robot-assisted construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1. Resource Extraction and Smelting</head><p>The foundation of any Factorio factory is consistent raw material throughput. Players begin by placing mining drills on ore patches-such as iron or copper-where the drills extract resources at a steady rate. Ores are usually transported via conveyor belts to nearby smelters, which convert them into plates. A typical early-game setup involves an arrangement of furnaces linked by belts on both the input (ore) and output (finished plates) sides. This workflow underpins the factory's growth: higher demand for plates necessitates expanding both mining operations and smelting capacity. We first refer to Figure <ref type="figure" target="#fig_1">3</ref>. The automation process begins with the mining drills in Box A, which extract raw iron ore (blue material) from resource nodes and place it onto conveyor belts for transport downstream. These drills eliminate the need for manual mining, significantly increasing throughput and setting the foundation for automated workflows. In Box B, the raw iron ore is delivered to stone furnaces, where inserters (mechanical arms) feed the ore into the furnaces and remove the resulting iron plates-a critical intermediate resource-onto separate belts. This dual-belt system, fed by both raw iron ore and coal, ensures a continuous and automated smelting process. Finally, in Box C, the belts are routed efficiently using underground segments to avoid intersection conflicts, enabling seamless transport of resources. Yellow inserters deliver iron ore into the furnaces, while red inserters extract the smelted iron plates, which are then routed onward for further processing. This layered system of extraction, smelting, and material routing illustrates the early-game challenges of compact, efficient factory design in Factorio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2. Automation with Assemblers and Managing Complexity</head><p>Automation through assemblers is a cornerstone of Factorio gameplay, enabling exponential growth in productivity by trading energy and space for vastly higher throughput. The production of science packs is central to the objective of unlocking advanced technologies. The earliest science packs are automation (red) and logistic (green) science. The dependencies for crafting these are shown in Figure <ref type="figure" target="#fig_2">4</ref>. Taking the example of logistic science, Figure <ref type="figure" target="#fig_3">5</ref> illustrates that it takes 6s to assemble if the intermediate goods of transport belts and inserters are available. If only the raw materials of iron and copper plates are present then it will take 8.7s since the intermediate goods themselves need to be created. Hence, by automating intermediate goods, the factory can parallelize workflows, ensuring higher efficiency and faster output. There are thus many points to consider when designing assembly lines for these finished goods. The throughput of inputs and outputs should be well-matched given the ratios of materials needed in recipes. The demand for a common base resource has to be managed well across different use cases. The factory has to be actively refactored as increased scale means greater space and energy requirements. An example of a compact design which produces both red and green science is shown in Figure <ref type="figure" target="#fig_7">10</ref>. While it looks efficient, issues may arise when the scale of production needs to increase, since the routing of intermediate goods would be significantly complicated. Efficient layouts must balance immediate needs with scalability, ensuring that adding new production lines or expanding capacity can be achieved without overhauling the entire factory. This reliance on science packs is why science per minute (SPM) emerges as a critical metric for measuring factory productivity. A high SPM indicates that the factory has sufficient capacity not only to produce the required intermediates efficiently but also to scale them as the tech tree demands become more complex. For example, early-game science packs (red and green) require relatively simple intermediates such as gears, transport belts, and inserters, as shown in Figure <ref type="figure" target="#fig_4">6</ref>. However, as the factory evolves, higher-tier science packs (such as blue or utility science) introduce more advanced recipes involving fluids, electronics, and complex multi-stage production.</p><p>The tech tree in Figure <ref type="figure" target="#fig_4">6</ref> highlights this progression, showcasing how early-game technologies provide foundational tools like transport belts and inserters, which are then leveraged to unlock more advanced machinery such as trains and assemblers. This cascading dependency structure requires careful planning to ensure that production systems remain adaptable to increasing demands. The iterative process of unlocking technologies feeds back into the factory itself, enabling further automation and resource optimization. The science system is thus a core gameplay mechanic that ties together automation, logistics, and long-term planning, creating a continuous cycle of technological advancement and production refinement. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4. Power Generation Options</head><p>Factorio offers diverse power solutions that evolve with the factory's scale, closely mirroring the progression of energy systems in real-world industrial engineering. Early operations rely on steam engines fueled by coal, providing a reliable but resource-intensive solution. Coal mining introduces logistical challenges, requiring consistent supply chains and raising concerns about pollution, which in the game aggravates hostile aliens and causes them to attack the agent's base (see the next subsection). As research progresses, solar panels and accumulators become viable for renewable energy. While solar panels offer clean, sustainable power, they come with limitations tied to diurnal cycles, requiring accumulators to store excess energy for nighttime use. This trade-off between sustainability and infrastructure demands mirrors the challenges of integrating renewables into modern power grids, where storage and energy distribution systems are key bottlenecks.</p><p>Nuclear power, a late-game solution, exemplifies highdensity energy production but comes with its own complexities. Players must process uranium, manage heat generation, and design safe reactor layouts to avoid catastrophic failures, echoing real-world concerns around nuclear fuel cycles, reactor safety, and waste management. The spatial footprint of energy systems also becomes a critical factor: steam and nuclear setups require compact layouts with high resource input, while sprawling solar farms demand significant land allocation. A reference for nuclear power is shown in Figure <ref type="figure">7</ref> Figure <ref type="figure">7</ref>. Nuclear power generation is actually quite realistic in Factorio. Uranium ore is mined, the vast majority of which (99.3%) is inert U-238. The more valuable U-235 is needed for energyintensive applications. There is an enrichment process by which U-238 can be refined to make more U-235 provided some initial quantity of U-235. Then this is utilized in nuclear reactors which can produce steam to power turbines. (FactorioWiki)</p><p>Each energy choice in Factorio presents distinct tradeoffs-coal introduces pollution but offers consistency, solar minimizes pollution but requires storage solutions and space, and nuclear delivers immense power but requires advanced materials and precise management. These dynamics force players to weigh efficiency, scalability, and sustainability, capturing the essence of systems engineering in real-world energy infrastructure. By gradually introducing more advanced technologies and requiring players to adapt their power networks, Factorio illustrates the iterative process of scaling energy systems to meet growing demands while addressing environmental and logistical constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.5. Biters and Defense</head><p>As factories grow and produce pollution, the indigenous alien lifeforms-commonly called Biters-become increasingly hostile, posing a persistent threat to factory operations. Pollution emitted by the factory spreads across the map, and once it reaches a Biter colony, such as the one depicted in Figure <ref type="figure" target="#fig_5">8</ref>, it triggers aggressive behavior. Biters begin spawning in waves to attack the factory, targeting structures and resources critical to production. This introduces a dynamic tension between industrial expansion and the need to secure valuable infrastructure, reflecting real-world trade-offs in industrial development where growth often necessitates heightened security measures.  Early defenses rely on a combination of walls and gun turrets, as seen in Figure <ref type="figure" target="#fig_6">9</ref>, where turrets gun down an approaching wave of Biters at a fortified perimeter. Gun turrets provide reliable protection during the early stages but depend on a steady supply of ammunition, which itself requires dedicated production lines. As the factory evolves, more advanced defensive structures like flamethrower turrets, laser turrets, and artillery become available. Flamethrowers are particularly effective for handling large swarms due to their area-of-effect damage, while laser turrets require no ammunition but demand significant power, introducing another layer of logistical complexity. Artillery, a late-game option, allows players to strike Biter nests at long range, proactively reducing the threat level.</p><p>Strategically fortifying perimeters and clearing nearby Biter nests becomes essential as pollution spreads farther and factory operations grow in scale. Defensive layouts must balance resource efficiency with resilience, ensuring that critical areas are well-protected without overextending the factory's capacity to supply power, ammunition, or repairs. Additionally, players must consider choke points, turret placement, and overlapping fields of fire to maximize defensive effectiveness.</p><p>A.6. Complex Belts and Main Factory Layouts</p><p>Conveyor belts are the arteries of a Factorio base, transporting materials between production stages with speed and efficiency. While straightforward in the early game, managing belts becomes increasingly complex as factories grow. Scaling introduces challenges such as belt congestion, balancing input and output ratios, and ensuring that each production branch receives the right materials without overloading the system. Designing efficient layouts to manage this complexity is critical for avoiding "spaghetti"-a term used by the community to describe tangled, chaotic belt arrangements that hinder scalability and troubleshooting.</p><p>One popular solution to these challenges is the main bus design, as shown in Figure <ref type="figure" target="#fig_8">11</ref>. A main bus consists of a centralized set of parallel belts carrying essential resources like iron plates, copper plates, gears, and circuits. Branches extend from the main bus to feed production lines, ensuring that critical resources are readily available across the factory. This design prioritizes simplicity and organization, making it easier to scale production by adding new branches or extending the bus itself. However, maintaining a main bus requires careful planning to prevent bottlenecks and to allocate space for future resource additions. Players must also ensure that belts remain balanced to avoid starving downstream branches of materials.</p><p>An alternative to the main bus approach is the city block design, illustrated in Figure <ref type="figure" target="#fig_9">12</ref>. In this modular approach, the factory is divided into distinct "blocks," each dedicated to a specific function, such as smelting, circuit production, or science pack assembly. These blocks are connected by train networks, allowing resources to be transported efficiently between distant sections of the factory. The city block layout offers excellent scalability, as additional blocks can be added without disrupting existing workflows. It also improves manageability, as each block operates semiindependently, reducing the risk of widespread factory failures due to localized issues.</p><p>Both layouts demonstrate distinct trade-offs. The main bus design excels in compactness and simplicity, making it ideal for medium-sized factories, but it can become unwieldy as the number of resources grows in the late game. City block layouts, while more complex to set up initially, provide unmatched flexibility and extensibility, especially when managing large-scale operations with diverse production needs. Figures 11 and 12 highlight the strengths of these designs,  showcasing how thoughtful belt organization and transportation planning are essential for managing complexity and ensuring smooth factory operation as production demands increase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.7. Rail Networks</head><p>At mid to late stages of Factorio, trains become a critical component of resource logistics, allowing raw materials and finished goods to be transported across vast distances.</p><p>Tracks are laid out on a tile-based map, with stations configured for specific tasks such as ore pickups and deliveries to smelting or assembly sites. Trains enable players to overcome the limitations of conveyor belts, which can become cumbersome and inefficient for long-range transport, providing a scalable solution that supports factory growth.</p><p>Designing a robust railway system requires careful planning and mastery of key mechanics. Figure <ref type="figure" target="#fig_10">13</ref> shows a typical train loading setup, where numerous inserters work in parallel to load ore into cargo carriages quickly. Efficient loading and unloading are essential to minimize train idle times   The train management system extends beyond physical tracks, as shown in Figure <ref type="figure" target="#fig_12">15</ref>, which displays the GUI for monitoring train activity. This interface allows players to track the status of all trains in the network, observe their current locations, and adjust schedules or routes as needed.</p><p>The train monitor is an invaluable tool for diagnosing delays, optimizing routes, and ensuring that all resource flows remain balanced.</p><p>A well-designed railway system is not just a means of transport but a backbone for factory expansion, allowing new outposts and production sites to be integrated seamlessly into the larger network. By balancing efficient loading, modular track designs, and robust train management, players can scale their factories to unprecedented levels while maintaining resource flow and minimizing logistical bottlenecks. A.8. Inventory, Blueprints, and Construction Robots</p><p>Players interact with a comprehensive inventory GUI that tracks personal items, crafting queues, and equipment. This interface underpins many of the high-level systems within Factorio, ensuring that even the most complex production chains remain manageable. When testing these systems-particularly in large-scale or late-game scenarios-developers and players alike must verify that inventory updates, crafting queues, and personal equipment management work seamlessly without bottlenecking progress. Such testing is crucial because any inefficiency or bug in inventory handling can cascade throughout a massive base, undermining the player's ability to grow their automation network.</p><p>A prime example of Factorio's advanced systems is the blueprint feature, which allows users to save layouts ranging from simple assembler setups to sprawling smelter arrays. As shown in Figure <ref type="figure" target="#fig_13">16</ref>, pasting a blueprint summons construction robots to automatically assemble buildings and belts, provided that the necessary items are available and that the structures remain within the logistic network's coverage (the robot hub range is visible in the center of the screenshot). High-level system testing involves confirming that these blueprint placements work at scale: robots must reliably build, repair, and upgrade components in the correct order and handle resource shortages gracefully. If the blueprint system or robot AI malfunctions, it can cause partial constructions or idle bots, quickly eroding the advantages of automation and frustrating the player. Moreover, these same construction robots facilitate largescale deconstruction, an equally vital aspect of advanced base management. Figure <ref type="figure" target="#fig_14">17</ref> illustrates the user highlighting a section of the factory for removal-once marked, robots swarm to dismantle it, returning valuable materials to the appropriate storage points. Rigorous testing here ensures that no mismatches occur in item retrieval, that robots can safely access all structures slated for removal, and that the logistic system manages reclaimed items without jams. Essentially, blueprints and bots automate both production and the creation of production, making the entire game experience highly recursive and reliant on flawlessly functioning high-level systems. Verifying these features in complex, large-scale conditions is critical for preserving Factorio's hallmark sense of continual, smoothly scaling automation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .</head><label>2</label><figDesc>Figure2. The Viable System Model. Systems are organized into five levels concisely given as: 1. operational units, 2. coordination, 3. present optimization, 4. future planning, and 5. ultimate policy. See Table1for longer descriptions. These levels are only responsible for the variety associated with that level and can escalate or delegate as needed. A key aspect is how Level 5 effectively balances out the tension between Levels 3 and 4 which are more present-and future-focused respectively.</figDesc><graphic coords="4,307.44,417.34,233.99,168.78" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. An example of early-game resource extraction and smelting in Factorio. Box A shows mining drills extracting iron ore, Box B highlights stone furnaces which take ore and fuel and create plates, and Box C highlights belt routing and inserter mechanics.(s6pgbu)    </figDesc><graphic coords="11,307.44,345.52,234.00,197.46" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Dependency graph for red and green science packs. Inputs include both raw materials and intermediates, reflecting the growing complexity of production chains.</figDesc><graphic coords="12,100.99,459.30,140.40,127.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Recipe for logistic (green) science packs. Automating intermediate goods significantly reduces total crafting time from 8.7 seconds (raw) to 6 seconds.</figDesc><graphic coords="12,364.70,186.62,117.00,125.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 .</head><label>6</label><figDesc>Figure6. Section of the tech tree which shows which technologies have logistic (green) science as a dependency. These include better transport belts, engines, trains, electric cables, circuit networks and more. Each recipe demands dozens if not hundreds of logistic science packs and so SPM becomes the bottleneck for further growth.</figDesc><graphic coords="13,89.30,185.19,163.80,137.21" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Biters are alien residents of the planet where the agent has crash landed. They are docile initially but become aggravated by air pollution from the factory's hydrocarbon-powered operations. Thinking about biters is thus a core trade-off of expanding systems in Factorio.</figDesc><graphic coords="14,55.44,308.37,233.99,119.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. Defense against Biters is essentially a resource sink in Factorio. Settings and mods can be used to dramatically change the difficulty associated with defending bases from Biters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 .</head><label>10</label><figDesc>Figure10. A red and green science production setup. All belts are running from left to right. Iron and copper plates enter on the bottom-most belt (Box A). There are assemblers throughout the line which have certain recipes selected. For example Box B has the assembler responsible for assembling green circuits. The inserters to the right of Box B automatically pull copper wire from that assembler and the yellow inserter above Box B pulls iron plates from the belt. The red inserter above Box B places finished green circuits onto the belt one tile above the belt with iron and copper plates. Similar assembly happens for gears, belts, and inserters. Ultimately, red and green science packs are produced from the intermediate goods and are ready for further use (Box C).</figDesc><graphic coords="15,102.79,67.06,388.81,207.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 11 .</head><label>11</label><figDesc>Figure 11. The main bus design is a common choice for mid-game scaling. Branches for individual component assembly fork off the main bus using belt splitters and underground belts. (Steam)</figDesc><graphic coords="15,55.44,372.28,234.00,128.53" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 12 .</head><label>12</label><figDesc>Figure12. The city block design is ideal for late-game mega-base building. Modular base sections are linked using rail networks for loading and unloading of items.(Imgur)    </figDesc><graphic coords="15,307.44,372.29,233.98,145.82" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 13 .</head><label>13</label><figDesc>Figure 13. Trains can move large quantities of resources long distances much faster than belts while reusing the same underlying infrastructure, making them crucial for any scalable build. (Gydron)</figDesc><graphic coords="16,307.44,67.06,233.98,159.06" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 14 .</head><label>14</label><figDesc>Figure 14. The variety and customization associated with building rail networks is vast in Factorio. (sparr)</figDesc><graphic coords="16,307.44,500.95,233.99,134.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 15 .</head><label>15</label><figDesc>Figure 15. Factorio gives players the ability to observe and orchestrate train networks with high customization (piper.spirit)</figDesc><graphic coords="16,55.44,67.06,233.98,105.06" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 16 .</head><label>16</label><figDesc>Figure16. Construction robots automate the placement of arbitrarily complex player-made blueprints. Here the blueprint has been partially constructed by robots and needs to be completed and connected to a source of power.(lmit1)    </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 17 .</head><label>17</label><figDesc>Figure17. Robots can also be used to efficiently clear out a factory and reclaim the resources. Here the section of the factory has been marked for clearance and robots will swarm it when the player finalizes the selection.(Argoya)    </figDesc><graphic coords="17,55.44,428.33,234.00,147.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Viable System Model (VSM) levels mapped to Factorio examples.</figDesc><table><row><cell cols="3">VSM Level Responsibility</cell><cell></cell><cell>Factorio Example</cell></row><row><cell>System 1</cell><cell cols="3">Front-line operations; directly</cell><cell>Assemblers, miners, and furnaces that convert raw materials (e.g.</cell></row><row><cell></cell><cell cols="3">transform inputs into outputs</cell><cell>iron ore) into plates and intermediate products. These are the basic</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>production units forming the backbone of the factory.</cell></row><row><cell>System 2</cell><cell cols="3">Coordinates and stabilizes</cell><cell>Conveyor belts, splitters, and simpler logistic setups to route</cell></row><row><cell></cell><cell cols="2">System 1 units</cell><cell></cell><cell>materials between different production areas, prevent bottlenecks,</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>and ensure each assembler or furnace receives the resources it needs.</cell></row><row><cell>System 3</cell><cell>Manages</cell><cell>and</cell><cell>allocates</cell><cell>Monitoring production levels, adjusting supply lines to balance</cell></row><row><cell></cell><cell cols="3">resources, drives efficiency,</cell><cell>throughput, and deploying construction/logistics bots for on-demand</cell></row><row><cell></cell><cell cols="3">ensures smooth operation</cell><cell>tasks such as repairs or setting up new sections. This maintains</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>overall operational stability.</cell></row><row><cell>System 4</cell><cell cols="3">Plans expansions, researches</cell><cell>Choosing research paths (e.g. robotics, nuclear power), planning</cell></row><row><cell></cell><cell cols="3">new technology, foresees future</cell><cell>additional outposts for resource gathering, and redesigning factory</cell></row><row><cell></cell><cell>needs</cell><cell></cell><cell></cell><cell>layouts to handle increased demand or optimize long-term efficiency.</cell></row><row><cell>System 5</cell><cell cols="3">Sets overall purpose, policy, and</cell><cell>Defining the ultimate mission (e.g. launching a rocket by a target</cell></row><row><cell></cell><cell>alignment</cell><cell></cell><cell></cell><cell>time), deciding on environmental constraints (such as minimizing</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>pollution), and determining the overarching strategy (e.g. peaceful</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>or militaristic).</cell></row></table><note><p>are many candidate sandbox games-Cities: Skylines, The Sims, Stardew Valley, Kerbal Space Program, No Man's Sky, Satisfactory, among others-that support a form of system engineering. Yet they each have limitations with respect</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Hippocratic AI. Correspondence to:Neel Kant &lt;neel@hippocraticai.com&gt;.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">How to cancel deconstruction</title>
		<author>
			<persName><forename type="first">V</forename><surname>Argoya</surname></persName>
		</author>
		<ptr target="https://gamerant.com/factorio-how-cancel-deconstruction/" />
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">An Introduction to Cybernetics</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Ashby</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1956">1956</date>
			<publisher>Chapman and Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">A survey of meta-reinforcement learning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Vuorio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">Z</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zintgraf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Finn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Whiteson</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2301.08028" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">S</forename><surname>Beer</surname></persName>
		</author>
		<author>
			<persName><surname>Cybernetics</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Management</surname></persName>
		</author>
		<author>
			<persName><surname>Wiley</surname></persName>
		</author>
		<author>
			<persName><surname>Sons</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1959">1959. 1972</date>
			<pubPlace>Allen Lane</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">S</forename><surname>Blanchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">J</forename><surname>Fabrycky</surname></persName>
		</author>
		<title level="m">Systems Engineering and Analysis</title>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
	<note>5th edition</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Buede</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Miller</surname></persName>
		</author>
		<title level="m">The Engineering Design of Systems: Models and Methods</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<ptr target="https://mods.factorio.com/mod/IndustrialRevolution3" />
		<title level="m">Deadlock989. Industrial revolution 3</title>
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">2023 Manufacturing Industry Outlook</title>
		<author>
			<persName><surname>Deloitte</surname></persName>
		</author>
		<idno>Decem- ber 30</idno>
		<ptr target="https://www2.deloitte.com/" />
		<imprint>
			<date type="published" when="2023">2023. 2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">Q</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Sui</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2301.00234" />
		<title level="m">A survey on in-context learning</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Space exploration</title>
		<author>
			<persName><surname>Earendel</surname></persName>
		</author>
		<ptr target="https://mods.factorio.com/mod/space-exploration.Ac" />
		<imprint/>
	</monogr>
	<note>cessed on 2025-01-29</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><surname>Factoriowiki</surname></persName>
		</author>
		<ptr target="https://wiki.factorio.com/File:Nuclear_setup.png" />
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Building open-ended embodied agents with internet-scale knowledge</title>
		<author>
			<persName><forename type="first">L</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mandlekar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-A</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Anandkumar</surname></persName>
		</author>
		<author>
			<persName><surname>Minedojo</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2206.08853" />
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Industrial Dynamics</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Forrester</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Trump announces $500b ai infrastructure project -with biz titans saying it can cure cancer</title>
		<author>
			<persName><forename type="first">D</forename><surname>Glebova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Nelson</surname></persName>
		</author>
		<ptr target="https://blog.google/technology/google-deepmind/google-gemini-ai-update-december-2024/" />
	</analytic>
	<monogr>
		<title level="m">Google Blog</title>
		<meeting><address><addrLine>New York Post</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2024">2025. 2024</date>
		</imprint>
	</monogr>
	<note>Introducing gemini 2.0: our new ai model for the agentic era</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Elon musk unveils surprise &apos;robovan&apos; at flashy tesla event, says optimus humanoid robots will cost less than a car</title>
		<author>
			<persName><forename type="first">A</forename><surname>Griffin</surname></persName>
		</author>
		<ptr target="https://www.reddit.com/r/factorio/comments/j0ftu0/consuming_a_full_blue_belt_with_3_stack_inserters/" />
		<imprint>
			<date type="published" when="2024">2024</date>
			<biblScope unit="page" from="2025" to="2026" />
			<pubPlace>New York Post</pubPlace>
		</imprint>
	</monogr>
	<note>train u nloading</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><surname>Webvoyager</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2401.13919" />
		<title level="m">Building an end-to-end web agent with large multimodal models</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Measuring massive multitask language understanding</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hendrycks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Basart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mazeika</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Steinhardt</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2009.03300" />
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Resilience and stability of ecological systems</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Holling</surname></persName>
		</author>
		<idno type="DOI">10.1146/annurev.es.04.110173.000245</idno>
	</analytic>
	<monogr>
		<title level="j">Annual Review of Ecology and Systematics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="23" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">City blocks</title>
		<author>
			<persName><surname>Imgur</surname></persName>
		</author>
		<ptr target="https://imgur.com/a/welcome-to-grid-YORiJ" />
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Swe-bench: Can language models resolve real-world github issues?</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Jimenez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Wettig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Narasimhan</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2310.06770" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Highly accurate protein structure prediction with alphafold</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jumper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Evans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pritzel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Figurnov</surname></persName>
		</author>
		<idno type="DOI">10.1038/s41586-021-03819-2</idno>
		<ptr target="https://www.nature.com/articles/s41586-021-03819-2" />
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">596</biblScope>
			<biblScope unit="issue">7873</biblScope>
			<biblScope unit="page" from="583" to="589" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Kossiakoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sweet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Seymour</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Biemer</surname></persName>
		</author>
		<title level="m">Systems Engineering Principles and Practice. Wiley</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Towards out-of-distribution generalization: A survey</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Cui</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2108.13624" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<ptr target="https://www.reddit.com/r/factorio/comments/b0errp/why_are_the_construction_robots_not_building_the/" />
		<title level="m">Construction bots are not building</title>
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Architecting the Future of Systems and Software: A Computational Intelligence Perspective</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Madni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Madni</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Building Resilient Semiconductor Supply Chains</title>
		<author>
			<persName><forename type="first">Company</forename><surname>Mckinsey</surname></persName>
		</author>
		<ptr target="https://www.mckinsey.com" />
		<imprint>
			<date type="published" when="2022-12-30">2022. December 30, 2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Nvidia announces project gr00t foundation model for humanoid robots and major isaac robotics platform update</title>
		<author>
			<persName><surname>Nvidia</surname></persName>
		</author>
		<ptr target="https://nvidianews.nvidia.com/news/foundation-model-isaac-robotics-platform" />
	</analytic>
	<monogr>
		<title level="j">NVIDIA Newsroom</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Introducing operator research preview</title>
		<author>
			<persName><surname>Openai</surname></persName>
		</author>
		<ptr target="https://openai.com/index/introducing-operator/" />
	</analytic>
	<monogr>
		<title level="m">Ope-nAI</title>
		<imprint>
			<date type="published" when="2025">2025</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Gencast predicts weather and the risks of extreme conditions with state-of-the-art accuracy</title>
		<author>
			<persName><forename type="first">I</forename><surname>Price</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Willson</surname></persName>
		</author>
		<ptr target="https://deepmind.com/discover/blog/gencast-predicts-weather-and-the-risks-of-extreme-conditions-with-sota-accuracy/" />
	</analytic>
	<monogr>
		<title level="m">Google DeepMind Blog</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName><surname>Prismarinejs</surname></persName>
		</author>
		<author>
			<persName><surname>Mineflayer</surname></persName>
		</author>
		<ptr target="https://github.com/PrismarineJS/mineflayer" />
		<title level="m">Create minecraft bots with node.js</title>
		<imprint>
			<date type="published" when="2024">2024</date>
			<biblScope unit="page" from="2024" to="2025" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">A survey on domain adaptation theory: learning bounds and theoretical guarantees</title>
		<author>
			<persName><forename type="first">I</forename><surname>Redko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Morvant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Habrard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sebban</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bennani</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2004.11829" />
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<author>
			<persName><forename type="first">Reshoring</forename><surname>Initiative</surname></persName>
		</author>
		<ptr target="https://reshorenow.org" />
		<title level="m">Data Report: Reshoring &amp; FDI Announcements</title>
		<imprint>
			<date type="published" when="2022">2022. 2023. December 30, 2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Prefixrl: Optimization of parallel prefix circuits using deep reinforcement learning</title>
		<author>
			<persName><forename type="first">R</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Raiman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Elkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kirby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Siu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Oberman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Godil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Catanzaro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2021 58th ACM/IEEE Design Automation Conference (DAC)</title>
		<imprint>
			<biblScope unit="page" from="853" to="858" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName><surname>Ieee</surname></persName>
		</author>
		<idno type="DOI">10.1109/DAC18074.2021.9586094</idno>
		<ptr target="http://dx.doi.org/10.1109/DAC18074.2021.9586094" />
		<imprint>
			<date type="published" when="2021-12">December 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Example of factorio setup: Basic resource extraction and smelting</title>
		<ptr target="https://www.reddit.com/r/factorio/comments/s6pgbu/new_to_game_this_is_my_first_real_attempt_at_a/" />
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Mastering chess and shogi by self-play with a general reinforcement learning algorithm</title>
		<author>
			<persName><forename type="first">D</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Hubert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Schrittwieser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Antonoglou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Guez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lanctot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Sifre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kumaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Graepel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lillicrap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Hassabis</surname></persName>
		</author>
		<ptr target="https://www.reddit.com/r/factorio/comments/8bappn/chunk_aligned_rhd_rail_blueprints_mostly_for_141/" />
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
	<note>train p atterns</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title/>
		<ptr target="https://steamuserimages-a.akamaihd.net/ugc/492403625774777066/667C0316C478068CEEC1FE3D4196191F86C4849E/" />
	</analytic>
	<monogr>
		<title level="j">Steam. Main bus</title>
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Sterman</surname></persName>
		</author>
		<title level="m">Business Dynamics: Systems Thinking and Modeling for a Complex World</title>
		<meeting><address><addrLine>Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>McGraw Hill</publisher>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Grandmaster level in starcraft ii using multi-agent reinforcement learning</title>
		<author>
			<persName><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Babuschkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Czarnecki</surname></persName>
		</author>
		<idno type="DOI">10.1038/s41586-019-1724-z</idno>
		<ptr target="https://doi.org/10.1038/s41586-019-1724-z" />
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">575</biblScope>
			<biblScope unit="page" from="350" to="354" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Walden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Roedler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Forsberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Hamelin</surname></persName>
		</author>
		<author>
			<persName><surname>Shortell</surname></persName>
		</author>
		<title level="m">INCOSE Systems Engineering Handbook: A Guide for System Life Cycle Processes and Activities</title>
		<editor>
			<persName><forename type="first">T</forename><forename type="middle">M</forename></persName>
		</editor>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note>4th edition</note>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Voyager: An open-ended embodied agent with large language models</title>
		<author>
			<persName><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2305.16291" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">A comprehensive survey of continual learning: Theory, method and application</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhu</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2302.00487" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Cybernetics: Or Control and Communication in the Animal and the Machine</title>
		<author>
			<persName><forename type="first">N</forename><surname>Wiener</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1948">1948</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Introducing devin, the first ai software engineer. Cognition Blog</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wu</surname></persName>
		</author>
		<ptr target="https://www.cognition.ai/blog/introducing-devin" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Swe-bench multimodal: Do ai systems generalize to visual software domains?</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Jimenez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lieret</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Muennighoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Synnaeve</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">R</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">I</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Press</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2410.03859" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">A massive multi-discipline multimodal understanding and reasoning benchmark for expert agi</title>
		<author>
			<persName><forename type="first">X</forename><surname>Yue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stevens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><surname>Mmmu</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2311.16502" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Megablackmarket mod</title>
		<author>
			<persName><surname>Zeroainz</surname></persName>
		</author>
		<ptr target="https://mods.factorio.com/mod/MegaBlackMarket" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Judging llm-as-a-judge with mt-bench and chatbot arena</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W.-L</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">P</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2306.05685" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">P</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName><surname>Agentbench</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2308.07490" />
		<title level="m">Evaluating llms as agents</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Diplomacy mod</title>
		<author>
			<persName><surname>Zweroxotnik</surname></persName>
		</author>
		<ptr target="https://mods.factorio.com/mod/diplomacy" />
		<imprint>
			<biblScope unit="page" from="2025" to="2026" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
